#include "zkir/Dialect/ZKIR/IR/Types.h"
#include "zkir/Dialect/ZKIR/IR/Ops.h"
#include "zkir/Dialect/ZKIR/Util/SymbolHelper.h"

#include <mlir/IR/BuiltinTypeInterfaces.h>
#include <mlir/Support/LogicalResult.h>

#include <llvm/ADT/SmallVector.h>

namespace zkir {

/// Checks if the type is a ZKIR Array and it also contains
/// a valid ZKIR type.
bool isValidZkirArrayType(mlir::Type type) {
  return llvm::isa<zkir::ArrayType>(type) &&
         isValidZkirType(llvm::cast<::zkir::ArrayType>(type).getElementType());
}

// valid types: I1, Index, ZKIR_FeltType, ZKIR_StructType, ZKIR_ArrayType
bool isValidZkirType(mlir::Type type) {
  return type.isSignlessInteger(1) || llvm::isa<::mlir::IndexType>(type) ||
         llvm::isa<zkir::FeltType>(type) || llvm::isa<zkir::StructType>(type) ||
         isValidZkirArrayType(type);
}

// valid types: I1, Index, ZKIR_FeltType, ZKIR_ArrayType
bool isValidEmitEqType(mlir::Type type) {
  return type.isSignlessInteger(1) || llvm::isa<::mlir::IndexType>(type) ||
         llvm::isa<zkir::FeltType>(type) ||
         (llvm::isa<zkir::ArrayType>(type) &&
          isValidEmitEqType(llvm::cast<::zkir::ArrayType>(type).getElementType()));
}

mlir::FailureOr<SymbolLookupResult<StructDefOp>>
StructType::getDefinition(mlir::SymbolTableCollection &symbolTable, mlir::Operation *op) {
  auto def = lookupTopLevelSymbol<StructDefOp>(symbolTable, getName(), op);
  if (mlir::failed(def)) {
    return op->emitError() << "no '" << StructDefOp::getOperationName() << "' named \"" << getName()
                           << "\"";
  } else {
    return def;
  }
}

mlir::LogicalResult
StructType::verifySymbol(mlir::SymbolTableCollection &symbolTable, mlir::Operation *op) {
  return getDefinition(symbolTable, op);
}

mlir::LogicalResult ArrayType::verify(
    llvm::function_ref<mlir::InFlightDiagnostic()> emitError, mlir::Type elementType,
    llvm::ArrayRef<int64_t> shape
) {

  // If a user of ZKIR needs the shape to be statically defined
  // it should check it here. How to communicate that need to the type is TBD.
  if (shape.size() <= 0) {
    return emitError() << "array must have a shape of at least one element";
  }
  // An array can hold any ZKIR type bar Arrays
  auto typeCheckResult = checkValidZkirType(emitError, elementType);
  if (mlir::succeeded(typeCheckResult)) {
    if (llvm::isa<zkir::ArrayType>(elementType)) {
      return emitError() << "array inner type cannot be array";
    }
  }
  return typeCheckResult;
}

bool ArrayType::hasRank() const {
  return true; // A ZKIR Array is ranked by construction.
}

ArrayType
ArrayType::cloneWith(std::optional<llvm::ArrayRef<int64_t>> shape, mlir::Type elementType) const {
  llvm::ArrayRef<int64_t> newShape = getShape();
  if (shape.has_value()) {
    newShape = *shape;
  }
  return ArrayType::get(elementType.getContext(), elementType, newShape);
}

int64_t ArrayType::getNumElements() const { return mlir::ShapedType::getNumElements(getShape()); }

// The code for these two methods was based on
// the autogenerated code by TableGen

/// A ZKIR Array has a similar format to tensors
/// and memref types: <$shape x $type>
/// i.e. !zkir.array<2x2x!zkir.felt>
///   This will produce a shape of [2,2]
///   and a type of ZKIR's Felt
mlir::Type ArrayType::parse(mlir::AsmParser &parser) {
  ::mlir::Builder odsBuilder(parser.getContext());
  ::llvm::SMLoc loc = parser.getCurrentLocation();
  // Parse literal '<'
  if (parser.parseLess()) {
    return {};
  }

  // I worry this array may dissapear early can cause
  // an Use-After-Free but the MLIR code I studied did
  // it too so it may be fine.  -- Dani
  llvm::SmallVector<int64_t> parsedShape;

  // The default configuration is good for our purpose
  //   allowDynamic = true
  //    This allows ? values.
  //    Wether an unknown dimension size is allowed or
  //    not will depend on the semantics the array finds
  //    itself in.
  //   withTrailing = true
  //    The parser will consume a literal `x` token
  //    if its trailing after the rest of the shape has been
  //    parsed. This leaves the head right at the type declaration.
  auto _result_shape = parser.parseDimensionList(parsedShape);

  // Parse variable 'elementType'
  auto _result_elementType = ::mlir::FieldParser<::mlir::Type>::parse(parser);
  if (::mlir::failed(_result_elementType)) {
    parser.emitError(
        parser.getCurrentLocation(),
        "failed to parse ZKIR_ArrayType parameter 'elementType' which is to be a `::mlir::Type`"
    );
    return {};
  }
  // Parse literal '>'
  if (parser.parseGreater()) {
    return {};
  }

  assert(::mlir::succeeded(_result_elementType));
  assert(::mlir::succeeded(_result_shape));

  return parser.getChecked<ArrayType>(
      loc, parser.getContext(), ::mlir::Type(*_result_elementType),
      ::llvm::ArrayRef<int64_t>(parsedShape)
  );
}

/// Prints the array type with the following format
/// <$shape x $type>
/// i.e. !zkir.array<2x2 x !zkir.felt>
void ArrayType::print(mlir::AsmPrinter &printer) const {
  mlir::Builder odsBuilder(getContext());
  printer << "<";
  printer.printDimensionList(getShape());
  printer << " x ";
  printer.printStrippedAttrOrType(getElementType());
  printer << ">";
}

} // namespace zkir
