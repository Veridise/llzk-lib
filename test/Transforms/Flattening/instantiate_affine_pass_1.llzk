// RUN: llzk-opt -I %S -split-input-file -llzk-flatten -verify-diagnostics %s | FileCheck --enable-var-scope %s

#IdxToLen = affine_map<(i)->(2*i)>
#Values = affine_map<(i,j)->(5*j+i)>
!ToFelt = !llzk.struct<@ToFelt<[#Values]>>
!HeterArr = !llzk.struct<@VarArray<[#IdxToLen, !ToFelt]>>
module attributes {veridise.lang = "llzk"} {
  // pre-defined
  llzk.struct @VarArray<[@N, @T]> {
    field @val: !array.array<@N x !llzk.tvar<@T>>

    function.def @compute(%inp: !array.array<@N x !llzk.tvar<@T>>) -> !llzk.struct<@VarArray<[@N, @T]>> {
      %self = new_struct : !llzk.struct<@VarArray<[@N, @T]>>
      writef %self[@val] = %inp : !llzk.struct<@VarArray<[@N, @T]>>, !array.array<@N x !llzk.tvar<@T>>
      function.return %self : !llzk.struct<@VarArray<[@N, @T]>>
    }

    function.def @constrain(%self: !llzk.struct<@VarArray<[@N, @T]>>, %inp: !array.array<@N x !llzk.tvar<@T>>) {
      function.return
    }
  }

  llzk.struct @ToFelt<[@A]> {
    field @out: !felt.felt {llzk.pub}

    function.def @compute() -> !llzk.struct<@ToFelt<[@A]>> {
      %self = new_struct : !llzk.struct<@ToFelt<[@A]>>
      %constA = read_const @A : !felt.felt
      writef %self[@out] = %constA : !llzk.struct<@ToFelt<[@A]>>, !felt.felt
      function.return %self: !llzk.struct<@ToFelt<[@A]>>
    }

    function.def @constrain(%self: !llzk.struct<@ToFelt<[@A]>>) {
      function.return
    }
  }

  llzk.struct @TestLoopWithAffineArrayStruct<[@N]> {
    // The `pub` here is intended to test that attributes are copied by
    //  UpdateFieldTypeFromWrite when creating a new FieldDefOp.
    field @arrs: !array.array<@N x !HeterArr> {llzk.pub}

    function.def @compute() -> !llzk.struct<@TestLoopWithAffineArrayStruct<[@N]>> {
      %arrs_temp = array.new : !array.array<@N x !HeterArr>

      %0 = arith.constant 0 : index
      %1 = arith.constant 1 : index
      %n = read_const @N : index
      %step = arith.constant 1 : index
      scf.for %i = %1 to %n step %step { // range: [1,N)
        // The array length is a function of 'i' and it contains non-homogeneous structs
        //    !ToFelt = !llzk.struct<@ToFelt<[#Values]>>
        %arr = array.new{(%i)} : !array.array<#IdxToLen x !ToFelt>
        scf.for %j = %0 to %i step %step { // range: [0,i)
          %v = function.call @ToFelt::@compute(){(%i, %j)} : () -> !ToFelt
          array.write %arr[%j] = %v : !array.array<#IdxToLen x !ToFelt>, !ToFelt
        }
        // Create a VarArray with length as a function of 'i' and non-homogeneous element type
        %va = function.call @VarArray::@compute(%arr){(%i)} : (!array.array<#IdxToLen x !ToFelt>) -> !HeterArr
        array.write %arrs_temp[%i] = %va : !array.array<@N x !HeterArr>, !HeterArr
      }
      //
      %self = new_struct : !llzk.struct<@TestLoopWithAffineArrayStruct<[@N]>>
      writef %self[@arrs] = %arrs_temp
            : !llzk.struct<@TestLoopWithAffineArrayStruct<[@N]>>, !array.array<@N x !HeterArr>
      function.return %self : !llzk.struct<@TestLoopWithAffineArrayStruct<[@N]>>
    }

    function.def @constrain(%self: !llzk.struct<@TestLoopWithAffineArrayStruct<[@N]>>) {
      function.return
    }
  }

  llzk.struct @Main {
    function.def @compute() -> !llzk.struct<@Main> {
      %self = llzk.new_struct : !llzk.struct<@Main>
      %x = function.call @TestLoopWithAffineArrayStruct::@compute()
            : () -> !llzk.struct<@TestLoopWithAffineArrayStruct<[2]>>
      function.return %self: !llzk.struct<@Main>
    }

    function.def @constrain(%self: !llzk.struct<@Main>) {
      function.return
    }
  }
}
// CHECK-LABEL: llzk.struct @"VarArray_2_!s<@ToFelt_1>" {
// CHECK-NEXT:    field @val : !array.array<2 x !llzk.struct<@ToFelt_1>>
// CHECK-NEXT:    function.def @compute(%[[V0:[0-9a-zA-Z_\.]+]]: !array.array<2 x !llzk.struct<@ToFelt_1>>) -> !llzk.struct<@"VarArray_2_!s<@ToFelt_1>"> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = new_struct : <@"VarArray_2_!s<@ToFelt_1>">
// CHECK-NEXT:      writef %[[V1]][@val] = %[[V0]] : <@"VarArray_2_!s<@ToFelt_1>">, !array.array<2 x !llzk.struct<@ToFelt_1>>
// CHECK-NEXT:      function.return %[[V1]] : !llzk.struct<@"VarArray_2_!s<@ToFelt_1>">
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V2:[0-9a-zA-Z_\.]+]]: !llzk.struct<@"VarArray_2_!s<@ToFelt_1>">, %[[V3:[0-9a-zA-Z_\.]+]]: !array.array<2 x !llzk.struct<@ToFelt_1>>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }

// CHECK-LABEL: llzk.struct @ToFelt_1 {
// CHECK-NEXT:    field @out : !felt.felt {llzk.pub}
// CHECK-NEXT:    function.def @compute() -> !llzk.struct<@ToFelt_1> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V0:[0-9a-zA-Z_\.]+]] = felt.const 1
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = new_struct : <@ToFelt_1>
// CHECK-NEXT:      writef %[[V1]][@out] = %[[V0]] : <@ToFelt_1>, !felt.felt
// CHECK-NEXT:      function.return %[[V1]] : !llzk.struct<@ToFelt_1>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V2:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ToFelt_1>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }

// CHECK-LABEL: llzk.struct @TestLoopWithAffineArrayStruct_2 {
// CHECK-NEXT:    field @arrs : !array.array<2 x !llzk.struct<@"VarArray_2_!s<@ToFelt_1>">> {llzk.pub}
// CHECK-NEXT:    function.def @compute() -> !llzk.struct<@TestLoopWithAffineArrayStruct_2> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V0:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = array.new  : <2 x !llzk.struct<@"VarArray_2_!s<@ToFelt_1>">>
// CHECK-NEXT:      %[[V3:[0-9a-zA-Z_\.]+]] = array.new  : <2 x !llzk.struct<@ToFelt_1>>
// CHECK-NEXT:      %[[V4:[0-9a-zA-Z_\.]+]] = function.call @ToFelt_1::@compute() : () -> !llzk.struct<@ToFelt_1>
// CHECK-NEXT:      array.write %[[V3]]{{\[}}%[[V1]]] = %[[V4]] : <2 x !llzk.struct<@ToFelt_1>>, !llzk.struct<@ToFelt_1>
// CHECK-NEXT:      %[[V5:[0-9a-zA-Z_\.]+]] = function.call @"VarArray_2_!s<@ToFelt_1>"::@compute(%[[V3]]) : (!array.array<2 x !llzk.struct<@ToFelt_1>>) -> !llzk.struct<@"VarArray_2_!s<@ToFelt_1>">
// CHECK-NEXT:      array.write %[[V2]]{{\[}}%[[V0]]] = %[[V5]] : <2 x !llzk.struct<@"VarArray_2_!s<@ToFelt_1>">>, !llzk.struct<@"VarArray_2_!s<@ToFelt_1>">
// CHECK-NEXT:      %[[V6:[0-9a-zA-Z_\.]+]] = new_struct : <@TestLoopWithAffineArrayStruct_2>
// CHECK-NEXT:      writef %[[V6]][@arrs] = %[[V2]] : <@TestLoopWithAffineArrayStruct_2>, !array.array<2 x !llzk.struct<@"VarArray_2_!s<@ToFelt_1>">>
// CHECK-NEXT:      function.return %[[V6]] : !llzk.struct<@TestLoopWithAffineArrayStruct_2>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V7:[0-9a-zA-Z_\.]+]]: !llzk.struct<@TestLoopWithAffineArrayStruct_2>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }

// CHECK-LABEL: llzk.struct @Main {
// CHECK-NEXT:    function.def @compute() -> !llzk.struct<@Main> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V0:[0-9a-zA-Z_\.]+]] = new_struct : <@Main>
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = function.call @TestLoopWithAffineArrayStruct_2::@compute() : () -> !llzk.struct<@TestLoopWithAffineArrayStruct_2>
// CHECK-NEXT:      function.return %[[V0]] : !llzk.struct<@Main>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V2:[0-9a-zA-Z_\.]+]]: !llzk.struct<@Main>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
