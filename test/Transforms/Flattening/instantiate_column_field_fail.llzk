// RUN: llzk-opt -split-input-file %s -llzk-flatten -verify-diagnostics 

module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentA1<[@T]> {
    // expected-error@+1 {{'struct.field' op marked as column can only contain felts, arrays of column types, or structs with columns, but field has type 'index'}}
    struct.field @f1 : !poly.tvar<@T> {column}

    function.def @constrain(%self: !struct.type<@ComponentA1<[@T]>>) { function.return }
    function.def @compute() -> !struct.type<@ComponentA1<[@T]>> {
      %self = struct.new : !struct.type<@ComponentA1<[@T]>>
      function.return %self : !struct.type<@ComponentA1<[@T]>>
    }
  }

  struct.def @ComponentA2 {
    function.def @compute(%p: !struct.type<@ComponentA1<[index]>>) -> !struct.type<@ComponentA2> {
      %self = struct.new : !struct.type<@ComponentA2>
      %r = struct.readf %p[@f1] : !struct.type<@ComponentA1<[index]>>, index {tableOffset = -1 : index}
      function.return %self : !struct.type<@ComponentA2>
    }

    function.def @constrain(%self: !struct.type<@ComponentA2>, %p: !struct.type<@ComponentA1<[index]>>) {
      function.return
    }
  }
}


