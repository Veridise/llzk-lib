// RUN: llzk-opt -split-input-file -llzk-flatten %s | FileCheck --enable-var-scope %s

#mapDiv = affine_map<()[s0, s1] -> (s0 floordiv s1)>
#mapAdd = affine_map<()[s0, s1] -> (s0 + s1)>
module attributes {veridise.lang = "llzk"} {
  llzk.struct @Foo<[@Aff]> {
    llzk.field @bar: !llzk.struct<@Bar<[@Aff]>>
    function.def @compute(%arg: !llzk.struct<@Bar<[@Aff]>>) -> !llzk.struct<@Foo<[@Aff]>> {
      %self = llzk.new_struct : !llzk.struct<@Foo<[@Aff]>>
      llzk.writef %self[@bar] = %arg : !llzk.struct<@Foo<[@Aff]>>, !llzk.struct<@Bar<[@Aff]>>
      function.return %self : !llzk.struct<@Foo<[@Aff]>>
    }
    function.def @constrain(%self: !llzk.struct<@Foo<[@Aff]>>, %arg: !llzk.struct<@Bar<[@Aff]>>) {
      function.return
    }
  }
  llzk.struct @Bar<[@Aff]> {
    function.def @compute() -> !llzk.struct<@Bar<[@Aff]>> {
      %self = llzk.new_struct : !llzk.struct<@Bar<[@Aff]>>
      function.return %self : !llzk.struct<@Bar<[@Aff]>>
    }
    function.def @constrain(%arg0: !llzk.struct<@Bar<[@Aff]>>) {
      function.return
    }
  }
  llzk.struct @Unpack<[@N, @P, @Aff]> {
    llzk.field @f: !llzk.struct<@Bar<[#mapAdd]>>
    llzk.field @g: !array.array<@Aff x !felt.felt>
    function.def @compute(%arg0: !array.array<@Aff x !felt.felt>) -> !llzk.struct<@Unpack<[@N, @P, @Aff]>> {
      %self = llzk.new_struct : !llzk.struct<@Unpack<[@N, @P, @Aff]>>
      llzk.writef %self[@g] = %arg0 : !llzk.struct<@Unpack<[@N, @P, @Aff]>>, !array.array<@Aff x !felt.felt>

      %n = llzk.read_const @N : index
      %p = llzk.read_const @P : index
      %0 = function.call @Bar::@compute() {()[%n,%p]} : () -> !llzk.struct<@Bar<[#mapAdd]>>
      llzk.writef %self[@f] = %0 : !llzk.struct<@Unpack<[@N, @P, @Aff]>>, !llzk.struct<@Bar<[#mapAdd]>>

      %1 = function.call @Foo::@compute(%0) {()[%n,%p]} : (!llzk.struct<@Bar<[#mapAdd]>>) -> !llzk.struct<@Foo<[#mapAdd]>>

      function.return %self : !llzk.struct<@Unpack<[@N, @P, @Aff]>>
    }
    function.def @constrain(%arg0: !llzk.struct<@Unpack<[@N, @P, @Aff]>>, %arg1: !array.array<@Aff x !felt.felt>) {
      function.return
    }
  }
  llzk.struct @User1 {
    function.def @compute() -> !llzk.struct<@User1> {
      %0 = felt.const 42
      %1 = felt.const 99
      %2 = felt.const 42
      %3 = felt.const 99

      %arr = array.new %0, %1, %2, %3 : !array.array<4 x !felt.felt>
      %a = arith.constant 8 : index
      %b = arith.constant 2 : index
      %s = function.call @Unpack::@compute(%arr) {()[%a, %b]}
        : (!array.array<4 x !felt.felt>) -> !llzk.struct<@Unpack<[8, 2, #mapDiv]>>
      %self = llzk.new_struct : !llzk.struct<@User1>
      function.return %self : !llzk.struct<@User1>
    }
    function.def @constrain(%arg0: !llzk.struct<@User1>) {
      function.return
    }
  }
}
// CHECK-LABEL: llzk.struct @Foo_10 {
// CHECK-NEXT:    llzk.field @bar : !llzk.struct<@Bar_10>
// CHECK-NEXT:    function.def @compute(%[[V0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@Bar_10>) -> !llzk.struct<@Foo_10> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@Foo_10>
// CHECK-NEXT:      llzk.writef %[[V1]][@bar] = %[[V0]] : <@Foo_10>, !llzk.struct<@Bar_10>
// CHECK-NEXT:      function.return %[[V1]] : !llzk.struct<@Foo_10>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V2:[0-9a-zA-Z_\.]+]]: !llzk.struct<@Foo_10>, %[[V3:[0-9a-zA-Z_\.]+]]: !llzk.struct<@Bar_10>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
//
// CHECK-LABEL: llzk.struct @Bar_10 {
// CHECK-NEXT:    function.def @compute() -> !llzk.struct<@Bar_10> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V0:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@Bar_10>
// CHECK-NEXT:      function.return %[[V0]] : !llzk.struct<@Bar_10>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V1:[0-9a-zA-Z_\.]+]]: !llzk.struct<@Bar_10>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
//
// CHECK-LABEL: llzk.struct @Unpack_8_2_4 {
// CHECK-NEXT:    llzk.field @f : !llzk.struct<@Bar_10>
// CHECK-NEXT:    llzk.field @g : !array.array<4 x !felt.felt>
// CHECK-NEXT:    function.def @compute(%[[V0:[0-9a-zA-Z_\.]+]]: !array.array<4 x !felt.felt>) -> !llzk.struct<@Unpack_8_2_4> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@Unpack_8_2_4>
// CHECK-NEXT:      llzk.writef %[[V1]][@g] = %[[V0]] : <@Unpack_8_2_4>, !array.array<4 x !felt.felt>
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = function.call @Bar_10::@compute() : () -> !llzk.struct<@Bar_10>
// CHECK-NEXT:      llzk.writef %[[V1]][@f] = %[[V2]] : <@Unpack_8_2_4>, !llzk.struct<@Bar_10>
// CHECK-NEXT:      %[[V3:[0-9a-zA-Z_\.]+]] = function.call @Foo_10::@compute(%[[V2]]) : (!llzk.struct<@Bar_10>) -> !llzk.struct<@Foo_10>
// CHECK-NEXT:      function.return %[[V1]] : !llzk.struct<@Unpack_8_2_4>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V4:[0-9a-zA-Z_\.]+]]: !llzk.struct<@Unpack_8_2_4>, %[[V5:[0-9a-zA-Z_\.]+]]: !array.array<4 x !felt.felt>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
//
// CHECK-LABEL: llzk.struct @User1 {
// CHECK-NEXT:    function.def @compute() -> !llzk.struct<@User1> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V0:[0-9a-zA-Z_\.]+]] = felt.const 42
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = felt.const 99
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = array.new %[[V0]], %[[V1]], %[[V0]], %[[V1]] : <4 x !felt.felt>
// CHECK-NEXT:      %[[V3:[0-9a-zA-Z_\.]+]] = function.call @Unpack_8_2_4::@compute(%[[V2]]) : (!array.array<4 x !felt.felt>) -> !llzk.struct<@Unpack_8_2_4>
// CHECK-NEXT:      %[[V4:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@User1>
// CHECK-NEXT:      function.return %[[V4]] : !llzk.struct<@User1>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V5:[0-9a-zA-Z_\.]+]]: !llzk.struct<@User1>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
