// RUN: llzk-opt -I %S -split-input-file -llzk-flatten -debug-only=llzk-flatten -verify-diagnostics %s | FileCheck --enable-var-scope %s

// Tests:
//  - CreateArrayOp using only constant values and no loops
//  - Instantiated array Value used in FieldWriteOp requires manual update of FieldDefOp type
!Ty = !array.array<affine_map<(i)->(i)>, affine_map<(i,j)->(i+j)>, affine_map<(i)[j]->(i+j)> x index>
module attributes {veridise.lang = "llzk"} {
  struct.def @Component01 {
    struct.field @out: !Ty

    function.def @compute() -> !struct.struct<@Component01> {
      %1 = arith.constant 1 : index
      %2 = arith.constant 2 : index
      %3 = arith.constant 3 : index
      %4 = arith.constant 4 : index
      %5 = arith.constant 5 : index
      %arr = array.new{(%1),(%2,%3),(%4)[%5]} : !Ty

      %self = struct.new : !struct.struct<@Component01>
      struct.writef %self[@out] = %arr : !struct.struct<@Component01>, !Ty
      function.return %self : !struct.struct<@Component01>
    }

    function.def @constrain(%self: !struct.struct<@Component01>) {
      function.return
    }
  }
}
// CHECK-LABEL: struct.def @Component01 {
// CHECK-NEXT:    struct.field @out : !array.array<1,5,9 x index>
// CHECK-NEXT:    function.def @compute() -> !struct.struct<@Component01> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V0:[0-9a-zA-Z_\.]+]] = array.new  : <1,5,9 x index>
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = struct.new : <@Component01>
// CHECK-NEXT:      struct.writef %[[V1]][@out] = %[[V0]] : <@Component01>, !array.array<1,5,9 x index>
// CHECK-NEXT:      function.return %[[V1]] : !struct.struct<@Component01>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V2:[0-9a-zA-Z_\.]+]]: !struct.struct<@Component01>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// -----

// Tests:
//  - CreateArrayOp using non-constant value
//  - Instantiated array Value used in WriteArrayOp (updated automatically because
//    the type just comes from the SSA Value used in the Op)
#M1 = affine_map<(i)->(i)>
#M2 = affine_map<(i,j)->(i+j)>
#M3 = affine_map<(i)[j]->(i+j)>
!Ty = !array.array<#M1,#M2,#M3 x index>
module attributes {veridise.lang = "llzk"} {
  struct.def @Component02 {
    struct.field @out: !Ty

    function.def @compute(%x: index) -> !struct.struct<@Component02> {
      %1 = arith.constant 1 : index
      %2 = arith.constant 2 : index
      %3 = arith.constant 3 : index
      %4 = arith.constant 4 : index
      %5 = arith.constant 5 : index
      %arr = array.new{(%1),(%2,%x),(%4)[%5]} : !Ty // !array.array<1,(x+2),9 x index>

      %0 = arith.constant 0 : index
      array.write %arr[%0,%0,%0] = %5 : !Ty, index
      array.write %arr[%0,%0,%1] = %4 : !Ty, index

      %self = struct.new : !struct.struct<@Component02>
      struct.writef %self[@out] = %arr : !struct.struct<@Component02>, !Ty
      function.return %self : !struct.struct<@Component02>
    }

    function.def @constrain(%self: !struct.struct<@Component02>, %x: index) {
      function.return
    }
  }
}
// CHECK: #[[$M0:.+]] = affine_map<(d0, d1) -> (d0 + d1)>
// CHECK-LABEL: struct.def @Component02 {
// CHECK-NEXT:    struct.field @out : !array.array<1,#[[$M0]],9 x index>
// CHECK-NEXT:    function.def @compute(%[[V0:[0-9a-zA-Z_\.]+]]: index) -> !struct.struct<@Component02> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
// CHECK-NEXT:      %[[V3:[0-9a-zA-Z_\.]+]] = arith.constant 2 : index
// CHECK-NEXT:      %[[V4:[0-9a-zA-Z_\.]+]] = arith.constant 4 : index
// CHECK-NEXT:      %[[V5:[0-9a-zA-Z_\.]+]] = arith.constant 5 : index
// CHECK-NEXT:      %[[V6:[0-9a-zA-Z_\.]+]] = array.new{(%[[V3]], %[[V0]])} : <1,#[[$M0]],9 x index>
// CHECK-NEXT:      array.write %[[V6]]{{\[}}%[[V1]], %[[V1]], %[[V1]]] = %[[V5]] : <1,#[[$M0]],9 x index>, index
// CHECK-NEXT:      array.write %[[V6]]{{\[}}%[[V1]], %[[V1]], %[[V2]]] = %[[V4]] : <1,#[[$M0]],9 x index>, index
// CHECK-NEXT:      %[[V7:[0-9a-zA-Z_\.]+]] = struct.new : <@Component02>
// CHECK-NEXT:      struct.writef %[[V7]][@out] = %[[V6]] : <@Component02>, !array.array<1,#[[$M0]],9 x index>
// CHECK-NEXT:      function.return %[[V7]] : !struct.struct<@Component02>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V8:[0-9a-zA-Z_\.]+]]: !struct.struct<@Component02>, %[[V9:[0-9a-zA-Z_\.]+]]: index) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// -----

// Tests:
//  - CreateArrayOp using loop induction variable within a loop that can't unroll
//  - Instantiated array Value used in ExtractArrayOp requires manual update of ExtractArrayOp result type
#M1 = affine_map<(i)[j]->(i+j)>
#M2 = affine_map<(i)->(i+2)>
#M3 = affine_map<()[i,j]->(i+j)>
!Ty = !array.array<#M1,#M2,#M3 x index>
module attributes {veridise.lang = "llzk"} {
  struct.def @Component03 {
    struct.field @a: !array.array<#M3 x index>
    struct.field @b: !array.array<#M3 x index>

    function.def @compute(%x: index) -> !struct.struct<@Component03> {
      %self = struct.new : !struct.struct<@Component03>
      %0 = arith.constant 0 : index
      %1 = arith.constant 1 : index
      %2 = arith.constant 2 : index
      %3 = arith.constant 3 : index
      scf.for %i = %0 to %x step %1 {
        %arr = array.new{(%i)[%1],(%i),()[%2,%3]} : !Ty // !array.array<(i+1),(i+2),5 x index>
        %a = array.extract %arr[%0, %0] : !Ty
        struct.writef %self[@a] = %a : !struct.struct<@Component03>, !array.array<#M3 x index>
        %b = array.extract %arr[%0, %1] : !Ty
        struct.writef %self[@b] = %b : !struct.struct<@Component03>, !array.array<#M3 x index>
      }
      function.return %self : !struct.struct<@Component03>
    }

    function.def @constrain(%self: !struct.struct<@Component03>, %x: index) {
      function.return
    }
  }
}
// CHECK: #[[$M1:[0-9a-zA-Z_\.]+]] = affine_map<(d0)[s0] -> (d0 + s0)>
// CHECK: #[[$M2:[0-9a-zA-Z_\.]+]] = affine_map<(d0) -> (d0 + 2)>
// CHECK-LABEL: struct.def @Component03 {
// CHECK-NEXT:    struct.field @a : !array.array<5 x index>
// CHECK-NEXT:    struct.field @b : !array.array<5 x index>
// CHECK-NEXT:    function.def @compute(%[[V0:[0-9a-zA-Z_\.]+]]: index) -> !struct.struct<@Component03> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
// CHECK-NEXT:      %[[V3:[0-9a-zA-Z_\.]+]] = struct.new : <@Component03>
// CHECK-NEXT:      scf.for %[[V4:[0-9a-zA-Z_\.]+]] = %[[V2]] to %[[V0]] step %[[V1]] {
// CHECK-NEXT:        %[[V5:[0-9a-zA-Z_\.]+]] = array.new{(%[[V4]]){{\[}}%[[V1]]], (%[[V4]])} : <#[[$M1]],#[[$M2]],5 x index>
// CHECK-NEXT:        %[[V6:[0-9a-zA-Z_\.]+]] = array.extract %[[V5]]{{\[}}%[[V2]], %[[V2]]] : <#[[$M1]],#[[$M2]],5 x index>
// CHECK-NEXT:        struct.writef %[[V3]][@a] = %[[V6]] : <@Component03>, !array.array<5 x index>
// CHECK-NEXT:        %[[V7:[0-9a-zA-Z_\.]+]] = array.extract %[[V5]]{{\[}}%[[V2]], %[[V1]]] : <#[[$M1]],#[[$M2]],5 x index>
// CHECK-NEXT:        struct.writef %[[V3]][@b] = %[[V7]] : <@Component03>, !array.array<5 x index>
// CHECK-NEXT:      }
// CHECK-NEXT:      function.return %[[V3]] : !struct.struct<@Component03>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V8:[0-9a-zA-Z_\.]+]]: !struct.struct<@Component03>, %[[V9:[0-9a-zA-Z_\.]+]]: index) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// -----

// Tests:
//  - CreateArrayOp using loop induction variable within unknown-known loop nesting
//  - Instantiated array Value used in ReadArrayOp requires manual update of ReadArrayOp array type
#M1 = affine_map<(i)[j]->(i+j)>
#M2 = affine_map<(i)->(i+2)>
#M3 = affine_map<()[i,j]->(i+j)>
!Ty = !array.array<#M1,#M2,#M3 x index>
module attributes {veridise.lang = "llzk"} {
  struct.def @Component04 {
    struct.field @f: index

    function.def @compute(%x: index) -> !struct.struct<@Component04> {
      %self = struct.new : !struct.struct<@Component04>
      %0 = arith.constant 0 : index
      %1 = arith.constant 1 : index
      %2 = arith.constant 2 : index
      %3 = arith.constant 3 : index
      scf.for %i = %0 to %x step %1 {
        %sum = scf.for %j = %0 to %2 step %1
          iter_args(%cur_sum = %0) -> index {
          %arr = array.new{(%i)[%1],(%j),()[%2,%3]} : !Ty // !array.array<(i+1),(j+2),5 x index>
          %a = array.read %arr[%0, %0, %0] : !Ty, index
          %b = array.read %arr[%0, %1, %0] : !Ty, index
          %c = arith.addi %a, %b : index
          scf.yield %c : index
        }
        struct.writef %self[@f] = %sum : !struct.struct<@Component04>, index
      }
      function.return %self : !struct.struct<@Component04>
    }

    function.def @constrain(%self: !struct.struct<@Component04>, %x: index) {
      function.return
    }
  }
}
// CHECK: #[[$M3:[0-9a-zA-Z_\.]+]] = affine_map<(d0)[s0] -> (d0 + s0)>
// CHECK-LABEL: struct.def @Component04 {
// CHECK-NEXT:    struct.field @f : index
// CHECK-NEXT:    function.def @compute(%[[V0:[0-9a-zA-Z_\.]+]]: index) -> !struct.struct<@Component04> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
// CHECK-NEXT:      %[[V3:[0-9a-zA-Z_\.]+]] = struct.new : <@Component04>
// CHECK-NEXT:      scf.for %[[V4:[0-9a-zA-Z_\.]+]] = %[[V2]] to %[[V0]] step %[[V1]] {
// CHECK-NEXT:        %[[V5:[0-9a-zA-Z_\.]+]] = array.new{(%[[V4]]){{\[}}%[[V1]]]} : <#[[$M3]],2,5 x index>
// CHECK-NEXT:        %[[V6:[0-9a-zA-Z_\.]+]] = array.read %[[V5]]{{\[}}%[[V2]], %[[V2]], %[[V2]]] : <#[[$M3]],2,5 x index>, index
// CHECK-NEXT:        %[[V7:[0-9a-zA-Z_\.]+]] = array.read %[[V5]]{{\[}}%[[V2]], %[[V1]], %[[V2]]] : <#[[$M3]],2,5 x index>, index
// CHECK-NEXT:        %[[V8:[0-9a-zA-Z_\.]+]] = array.new{(%[[V4]]){{\[}}%[[V1]]]} : <#[[$M3]],3,5 x index>
// CHECK-NEXT:        %[[V9:[0-9a-zA-Z_\.]+]] = array.read %[[V8]]{{\[}}%[[V2]], %[[V2]], %[[V2]]] : <#[[$M3]],3,5 x index>, index
// CHECK-NEXT:        %[[V10:[0-9a-zA-Z_\.]+]] = array.read %[[V8]]{{\[}}%[[V2]], %[[V1]], %[[V2]]] : <#[[$M3]],3,5 x index>, index
// CHECK-NEXT:        %[[V11:[0-9a-zA-Z_\.]+]] = arith.addi %[[V9]], %[[V10]] : index
// CHECK-NEXT:        struct.writef %[[V3]][@f] = %[[V11]] : <@Component04>, index
// CHECK-NEXT:      }
// CHECK-NEXT:      function.return %[[V3]] : !struct.struct<@Component04>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V12:[0-9a-zA-Z_\.]+]]: !struct.struct<@Component04>, %[[V13:[0-9a-zA-Z_\.]+]]: index) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// -----

// Tests:
//  - CreateArrayOp using loop induction variable within known-unknown loop nesting
//  - Instantiated array Value used in InsertArrayOp and ArrayLengthOp (both are updated
//    automatically because the type just comes from the SSA Value used in the Op)
#M1 = affine_map<(i)[j]->(i+j)>
#M2 = affine_map<(i)->(i+2)>
#M3 = affine_map<()[i,j]->(i+j)>
!Ty1 = !array.array<#M1,#M2,#M3 x index>
!Ty2 = !array.array<#M2,#M3 x index>
module attributes {veridise.lang = "llzk"} {
  struct.def @Component05 {
    struct.field @f: index

    function.def @compute(%x: index) -> !struct.struct<@Component05> {
      %self = struct.new : !struct.struct<@Component05>
      %0 = arith.constant 0 : index
      %1 = arith.constant 1 : index
      %2 = arith.constant 2 : index
      %3 = arith.constant 3 : index
      scf.for %i = %0 to %2 step %1 {
        scf.for %j = %0 to %x step %1 {
          %arr = array.new{(%i)[%1],(%j),()[%2,%3]} : !Ty1 // !array.array<(i+1),(j+2),5 x index>
          %inner = array.new{(%j),()[%2,%3]} : !Ty2 // !array.array<(j+2),5 x index>
          array.insert %arr[%0] = %inner : !Ty1, !Ty2
          %len = array.len %arr, %1 : !Ty1 // len(dimension 1) == (j+2)
          struct.writef %self[@f] = %len : !struct.struct<@Component05>, index
        }
      }
      function.return %self : !struct.struct<@Component05>
    }

    function.def @constrain(%self: !struct.struct<@Component05>, %x: index) {
      function.return
    }
  }
}
// CHECK: #[[$M4:[0-9a-zA-Z_\.]+]] = affine_map<(d0) -> (d0 + 2)>
// CHECK-LABEL: struct.def @Component05 {
// CHECK-NEXT:    struct.field @f : index
// CHECK-NEXT:    function.def @compute(%[[V0:[0-9a-zA-Z_\.]+]]: index) -> !struct.struct<@Component05> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
// CHECK-NEXT:      %[[V3:[0-9a-zA-Z_\.]+]] = struct.new : <@Component05>
// CHECK-NEXT:      scf.for %[[V4:[0-9a-zA-Z_\.]+]] = %[[V2]] to %[[V0]] step %[[V1]] {
// CHECK-NEXT:        %[[V5:[0-9a-zA-Z_\.]+]] = array.new{(%[[V4]])} : <1,#[[$M4]],5 x index>
// CHECK-NEXT:        %[[V6:[0-9a-zA-Z_\.]+]] = array.new{(%[[V4]])} : <#[[$M4]],5 x index>
// CHECK-NEXT:        array.insert %[[V5]]{{\[}}%[[V2]]] = %[[V6]] : <1,#[[$M4]],5 x index>, <#[[$M4]],5 x index>
// CHECK-NEXT:        %[[V7:[0-9a-zA-Z_\.]+]] = array.len %[[V5]], %[[V1]] : <1,#[[$M4]],5 x index>
// CHECK-NEXT:        struct.writef %[[V3]][@f] = %[[V7]] : <@Component05>, index
// CHECK-NEXT:      }
// CHECK-NEXT:      scf.for %[[V8:[0-9a-zA-Z_\.]+]] = %[[V2]] to %[[V0]] step %[[V1]] {
// CHECK-NEXT:        %[[V9:[0-9a-zA-Z_\.]+]] = array.new{(%[[V8]])} : <2,#[[$M4]],5 x index>
// CHECK-NEXT:        %[[V10:[0-9a-zA-Z_\.]+]] = array.new{(%[[V8]])} : <#[[$M4]],5 x index>
// CHECK-NEXT:        array.insert %[[V9]]{{\[}}%[[V2]]] = %[[V10]] : <2,#[[$M4]],5 x index>, <#[[$M4]],5 x index>
// CHECK-NEXT:        %[[V11:[0-9a-zA-Z_\.]+]] = array.len %[[V9]], %[[V1]] : <2,#[[$M4]],5 x index>
// CHECK-NEXT:        struct.writef %[[V3]][@f] = %[[V11]] : <@Component05>, index
// CHECK-NEXT:      }
// CHECK-NEXT:      function.return %[[V3]] : !struct.struct<@Component05>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V12:[0-9a-zA-Z_\.]+]]: !struct.struct<@Component05>, %[[V13:[0-9a-zA-Z_\.]+]]: index) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// -----

#M1 = affine_map<(i)[j]->(i+j)>
#M2 = affine_map<(i)->(i+2)>
#M3 = affine_map<()[i,j]->(i+j)>
!Ty1 = !array.array<#M1,#M2,#M3 x index>
!Ty2 = !array.array<#M2,#M3 x index>
module attributes {veridise.lang = "llzk"} {
  struct.def @Component05B {
    struct.field @f: index

    function.def @compute(%x: index) -> !struct.struct<@Component05B> {
      %self = struct.new : !struct.struct<@Component05B>
      %0 = arith.constant 0 : index
      %1 = arith.constant 1 : index
      %2 = arith.constant 2 : index
      %3 = arith.constant 3 : index
      scf.for %i = %0 to %2 step %1 {
        scf.for %j = %0 to %x step %1 {
          %arr = array.new{(%i)[%1],(%j),()[%2,%3]} : !Ty1 // !array.array<(i+1),(j+2),5 x index>
          %inner = array.new{(%j),()[%i,%j]} : !Ty2 // !array.array<(j+2),??? x index>
          array.insert %arr[%0] = %inner : !Ty1, !Ty2
          %len = array.len %arr, %1 : !Ty1 // len(dimension 1) == (j+2)
          struct.writef %self[@f] = %len : !struct.struct<@Component05B>, index
        }
      }
      function.return %self : !struct.struct<@Component05B>
    }

    function.def @constrain(%self: !struct.struct<@Component05B>, %x: index) {
      function.return
    }
  }
}
// CHECK: #[[$M5:[0-9a-zA-Z_\.]+]] = affine_map<(d0) -> (d0 + 2)>
// CHECK: #[[$M6:[0-9a-zA-Z_\.]+]] = affine_map<()[s0, s1] -> (s0 + s1)>
// CHECK-LABEL: struct.def @Component05B {
// CHECK-NEXT:    struct.field @f : index
// CHECK-NEXT:    function.def @compute(%[[V0:[0-9a-zA-Z_\.]+]]: index) -> !struct.struct<@Component05B> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
// CHECK-NEXT:      %[[V3:[0-9a-zA-Z_\.]+]] = struct.new : <@Component05B>
// CHECK-NEXT:      scf.for %[[V4:[0-9a-zA-Z_\.]+]] = %[[V2]] to %[[V0]] step %[[V1]] {
// CHECK-NEXT:        %[[V5:[0-9a-zA-Z_\.]+]] = array.new{(%[[V4]])} : <1,#[[$M5]],5 x index>
// CHECK-NEXT:        %[[V6:[0-9a-zA-Z_\.]+]] = array.new{(%[[V4]]), (){{\[}}%[[V2]], %[[V4]]]} : <#[[$M5]],#[[$M6]] x index>
// CHECK-NEXT:        array.insert %[[V5]]{{\[}}%[[V2]]] = %[[V6]] : <1,#[[$M5]],5 x index>, <#[[$M5]],#[[$M6]] x index>
// CHECK-NEXT:        %[[V7:[0-9a-zA-Z_\.]+]] = array.len %[[V5]], %[[V1]] : <1,#[[$M5]],5 x index>
// CHECK-NEXT:        struct.writef %[[V3]][@f] = %[[V7]] : <@Component05B>, index
// CHECK-NEXT:      }
// CHECK-NEXT:      scf.for %[[V8:[0-9a-zA-Z_\.]+]] = %[[V2]] to %[[V0]] step %[[V1]] {
// CHECK-NEXT:        %[[V9:[0-9a-zA-Z_\.]+]] = array.new{(%[[V8]])} : <2,#[[$M5]],5 x index>
// CHECK-NEXT:        %[[V10:[0-9a-zA-Z_\.]+]] = array.new{(%[[V8]]), (){{\[}}%[[V1]], %[[V8]]]} : <#[[$M5]],#[[$M6]] x index>
// CHECK-NEXT:        array.insert %[[V9]]{{\[}}%[[V2]]] = %[[V10]] : <2,#[[$M5]],5 x index>, <#[[$M5]],#[[$M6]] x index>
// CHECK-NEXT:        %[[V11:[0-9a-zA-Z_\.]+]] = array.len %[[V9]], %[[V1]] : <2,#[[$M5]],5 x index>
// CHECK-NEXT:        struct.writef %[[V3]][@f] = %[[V11]] : <@Component05B>, index
// CHECK-NEXT:      }
// CHECK-NEXT:      function.return %[[V3]] : !struct.struct<@Component05B>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V12:[0-9a-zA-Z_\.]+]]: !struct.struct<@Component05B>, %[[V13:[0-9a-zA-Z_\.]+]]: index) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// -----

// Test: Return instantiated affine array from function, requires update to caller.
#M1 = affine_map<(i)[k] -> (5*i+k)>
#M2 = affine_map<()[c] -> (c)>
#M3 = affine_map<(j) -> (j+2)>
!Ty = !array.array<#M1, #M2, #M3 x !felt.felt>
module attributes {veridise.lang = "llzk"} {
  function.def @test06() -> !Ty {
    %a = arith.constant 2 : index
    %b = arith.constant 4 : index
    %c = arith.constant 6 : index
    %d = arith.constant 1 : index
    %r = array.new { (%a)[%b], ()[%c], (%d) } : !Ty
    function.return %r: !Ty
  }

  struct.def @Main {
    struct.field @a: !Ty

    function.def @compute() -> !struct.struct<@Main> {
      %self = struct.new : !struct.struct<@Main>
      %temp = function.call @test06() : () -> !Ty
      struct.writef %self[@a] = %temp : !struct.struct<@Main>, !Ty
      function.return %self: !struct.struct<@Main>
    }

    function.def @constrain(%self: !struct.struct<@Main>) {
      function.return
    }
  }
}
// CHECK-LABEL: function.def @test06() -> !array.array<14,6,3 x !felt.felt> {
// CHECK-NEXT:    %[[V0:[0-9a-zA-Z_\.]+]] = array.new  : <14,6,3 x !felt.felt>
// CHECK-NEXT:    function.return %[[V0]] : !array.array<14,6,3 x !felt.felt>
// CHECK-NEXT:  }
//
// CHECK-LABEL: struct.def @Main {
// CHECK-NEXT:    struct.field @a : !array.array<14,6,3 x !felt.felt>
// CHECK-NEXT:    function.def @compute() -> !struct.struct<@Main> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V0:[0-9a-zA-Z_\.]+]] = struct.new : <@Main>
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = function.call @test06() : () -> !array.array<14,6,3 x !felt.felt>
// CHECK-NEXT:      struct.writef %[[V0]][@a] = %[[V1]] : <@Main>, !array.array<14,6,3 x !felt.felt>
// CHECK-NEXT:      function.return %[[V0]] : !struct.struct<@Main>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V2:[0-9a-zA-Z_\.]+]]: !struct.struct<@Main>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// -----

// Test: affine_map folding unsuccessful due to division by 0
!Ty = !array.array<affine_map<(i)->(i mod 0)> x index>
module attributes {veridise.lang = "llzk"} {
  struct.def @Component10 {
    struct.field @out: !Ty

    function.def @compute() -> !struct.struct<@Component10> {
      %self = struct.new : !struct.struct<@Component10>

      %1 = arith.constant 1 : index
      // expected-remark@+1 {{Cannot fold affine_map for array dimension 0 due to divide by 0 or modulus with negative divisor}}
      %arr = array.new {(%1)} : !Ty

      struct.writef %self[@out] = %arr : !struct.struct<@Component10>, !Ty
      function.return %self : !struct.struct<@Component10>
    }

    function.def @constrain(%self: !struct.struct<@Component10>) {
      function.return
    }
  }
}
// CHECK: #[[$M0:[0-9a-zA-Z_\.]+]] = affine_map<(d0) -> (d0 mod 0)>
// CHECK-LABEL: struct.def @Component10 {
// CHECK-NEXT:    struct.field @out : !array.array<#[[$M0]] x index>
// CHECK-NEXT:    function.def @compute() -> !struct.struct<@Component10> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V0:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = struct.new : <@Component10>
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = array.new{(%[[V0]])} : <#[[$M0]] x index>
// CHECK-NEXT:      struct.writef %[[V1]][@out] = %[[V2]] : <@Component10>, !array.array<#[[$M0]] x index>
// CHECK-NEXT:      function.return %[[V1]] : !struct.struct<@Component10>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V3:[0-9a-zA-Z_\.]+]]: !struct.struct<@Component10>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }

