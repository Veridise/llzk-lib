// RUN: llzk-opt -I %S -split-input-file -llzk-flatten -verify-diagnostics %s

#id = affine_map<(i)->(i)>
!ToFelt = !struct.struct<@ToFelt<[#id]>>
module attributes {veridise.lang = "llzk"} {
  struct.def @ToFelt<[@A]> {
    function.def @compute() -> !struct.struct<@ToFelt<[@A]>> {
      %self = struct.new : !struct.struct<@ToFelt<[@A]>>
      function.return %self: !struct.struct<@ToFelt<[@A]>>
    }

    function.def @constrain(%self: !struct.struct<@ToFelt<[@A]>>) { function.return }
  }

  struct.def @Component01<[@T]> {
    function.def @compute(%inp: !struct.struct<@ToFelt<[@T]>>) -> !struct.struct<@Component01<[@T]>> {
      %self = struct.new : !struct.struct<@Component01<[@T]>>
      function.return %self : !struct.struct<@Component01<[@T]>>
    }

    function.def @constrain(%self: !struct.struct<@Component01<[@T]>>, %inp: !struct.struct<@ToFelt<[@T]>>) { function.return }
  }

  struct.def @ComponentB {
    function.def @compute() -> !struct.struct<@ComponentB> {
      // In real code, this should be loop induction variable
      %n = arith.constant 2 : index
      %in = function.call @ToFelt::@compute(){(%n)} : () -> !ToFelt
      // ERROR: The input argument here produces a `@Component01<[@T]>` not `@Component01<[!ToFelt]>` which is an error.
      // expected-error@+1 {{result type mismatch: due to struct instantiation, expected type '!struct.struct<@Component01<[2]>>', but found '!struct.struct<@Component01<[!struct.struct<@ToFelt<[affine_map<(d0) -> (d0)>]>>]>>'}}
      %out = function.call @Component01::@compute(%in) : (!ToFelt) -> !struct.struct<@Component01<[!ToFelt]>>

      %self = struct.new : !struct.struct<@ComponentB>
      function.return %self : !struct.struct<@ComponentB>
    }

    function.def @constrain(%self: !struct.struct<@ComponentB>) { function.return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  struct.def @Component02<[@A,@B]> {
    // expected-error@+1 {{Cannot update type of 'struct.field' because there are multiple 'struct.writef' with different value types}}
    struct.field @f : !array.array<@A x !felt.felt> {llzk.pub}

    function.def @compute() -> !struct.struct<@Component02<[@A,@B]>> {
      %self = struct.new : !struct.struct<@Component02<[@A,@B]>>
      %0 = array.new : !array.array<@A x !felt.felt>
      // expected-note@+2 {{type written here is '!array.array<@A x !felt.felt>'}}
      // expected-note@+1 {{type written here is '!array.array<2 x !felt.felt>'}}
      struct.writef %self[@f] = %0 : !struct.struct<@Component02<[@A,@B]>>, !array.array<@A x !felt.felt>
      %n = arith.constant 5 : index
      %1 = array.new : !array.array<@B x !felt.felt>
      // expected-note@+2 {{type written here is '!array.array<@B x !felt.felt>'}}
      // expected-note@+1 {{type written here is '!array.array<3 x !felt.felt>'}}
      struct.writef %self[@f] = %1 : !struct.struct<@Component02<[@A,@B]>>, !array.array<@B x !felt.felt>
      function.return %self: !struct.struct<@Component02<[@A,@B]>>
    }

    function.def @constrain(%self: !struct.struct<@Component02<[@A,@B]>>) { function.return }
  }

  struct.def @Main {
    function.def @compute() -> !struct.struct<@Main> {
      function.call @Component02::@compute() : () -> !struct.struct<@Component02<[2,3]>>
      %self = struct.new : !struct.struct<@Main>
      function.return %self : !struct.struct<@Main>
    }
    function.def @constrain(%arg0: !struct.struct<@Main>) { function.return }
  }
}
