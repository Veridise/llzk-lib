// RUN: llzk-opt -split-input-file %s -llzk-flatten 2>&1 | FileCheck --enable-var-scope %s

module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentA1<[@T]> {
    struct.field @f1 : !poly.tvar<@T> {column}

    function.def @constrain(%self: !struct.type<@ComponentA1<[@T]>>) { function.return }
    function.def @compute() -> !struct.type<@ComponentA1<[@T]>> {
      %self = struct.new : !struct.type<@ComponentA1<[@T]>>
      function.return %self : !struct.type<@ComponentA1<[@T]>>
    }
  }

  struct.def @ComponentA2 {
    function.def @compute(%p: !struct.type<@ComponentA1<[!felt.felt]>>) -> !struct.type<@ComponentA2> {
      %self = struct.new : !struct.type<@ComponentA2>
      %r = struct.readf %p[@f1] : !struct.type<@ComponentA1<[!felt.felt]>>, !felt.felt {tableOffset = -1 : index}
      function.return %self : !struct.type<@ComponentA2>
    }

    function.def @constrain(%self: !struct.type<@ComponentA2>, %p: !struct.type<@ComponentA1<[!felt.felt]>>) {
      function.return
    }
  }
}
//CHECK-LABEL: struct.def @ComponentA1_f {
//CHECK-NEXT:    struct.field @f1 : !felt.felt {column}
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA1_f>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @compute() -> !struct.type<@ComponentA1_f> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA1_f>
//CHECK-NEXT:      function.return %[[SELF]] : !struct.type<@ComponentA1_f>
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: struct.def @ComponentA2 {
//CHECK-NEXT:    function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA1_f>) -> !struct.type<@ComponentA2> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA2>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = struct.readf %[[A0]][@f1] : <@ComponentA1_f>, !felt.felt {tableOffset = -1 : index}
//CHECK-NEXT:      function.return %[[SELF]] : !struct.type<@ComponentA2>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA2>, %[[A0:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA1_f>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }

// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentA1 {
    struct.field @f1 : !felt.felt {column}

    function.def @constrain(%self: !struct.type<@ComponentA1>) { function.return }
    function.def @compute() -> !struct.type<@ComponentA1> {
      %self = struct.new : !struct.type<@ComponentA1>
      function.return %self : !struct.type<@ComponentA1>
    }
  }

  struct.def @ComponentA2<[@N]> {
    function.def @compute(%p: !struct.type<@ComponentA1>) -> !struct.type<@ComponentA2<[@N]>> {
      %self = struct.new : !struct.type<@ComponentA2<[@N]>>
      %r = struct.readf %p[@f1] : !struct.type<@ComponentA1>, !felt.felt {tableOffset = @N}
      function.return %self : !struct.type<@ComponentA2<[@N]>>
    }

    function.def @constrain(%self: !struct.type<@ComponentA2<[@N]>>, %p: !struct.type<@ComponentA1>) {
      function.return
    }
  }

  struct.def @ComponentA3 {
    function.def @compute(%p: !struct.type<@ComponentA1>) -> !struct.type<@ComponentA3> {
      %self = struct.new : !struct.type<@ComponentA3>
      %c = function.call @ComponentA2::@compute(%p) : (!struct.type<@ComponentA1>) -> !struct.type<@ComponentA2<[-1]>>
      function.return %self : !struct.type<@ComponentA3>
    }

    function.def @constrain(%self: !struct.type<@ComponentA3>, %p: !struct.type<@ComponentA1>) {
      function.return
    }
  }
}
//CHECK-LABEL: struct.def @ComponentA1 {
//CHECK-NEXT:    struct.field @f1 : !felt.felt {column}
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA1>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @compute() -> !struct.type<@ComponentA1> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA1>
//CHECK-NEXT:      function.return %[[SELF]] : !struct.type<@ComponentA1>
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: struct.def @"ComponentA2_-1" {
//CHECK-NEXT:    function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA1>) -> !struct.type<@"ComponentA2_-1"> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@"ComponentA2_-1">
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = struct.readf %[[A0]][@f1] : <@ComponentA1>, !felt.felt {tableOffset = -1 : index}
//CHECK-NEXT:      function.return %[[SELF]] : !struct.type<@"ComponentA2_-1">
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.type<@"ComponentA2_-1">, %[[A0:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA1>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: struct.def @ComponentA3 {
//CHECK-NEXT:    function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA1>) -> !struct.type<@ComponentA3> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA3>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = function.call @"ComponentA2_-1"::@compute(%[[A0]]) : (!struct.type<@ComponentA1>) -> !struct.type<@"ComponentA2_-1">
//CHECK-NEXT:      function.return %[[SELF]] : !struct.type<@ComponentA3>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA3>, %[[A0:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA1>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }

// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentA1 {
    struct.field @f1 : !felt.felt {column}

    function.def @constrain(%self: !struct.type<@ComponentA1>) { function.return }
    function.def @compute() -> !struct.type<@ComponentA1> {
      %self = struct.new : !struct.type<@ComponentA1>
      function.return %self : !struct.type<@ComponentA1>
    }
  }

  struct.def @ComponentA2<[@N]> {
    function.def @compute(%p: !struct.type<@ComponentA1>) -> !struct.type<@ComponentA2<[@N]>> {
      %self = struct.new : !struct.type<@ComponentA2<[@N]>>
      %r = struct.readf %p[@f1] : !struct.type<@ComponentA1>, !felt.felt {tableOffset = @N}
      function.return %self : !struct.type<@ComponentA2<[@N]>>
    }

    function.def @constrain(%self: !struct.type<@ComponentA2<[@N]>>, %p: !struct.type<@ComponentA1>) {
      function.return
    }
  }

  struct.def @ComponentA3 {
    function.def @compute(%p: !struct.type<@ComponentA1>) -> !struct.type<@ComponentA3> {
      %self = struct.new : !struct.type<@ComponentA3>
      %c0 = arith.constant 2 : index
      %c = function.call @ComponentA2::@compute(%p) {()[%c0]} : (!struct.type<@ComponentA1>) -> !struct.type<@ComponentA2<[affine_map<()[s0] -> (s0 + 1)>]>>
      function.return %self : !struct.type<@ComponentA3>
    }

    function.def @constrain(%self: !struct.type<@ComponentA3>, %p: !struct.type<@ComponentA1>) {
      function.return
    }
  }
}
//CHECK-LABEL: struct.def @ComponentA1 {
//CHECK-NEXT:    struct.field @f1 : !felt.felt {column}
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA1>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @compute() -> !struct.type<@ComponentA1> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA1>
//CHECK-NEXT:      function.return %[[SELF]] : !struct.type<@ComponentA1>
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: struct.def @ComponentA2_3 {
//CHECK-NEXT:    function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA1>) -> !struct.type<@ComponentA2_3> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA2_3>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = struct.readf %[[A0]][@f1] : <@ComponentA1>, !felt.felt {tableOffset = 3 : index}
//CHECK-NEXT:      function.return %[[SELF]] : !struct.type<@ComponentA2_3>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA2_3>, %[[A0:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA1>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: struct.def @ComponentA3 {
//CHECK-NEXT:    function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA1>) -> !struct.type<@ComponentA3> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA3>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = function.call @ComponentA2_3::@compute(%[[A0]]) : (!struct.type<@ComponentA1>) -> !struct.type<@ComponentA2_3>
//CHECK-NEXT:      function.return %[[SELF]] : !struct.type<@ComponentA3>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA3>, %[[A0:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA1>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }

// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentA1<[@T]> {
    struct.field @f1 : !poly.tvar<@T> {column}

    function.def @constrain(%self: !struct.type<@ComponentA1<[@T]>>) { function.return }
    function.def @compute() -> !struct.type<@ComponentA1<[@T]>> {
      %self = struct.new : !struct.type<@ComponentA1<[@T]>>
      function.return %self : !struct.type<@ComponentA1<[@T]>>
    }
  }

  struct.def @ComponentA2<[@N, @T]> {
    function.def @compute(%p: !struct.type<@ComponentA1<[@T]>>) -> !struct.type<@ComponentA2<[@N, @T]>> {
      %self = struct.new : !struct.type<@ComponentA2<[@N, @T]>>
      %r = struct.readf %p[@f1] : !struct.type<@ComponentA1<[@T]>>, !poly.tvar<@T> {tableOffset = @N}
      function.return %self : !struct.type<@ComponentA2<[@N, @T]>>
    }

    function.def @constrain(%self: !struct.type<@ComponentA2<[@N, @T]>>, %p: !struct.type<@ComponentA1<[@T]>>) {
      function.return
    }
  }

  struct.def @ComponentA3 {
    function.def @compute(%p: !struct.type<@ComponentA1<[!felt.felt]>>) -> !struct.type<@ComponentA3> {
      %self = struct.new : !struct.type<@ComponentA3>
      %c = function.call @ComponentA2::@compute(%p) : (!struct.type<@ComponentA1<[!felt.felt]>>) -> !struct.type<@ComponentA2<[-1, !felt.felt]>>
      function.return %self : !struct.type<@ComponentA3>
    }

    function.def @constrain(%self: !struct.type<@ComponentA3>, %p: !struct.type<@ComponentA1<[!felt.felt]>>) {
      function.return
    }
  }
}
//CHECK-LABEL: struct.def @ComponentA1_f {
//CHECK-NEXT:    struct.field @f1 : !felt.felt {column}
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA1_f>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @compute() -> !struct.type<@ComponentA1_f> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA1_f>
//CHECK-NEXT:      function.return %[[SELF]] : !struct.type<@ComponentA1_f>
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: struct.def @"ComponentA2_-1_f" {
//CHECK-NEXT:    function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA1_f>) -> !struct.type<@"ComponentA2_-1_f"> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@"ComponentA2_-1_f">
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = struct.readf %[[A0]][@f1] : <@ComponentA1_f>, !felt.felt {tableOffset = -1 : index}
//CHECK-NEXT:      function.return %[[SELF]] : !struct.type<@"ComponentA2_-1_f">
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.type<@"ComponentA2_-1_f">, %[[A0:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA1_f>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: struct.def @ComponentA3 {
//CHECK-NEXT:    function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA1_f>) -> !struct.type<@ComponentA3> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA3>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = function.call @"ComponentA2_-1_f"::@compute(%[[A0]]) : (!struct.type<@ComponentA1_f>) -> !struct.type<@"ComponentA2_-1_f">
//CHECK-NEXT:      function.return %[[SELF]] : !struct.type<@ComponentA3>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA3>, %[[A0:[0-9a-zA-Z_\.]+]]: !struct.type<@ComponentA1_f>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
