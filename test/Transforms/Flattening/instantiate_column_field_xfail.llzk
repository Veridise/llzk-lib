// RUN: llzk-opt -split-input-file %s -llzk-flatten 2>&1 | FileCheck --enable-var-scope %s
// XFAIL: *
// COM: Should fail until LLZK-203 is completed.

module attributes {veridise.lang = "llzk"} {
  llzk.global @i : index = -1
  llzk.struct @ComponentA1 {
    llzk.field @f1 : !felt.felt {column}

    function.def @constrain(%self: !llzk.struct<@ComponentA1>) { function.return }
    function.def @compute() -> !llzk.struct<@ComponentA1> {
      %self = new_struct : !llzk.struct<@ComponentA1>
      function.return %self : !llzk.struct<@ComponentA1>
    }
  }

  llzk.struct @ComponentA2 {
    function.def @compute(%p: !llzk.struct<@ComponentA1>) -> !llzk.struct<@ComponentA2> {
      %self = new_struct : !llzk.struct<@ComponentA2>
      %r = readf %p[@f1] : !llzk.struct<@ComponentA1>, !felt.felt {tableOffset = @i}
      function.return %self : !llzk.struct<@ComponentA2>
    }

    function.def @constrain(%self: !llzk.struct<@ComponentA2>, %p: !llzk.struct<@ComponentA1>) {
      function.return
    }
  }

  llzk.struct @ComponentA3 {
    function.def @compute(%p: !llzk.struct<@ComponentA1>) -> !llzk.struct<@ComponentA3> {
      %self = new_struct : !llzk.struct<@ComponentA3>
      %c = function.call @ComponentA2::@compute(%p) : (!llzk.struct<@ComponentA1>) -> !llzk.struct<@ComponentA2>
      function.return %self : !llzk.struct<@ComponentA3>
    }

    function.def @constrain(%self: !llzk.struct<@ComponentA3>, %p: !llzk.struct<@ComponentA1>) {
      function.return
    }
  }
}
//CHECK-LABEL: llzk.struct @ComponentA1 {
//CHECK-NEXT:    field @f1 : !felt.felt {column}
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA1>) attributes {function.allow_constraints = #function.allow_constraints} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @compute() -> !llzk.struct<@ComponentA1> {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentA1>
//CHECK-NEXT:      function.return %[[SELF]] : !llzk.struct<@ComponentA1>
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: llzk.struct @ComponentA2 {
//CHECK-NEXT:    function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA1>) -> !llzk.struct<@ComponentA2> {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentA2>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = readf %[[A0]][@f1] : <@ComponentA1>, !felt.felt {tableOffset = -1 : index}
//CHECK-NEXT:      function.return %[[SELF]] : !llzk.struct<@ComponentA2>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA2>, %[[A0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA1>) attributes {function.allow_constraints = #function.allow_constraints} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: llzk.struct @ComponentA3 {
//CHECK-NEXT:    function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA1>) -> !llzk.struct<@ComponentA3> {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentA3>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = function.call @"ComponentA2_-1"::@compute(%[[A0]]) : (!llzk.struct<@ComponentA1>) -> !llzk.struct<@ComponentA2>
//CHECK-NEXT:      function.return %[[SELF]] : !llzk.struct<@ComponentA3>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA3>, %[[A0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA1>) attributes {function.allow_constraints = #function.allow_constraints} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }

// -----

module attributes {veridise.lang = "llzk"} {
  module @mod {
    llzk.global @i : index = -1
  }
  llzk.struct @ComponentA1 {
    llzk.field @f1 : !felt.felt {column}

    function.def @constrain(%self: !llzk.struct<@ComponentA1>) { function.return }
    function.def @compute() -> !llzk.struct<@ComponentA1> {
      %self = new_struct : !llzk.struct<@ComponentA1>
      function.return %self : !llzk.struct<@ComponentA1>
    }
  }

  llzk.struct @ComponentA2 {
    function.def @compute(%p: !llzk.struct<@ComponentA1>) -> !llzk.struct<@ComponentA2> {
      %self = new_struct : !llzk.struct<@ComponentA2>
      %r = readf %p[@f1] : !llzk.struct<@ComponentA1>, !felt.felt {tableOffset = @mod::@i}
      function.return %self : !llzk.struct<@ComponentA2>
    }

    function.def @constrain(%self: !llzk.struct<@ComponentA2>, %p: !llzk.struct<@ComponentA1>) {
      function.return
    }
  }

  llzk.struct @ComponentA3 {
    function.def @compute(%p: !llzk.struct<@ComponentA1>) -> !llzk.struct<@ComponentA3> {
      %self = new_struct : !llzk.struct<@ComponentA3>
      %c = function.call @ComponentA2::@compute(%p) : (!llzk.struct<@ComponentA1>) -> !llzk.struct<@ComponentA2>
      function.return %self : !llzk.struct<@ComponentA3>
    }

    function.def @constrain(%self: !llzk.struct<@ComponentA3>, %p: !llzk.struct<@ComponentA1>) {
      function.return
    }
  }
}
//CHECK-LABEL: llzk.struct @ComponentA1 {
//CHECK-NEXT:    field @f1 : !felt.felt {column}
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA1>) attributes {function.allow_constraints = #function.allow_constraints} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @compute() -> !llzk.struct<@ComponentA1> {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentA1>
//CHECK-NEXT:      function.return %[[SELF]] : !llzk.struct<@ComponentA1>
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: llzk.struct @ComponentA2 {
//CHECK-NEXT:    function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA1>) -> !llzk.struct<@ComponentA2> {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentA2>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = readf %[[A0]][@f1] : <@ComponentA1>, !felt.felt {tableOffset = -1 : index}
//CHECK-NEXT:      function.return %[[SELF]] : !llzk.struct<@ComponentA2>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA2>, %[[A0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA1>) attributes {function.allow_constraints = #function.allow_constraints} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: llzk.struct @ComponentA3 {
//CHECK-NEXT:    function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA1>) -> !llzk.struct<@ComponentA3> {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentA3>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = function.call @"ComponentA2_-1"::@compute(%[[A0]]) : (!llzk.struct<@ComponentA1>) -> !llzk.struct<@ComponentA2>
//CHECK-NEXT:      function.return %[[SELF]] : !llzk.struct<@ComponentA3>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA3>, %[[A0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA1>) attributes {function.allow_constraints = #function.allow_constraints} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }


