// RUN: llzk-opt -split-input-file -llzk-flatten %s | FileCheck --enable-var-scope %s

module attributes {veridise.lang = "llzk"} {
  struct.def @Pair<[@Fst, @Snd]> {
    function.def @compute() -> !struct.type<@Pair<[@Fst, @Snd]>> {
      %self = struct.new : !struct.type<@Pair<[@Fst, @Snd]>>
      function.return %self : !struct.type<@Pair<[@Fst, @Snd]>>
    }
    function.def @constrain(%arg0: !struct.type<@Pair<[@Fst, @Snd]>>) {
      function.return
    }
  }

  struct.def @Zip<[@Lhs, @Rhs, @N]> {
    struct.field @"$super" : !array.type<9 x !struct.type<@Pair<[!poly.tvar<@Lhs>, !poly.tvar<@Rhs>]>>>
    function.def @compute() -> !struct.type<@Zip<[@Lhs, @Rhs, @N]>> {
      %self = struct.new : !struct.type<@Zip<[@Lhs, @Rhs, @N]>>
      function.return %self : !struct.type<@Zip<[@Lhs, @Rhs, @N]>>
    }
    function.def @constrain(%arg0: !struct.type<@Zip<[@Lhs, @Rhs, @N]>>) {
      function.return
    }
  }

  struct.def @MakeGuess<[@PEGS]> {
    struct.field @"$temp" : !struct.type<@Zip<[!felt.type, !felt.type, @PEGS]>>

    function.def @compute() -> !struct.type<@MakeGuess<[@PEGS]>> {
      %self = struct.new : !struct.type<@MakeGuess<[@PEGS]>>
      function.return %self : !struct.type<@MakeGuess<[@PEGS]>>
    }

    function.def @constrain(%arg0: !struct.type<@MakeGuess<[@PEGS]>>) {
      %c1 = arith.constant 1 : index
      %c0 = arith.constant 0 : index
      %14 = struct.readf %arg0[@"$temp"] : !struct.type<@MakeGuess<[@PEGS]>>, !struct.type<@Zip<[!felt.type, !felt.type, @PEGS]>>
      %15 = struct.readf %14[@"$super"] : !struct.type<@Zip<[!felt.type, !felt.type, @PEGS]>>, !array.type<9 x !struct.type<@Pair<[!felt.type, !felt.type]>>>
      %17 = array.len %15, %c0 : !array.type<9 x !struct.type<@Pair<[!felt.type, !felt.type]>>>
      scf.for %arg5 = %c0 to %17 step %c1 {
        %34 = array.read %15[%arg5] : !array.type<9 x !struct.type<@Pair<[!felt.type, !felt.type]>>>, !struct.type<@Pair<[!felt.type, !felt.type]>>
      }
      function.return
    }
  }

  struct.def @Main<[]> {
    function.def @compute() -> !struct.type<@Main<[]>> {
      %self = struct.new : !struct.type<@Main<[]>>
      %26 = function.call @MakeGuess::@compute() : () -> !struct.type<@MakeGuess<[4]>>
      function.return %self : !struct.type<@Main<[]>>
    }
    function.def @constrain(%arg0: !struct.type<@Main<[]>>) {
      function.return
    }
  }
}

// CHECK-LABEL: struct.def @Pair_f_f {
// CHECK-NEXT:    function.def @compute() -> !struct.type<@Pair_f_f> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V0:[0-9a-zA-Z_\.]+]] = struct.new : <@Pair_f_f>
// CHECK-NEXT:      function.return %[[V0]] : !struct.type<@Pair_f_f>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V1:[0-9a-zA-Z_\.]+]]: !struct.type<@Pair_f_f>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
//
// CHECK-LABEL: struct.def @Zip_f_f_4 {
// CHECK-NEXT:    struct.field @"$super" : !array.type<9 x !struct.type<@Pair_f_f>>
// CHECK-NEXT:    function.def @compute() -> !struct.type<@Zip_f_f_4> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V0:[0-9a-zA-Z_\.]+]] = struct.new : <@Zip_f_f_4>
// CHECK-NEXT:      function.return %[[V0]] : !struct.type<@Zip_f_f_4>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V1:[0-9a-zA-Z_\.]+]]: !struct.type<@Zip_f_f_4>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
//
// CHECK-LABEL: struct.def @MakeGuess_4 {
// CHECK-NEXT:    struct.field @"$temp" : !struct.type<@Zip_f_f_4>
// CHECK-NEXT:    function.def @compute() -> !struct.type<@MakeGuess_4> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V0:[0-9a-zA-Z_\.]+]] = struct.new : <@MakeGuess_4>
// CHECK-NEXT:      function.return %[[V0]] : !struct.type<@MakeGuess_4>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V1:[0-9a-zA-Z_\.]+]]: !struct.type<@MakeGuess_4>) attributes {function.allow_constraint} {
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
// CHECK-NEXT:      %[[V3:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
// CHECK-NEXT:      %[[V4:[0-9a-zA-Z_\.]+]] = struct.readf %[[V1]][@"$temp"] : <@MakeGuess_4>, !struct.type<@Zip_f_f_4>
// CHECK-NEXT:      %[[V5:[0-9a-zA-Z_\.]+]] = struct.readf %[[V4]][@"$super"] : <@Zip_f_f_4>, !array.type<9 x !struct.type<@Pair_f_f>>
// CHECK-NEXT:      %[[V6:[0-9a-zA-Z_\.]+]] = array.len %[[V5]], %[[V3]] : <9 x !struct.type<@Pair_f_f>>
// CHECK-NEXT:      scf.for %[[V7:[0-9a-zA-Z_\.]+]] = %[[V3]] to %[[V6]] step %[[V2]] {
// CHECK-NEXT:        %[[V8:[0-9a-zA-Z_\.]+]] = array.read %[[V5]]{{\[}}%[[V7]]] : <9 x !struct.type<@Pair_f_f>>, !struct.type<@Pair_f_f>
// CHECK-NEXT:      }
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
//
// CHECK-LABEL: struct.def @Main {
// CHECK-NEXT:    function.def @compute() -> !struct.type<@Main> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V0:[0-9a-zA-Z_\.]+]] = struct.new : <@Main>
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = function.call @MakeGuess_4::@compute() : () -> !struct.type<@MakeGuess_4>
// CHECK-NEXT:      function.return %[[V0]] : !struct.type<@Main>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V2:[0-9a-zA-Z_\.]+]]: !struct.type<@Main>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
