// RUN: llzk-opt -split-input-file -verify-diagnostics --pass-pipeline='builtin.module(llzk-flatten{cleanup=preimage})' %s | FileCheck --enable-var-scope %s

module attributes {veridise.lang = "llzk"} {
  struct.def @Main<[]> {
    function.def @compute() -> !struct.type<@Main<[]>> {
      %self = struct.new : !struct.type<@Main<[]>>
      %26 = function.call @Impl::@MakeGuess::@compute() : () -> !struct.type<@Impl::@MakeGuess<[4]>>
      function.return %self : !struct.type<@Main<[]>>
    }
    function.def @constrain(%arg0: !struct.type<@Main<[]>>) {
      function.return
    }
  }

  module @Helper{
    struct.def @Pair<[@Fst, @Snd]> {
      function.def @compute() -> !struct.type<@Helper::@Pair<[@Fst, @Snd]>> {
        %self = struct.new : !struct.type<@Helper::@Pair<[@Fst, @Snd]>>
        function.return %self : !struct.type<@Helper::@Pair<[@Fst, @Snd]>>
      }
      function.def @constrain(%arg0: !struct.type<@Helper::@Pair<[@Fst, @Snd]>>) {
        function.return
      }
    }

    struct.def @Zip<[@Lhs, @Rhs, @N]> {
      struct.field @"$super" : !array.type<9 x !struct.type<@Helper::@Pair<[!poly.tvar<@Lhs>, !poly.tvar<@Rhs>]>>>
      function.def @compute() -> !struct.type<@Helper::@Zip<[@Lhs, @Rhs, @N]>> {
        %self = struct.new : !struct.type<@Helper::@Zip<[@Lhs, @Rhs, @N]>>
        function.return %self : !struct.type<@Helper::@Zip<[@Lhs, @Rhs, @N]>>
      }
      function.def @constrain(%arg0: !struct.type<@Helper::@Zip<[@Lhs, @Rhs, @N]>>) {
        function.return
      }
    }
  }

  module @Impl {
    struct.def @MakeGuess<[@PEGS]> {
      struct.field @"$temp" : !struct.type<@Helper::@Zip<[!felt.type, !felt.type, @PEGS]>>

      function.def @compute() -> !struct.type<@Impl::@MakeGuess<[@PEGS]>> {
        %self = struct.new : !struct.type<@Impl::@MakeGuess<[@PEGS]>>
        function.return %self : !struct.type<@Impl::@MakeGuess<[@PEGS]>>
      }

      function.def @constrain(%arg0: !struct.type<@Impl::@MakeGuess<[@PEGS]>>) {
        %c1 = arith.constant 1 : index
        %c0 = arith.constant 0 : index
        %14 = struct.readf %arg0[@"$temp"] : !struct.type<@Impl::@MakeGuess<[@PEGS]>>, !struct.type<@Helper::@Zip<[!felt.type, !felt.type, @PEGS]>>
        %15 = struct.readf %14[@"$super"] : !struct.type<@Helper::@Zip<[!felt.type, !felt.type, @PEGS]>>, !array.type<9 x !struct.type<@Helper::@Pair<[!felt.type, !felt.type]>>>
        %17 = array.len %15, %c0 : !array.type<9 x !struct.type<@Helper::@Pair<[!felt.type, !felt.type]>>>
        scf.for %arg5 = %c0 to %17 step %c1 {
          %34 = array.read %15[%arg5] : !array.type<9 x !struct.type<@Helper::@Pair<[!felt.type, !felt.type]>>>, !struct.type<@Helper::@Pair<[!felt.type, !felt.type]>>
        }
        function.return
      }
    }
  }
}
// CHECK:       struct.def @Main {
// CHECK-LABEL: module @Helper
// CHECK-NOT:   struct.def @Pair<[@Fst, @Snd]> {
// CHECK-NOT:   struct.def @Zip<[@Lhs, @Rhs, @N]> {
// CHECK:       struct.def @Pair_f_f {
// CHECK-NOT:   struct.def @Pair<[@Fst, @Snd]> {
// CHECK-NOT:   struct.def @Zip<[@Lhs, @Rhs, @N]> {
// CHECK:       struct.def @Zip_f_f_4 {
// CHECK-NOT:   struct.def @Pair<[@Fst, @Snd]> {
// CHECK-NOT:   struct.def @Zip<[@Lhs, @Rhs, @N]> {
// CHECK-LABEL: module @Impl
// CHECK-NOT:   struct.def @MakeGuess<[@PEGS]> {
// CHECK:       struct.def @MakeGuess_4 {
// CHECK-NOT:   struct.def @MakeGuess<[@PEGS]> {
