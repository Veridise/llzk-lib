// RUN: llzk-opt -I %S -split-input-file -llzk-full-poly-lowering -verify-diagnostics %s | FileCheck --enable-var-scope %s

module attributes {veridise.lang = "llzk"} {
  // lowers constraints to be at most degree 2 polynomials
  struct.def @CmpConstraint {
    function.def @compute(%a: !felt.type, %b: !felt.type) -> !struct.type<@CmpConstraint> {
      %self = struct.new : !struct.type<@CmpConstraint>
      function.return %self : !struct.type<@CmpConstraint>
    }

    function.def @constrain(%self: !struct.type<@CmpConstraint>, %a: !felt.type, %b: !felt.type) {
      %z = felt.mul %a, %b
      %0 = felt.mul %z, %z
      %1 = felt.mul %z, %a
      constrain.eq %0, %z : !felt.type
      constrain.eq %0, %1 : !felt.type

      function.return
    }
  }
}

// CHECK-LABEL:   struct.def @CmpConstraint {
// CHECK:           function.def @compute(%[[VAL_0:.*]]: !felt.type, %[[VAL_1:.*]]: !felt.type) -> !struct.type<@CmpConstraint> attributes {function.allow_witness} {
// CHECK:             %[[VAL_2:.*]] = struct.new : <@CmpConstraint>
// CHECK:             %[[VAL_3:.*]] = felt.mul %[[VAL_0]], %[[VAL_1]] : !felt.type, !felt.type
// CHECK:             struct.writef %[[VAL_2]][@__llzk_aux_field_0] = %[[VAL_3]] : <@CmpConstraint>, !felt.type
// CHECK:             function.return %[[VAL_2]] : !struct.type<@CmpConstraint>
// CHECK:           }
// CHECK:           function.def @constrain(%[[VAL_4:.*]]: !struct.type<@CmpConstraint>, %[[VAL_5:.*]]: !felt.type, %[[VAL_6:.*]]: !felt.type) attributes {function.allow_constraint} {
// CHECK:             %[[VAL_7:.*]] = felt.mul %[[VAL_5]], %[[VAL_6]] : !felt.type, !felt.type
// CHECK:             %[[VAL_8:.*]] = struct.readf %[[VAL_4]][@__llzk_aux_field_0] : <@CmpConstraint>, !felt.type
// CHECK:             constrain.eq %[[VAL_8]], %[[VAL_7]] : !felt.type, !felt.type
// CHECK:             %[[VAL_9:.*]] = felt.mul %[[VAL_8]], %[[VAL_8]] : !felt.type, !felt.type
// CHECK:             %[[VAL_10:.*]] = felt.mul %[[VAL_8]], %[[VAL_5]] : !felt.type, !felt.type
// CHECK:             constrain.eq %[[VAL_9]], %[[VAL_8]] : !felt.type, !felt.type
// CHECK:             constrain.eq %[[VAL_9]], %[[VAL_10]] : !felt.type, !felt.type
// CHECK:             function.return
// CHECK:           }
// CHECK:           struct.field @__llzk_aux_field_0 : !felt.type
// CHECK:         }
// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @Mod2 {
    function.def @compute(%a: !felt.type, %b: !felt.type) -> !struct.type<@Mod2> {
      %self = struct.new : !struct.type<@Mod2>
      function.return %self : !struct.type<@Mod2>
    }

    function.def @constrain(%self: !struct.type<@Mod2>, %a: !felt.type, %b: !felt.type) {
      %z = felt.mul %a, %b
      %0 = felt.mul %z, %z
      %1 = felt.mul %z, %a
      constrain.eq %0, %z : !felt.type
      constrain.eq %0, %1 : !felt.type

      function.return
    }
  }

  // tests that polynomials are lowered to degree 1 before being passed into constraint calls
  struct.def @Mod1 {
    struct.field @mod2: !struct.type<@Mod2>
    function.def @compute(%a: !felt.type, %b: !felt.type) -> !struct.type<@Mod1> {
      %self = struct.new : !struct.type<@Mod1>
      function.return %self : !struct.type<@Mod1>
    }

    function.def @constrain(%self: !struct.type<@Mod1>, %a: !felt.type, %b: !felt.type) {
      %z = felt.mul %a, %b
      %0 = felt.mul %z, %z
      %1 = felt.mul %z, %a
      %2 = struct.readf %self[@mod2] : !struct.type<@Mod1>, !struct.type<@Mod2>
      function.call @Mod2::@constrain(%2, %0, %1) : (!struct.type<@Mod2>, !felt.type, !felt.type) -> ()
      function.return
    }
  }
}


// CHECK-LABEL:   struct.def @Mod2 {
// CHECK:           function.def @compute(%[[VAL_0:.*]]: !felt.type, %[[VAL_1:.*]]: !felt.type) -> !struct.type<@Mod2> attributes {function.allow_witness} {
// CHECK:             %[[VAL_2:.*]] = struct.new : <@Mod2>
// CHECK:             %[[VAL_3:.*]] = felt.mul %[[VAL_0]], %[[VAL_1]] : !felt.type, !felt.type
// CHECK:             struct.writef %[[VAL_2]][@__llzk_aux_field_0] = %[[VAL_3]] : <@Mod2>, !felt.type
// CHECK:             function.return %[[VAL_2]] : !struct.type<@Mod2>
// CHECK:           }
// CHECK:           function.def @constrain(%[[VAL_4:.*]]: !struct.type<@Mod2>, %[[VAL_5:.*]]: !felt.type, %[[VAL_6:.*]]: !felt.type) attributes {function.allow_constraint} {
// CHECK:             %[[VAL_7:.*]] = felt.mul %[[VAL_5]], %[[VAL_6]] : !felt.type, !felt.type
// CHECK:             %[[VAL_8:.*]] = struct.readf %[[VAL_4]][@__llzk_aux_field_0] : <@Mod2>, !felt.type
// CHECK:             constrain.eq %[[VAL_8]], %[[VAL_7]] : !felt.type, !felt.type
// CHECK:             %[[VAL_9:.*]] = felt.mul %[[VAL_8]], %[[VAL_8]] : !felt.type, !felt.type
// CHECK:             %[[VAL_10:.*]] = felt.mul %[[VAL_8]], %[[VAL_5]] : !felt.type, !felt.type
// CHECK:             constrain.eq %[[VAL_9]], %[[VAL_8]] : !felt.type, !felt.type
// CHECK:             constrain.eq %[[VAL_9]], %[[VAL_10]] : !felt.type, !felt.type
// CHECK:             function.return
// CHECK:           }
// CHECK:           struct.field @__llzk_aux_field_0 : !felt.type
// CHECK:         }

// CHECK-LABEL:   struct.def @Mod1 {
// CHECK:           struct.field @mod2 : !struct.type<@Mod2>
// CHECK:           function.def @compute(%[[VAL_0:.*]]: !felt.type, %[[VAL_1:.*]]: !felt.type) -> !struct.type<@Mod1> attributes {function.allow_witness} {
// CHECK:             %[[VAL_2:.*]] = struct.new : <@Mod1>
// CHECK:             %[[VAL_3:.*]] = felt.mul %[[VAL_0]], %[[VAL_1]] : !felt.type, !felt.type
// CHECK:             struct.writef %[[VAL_2]][@__llzk_aux_field_1] = %[[VAL_3]] : <@Mod1>, !felt.type
// CHECK:             function.return %[[VAL_2]] : !struct.type<@Mod1>
// CHECK:           }
// CHECK:           function.def @constrain(%[[VAL_4:.*]]: !struct.type<@Mod1>, %[[VAL_5:.*]]: !felt.type, %[[VAL_6:.*]]: !felt.type) attributes {function.allow_constraint} {
// CHECK:             %[[VAL_7:.*]] = felt.mul %[[VAL_5]], %[[VAL_6]] : !felt.type, !felt.type
// CHECK:             %[[VAL_8:.*]] = struct.readf %[[VAL_4]][@__llzk_aux_field_1] : <@Mod1>, !felt.type
// CHECK:             constrain.eq %[[VAL_8]], %[[VAL_7]] : !felt.type, !felt.type
// CHECK:             %[[VAL_9:.*]] = felt.mul %[[VAL_8]], %[[VAL_8]] : !felt.type, !felt.type
// CHECK:             %[[VAL_10:.*]] = felt.mul %[[VAL_8]], %[[VAL_5]] : !felt.type, !felt.type
// CHECK:             %[[VAL_11:.*]] = struct.readf %[[VAL_4]][@mod2] : <@Mod1>, !struct.type<@Mod2>
// CHECK:             function.call @Mod2::@constrain(%[[VAL_11]], %[[VAL_9]], %[[VAL_10]]) : (!struct.type<@Mod2>, !felt.type, !felt.type) -> ()
// CHECK:             function.return
// CHECK:           }
// CHECK:           struct.field @__llzk_aux_field_1 : !felt.type
// CHECK:         }
// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @Mod2 {
    struct.field @val: !felt.type
    function.def @compute(%a: !felt.type, %b: !felt.type) -> !struct.type<@Mod2> {
      %self = struct.new : !struct.type<@Mod2>
      struct.writef %self[@val] = %a : !struct.type<@Mod2>, !felt.type
      function.return %self : !struct.type<@Mod2>
    }

    function.def @constrain(%self: !struct.type<@Mod2>, %a: !felt.type, %b: !felt.type) {
      %z = felt.mul %a, %b
      %0 = felt.mul %z, %z
      %1 = felt.mul %z, %a
      constrain.eq %0, %z : !felt.type
      constrain.eq %0, %1 : !felt.type

      function.return
    }
  }

  // tests that polynomials are lowered to degree 1 before being passed into constraint calls
  struct.def @Mod1 {
    struct.field @mod2: !struct.type<@Mod2>
    struct.field @val: !felt.type
    function.def @compute(%a: !felt.type, %b: !felt.type) -> !struct.type<@Mod1> {
      %self = struct.new : !struct.type<@Mod1>
      function.return %self : !struct.type<@Mod1>
    }

    function.def @constrain(%self: !struct.type<@Mod1>, %a: !felt.type, %b: !felt.type) {
      %z = felt.mul %a, %b
      %0 = felt.mul %z, %z
      %1 = felt.mul %z, %a
      %2 = struct.readf %self[@mod2] : !struct.type<@Mod1>, !struct.type<@Mod2>
      function.call @Mod2::@constrain(%2, %0, %1) : (!struct.type<@Mod2>, !felt.type, !felt.type) -> ()
      %3 = struct.readf %self[@mod2] : !struct.type<@Mod1>, !struct.type<@Mod2>
      %4 = struct.readf %3[@val]: !struct.type<@Mod2>, !felt.type
      %5 = felt.mul %4, %4
      %6 = felt.mul %5, %5
      %7 = struct.readf %self[@val] : !struct.type<@Mod1>, !felt.type
      constrain.eq %7, %6 : !felt.type
      function.return
    }
  }
}


// CHECK-LABEL:   struct.def @Mod2 {
// CHECK:           struct.field @val : !felt.type
// CHECK:           function.def @compute(%[[VAL_0:.*]]: !felt.type, %[[VAL_1:.*]]: !felt.type) -> !struct.type<@Mod2> attributes {function.allow_witness} {
// CHECK:             %[[VAL_2:.*]] = struct.new : <@Mod2>
// CHECK:             struct.writef %[[VAL_2]][@val] = %[[VAL_0]] : <@Mod2>, !felt.type
// CHECK:             %[[VAL_3:.*]] = felt.mul %[[VAL_0]], %[[VAL_1]] : !felt.type, !felt.type
// CHECK:             struct.writef %[[VAL_2]][@__llzk_aux_field_0] = %[[VAL_3]] : <@Mod2>, !felt.type
// CHECK:             function.return %[[VAL_2]] : !struct.type<@Mod2>
// CHECK:           }
// CHECK:           function.def @constrain(%[[VAL_4:.*]]: !struct.type<@Mod2>, %[[VAL_5:.*]]: !felt.type, %[[VAL_6:.*]]: !felt.type) attributes {function.allow_constraint} {
// CHECK:             %[[VAL_7:.*]] = felt.mul %[[VAL_5]], %[[VAL_6]] : !felt.type, !felt.type
// CHECK:             %[[VAL_8:.*]] = struct.readf %[[VAL_4]][@__llzk_aux_field_0] : <@Mod2>, !felt.type
// CHECK:             constrain.eq %[[VAL_8]], %[[VAL_7]] : !felt.type, !felt.type
// CHECK:             %[[VAL_9:.*]] = felt.mul %[[VAL_8]], %[[VAL_8]] : !felt.type, !felt.type
// CHECK:             %[[VAL_10:.*]] = felt.mul %[[VAL_8]], %[[VAL_5]] : !felt.type, !felt.type
// CHECK:             constrain.eq %[[VAL_9]], %[[VAL_8]] : !felt.type, !felt.type
// CHECK:             constrain.eq %[[VAL_9]], %[[VAL_10]] : !felt.type, !felt.type
// CHECK:             function.return
// CHECK:           }
// CHECK:           struct.field @__llzk_aux_field_0 : !felt.type
// CHECK:         }

// CHECK-LABEL:   struct.def @Mod1 {
// CHECK:           struct.field @mod2 : !struct.type<@Mod2>
// CHECK:           struct.field @val : !felt.type
// CHECK:           function.def @compute(%[[VAL_0:.*]]: !felt.type, %[[VAL_1:.*]]: !felt.type) -> !struct.type<@Mod1> attributes {function.allow_witness} {
// CHECK:             %[[VAL_2:.*]] = struct.new : <@Mod1>
// CHECK:             %[[VAL_3:.*]] = struct.readf %[[VAL_2]][@val] : <@Mod1>, !felt.type
// CHECK:             %[[VAL_4:.*]] = felt.mul %[[VAL_3]], %[[VAL_3]] : !felt.type, !felt.type
// CHECK:             struct.writef %[[VAL_2]][@__llzk_aux_field_1] = %[[VAL_4]] : <@Mod1>, !felt.type
// CHECK:             %[[VAL_5:.*]] = felt.mul %[[VAL_0]], %[[VAL_1]] : !felt.type, !felt.type
// CHECK:             struct.writef %[[VAL_2]][@__llzk_aux_field_2] = %[[VAL_5]] : <@Mod1>, !felt.type
// CHECK:             function.return %[[VAL_2]] : !struct.type<@Mod1>
// CHECK:           }
// CHECK:           function.def @constrain(%[[VAL_6:.*]]: !struct.type<@Mod1>, %[[VAL_7:.*]]: !felt.type, %[[VAL_8:.*]]: !felt.type) attributes {function.allow_constraint} {
// CHECK:             %[[VAL_9:.*]] = felt.mul %[[VAL_7]], %[[VAL_8]] : !felt.type, !felt.type
// CHECK:             %[[VAL_10:.*]] = struct.readf %[[VAL_6]][@__llzk_aux_field_2] : <@Mod1>, !felt.type
// CHECK:             constrain.eq %[[VAL_10]], %[[VAL_9]] : !felt.type, !felt.type
// CHECK:             %[[VAL_11:.*]] = felt.mul %[[VAL_10]], %[[VAL_10]] : !felt.type, !felt.type
// CHECK:             %[[VAL_12:.*]] = felt.mul %[[VAL_10]], %[[VAL_7]] : !felt.type, !felt.type
// CHECK:             %[[VAL_13:.*]] = struct.readf %[[VAL_6]][@mod2] : <@Mod1>, !struct.type<@Mod2>
// CHECK:             function.call @Mod2::@constrain(%[[VAL_13]], %[[VAL_11]], %[[VAL_12]]) : (!struct.type<@Mod2>, !felt.type, !felt.type) -> ()
// CHECK:             %[[VAL_14:.*]] = struct.readf %[[VAL_13]][@val] : <@Mod2>, !felt.type
// CHECK:             %[[VAL_15:.*]] = felt.mul %[[VAL_14]], %[[VAL_14]] : !felt.type, !felt.type
// CHECK:             %[[VAL_16:.*]] = struct.readf %[[VAL_6]][@__llzk_aux_field_1] : <@Mod1>, !felt.type
// CHECK:             constrain.eq %[[VAL_16]], %[[VAL_15]] : !felt.type, !felt.type
// CHECK:             %[[VAL_17:.*]] = felt.mul %[[VAL_16]], %[[VAL_16]] : !felt.type, !felt.type
// CHECK:             %[[VAL_18:.*]] = struct.readf %[[VAL_6]][@val] : <@Mod1>, !felt.type
// CHECK:             constrain.eq %[[VAL_18]], %[[VAL_17]] : !felt.type, !felt.type
// CHECK:             function.return
// CHECK:           }
// CHECK:           struct.field @__llzk_aux_field_1 : !felt.type
// CHECK:           struct.field @__llzk_aux_field_2 : !felt.type
// CHECK:         }