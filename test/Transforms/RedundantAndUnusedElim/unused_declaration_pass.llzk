// RUN: llzk-opt -split-input-file -llzk-duplicate-read-write-elim -llzk-duplicate-op-elim -llzk-unused-declaration-elim="remove-structs" %s 2>&1 | FileCheck %s --check-prefix STRICT
// RUN: llzk-opt -split-input-file -llzk-duplicate-read-write-elim -llzk-duplicate-op-elim -llzk-unused-declaration-elim %s 2>&1 | FileCheck %s --check-prefix RELAX

module attributes {veridise.lang = "llzk"} {
  struct.def @Component {
    struct.field @matrix : !array.type<7,3 x !felt.type>

    function.def @compute(%inputArr : !array.type<3 x !felt.type>) -> !struct.type<@Component> {
      %self = struct.new : !struct.type<@Component>
      function.return %self : !struct.type<@Component>
    }
    function.def @constrain(%self: !struct.type<@Component>, %inputArr : !array.type<3 x !felt.type>) {
      function.return
    }
  }
}

// STRICT-LABEL: module attributes {veridise.lang = "llzk"} {
// STRICT-NEXT: }

// RELAX-LABEL: struct.def @Component {
// RELAX-NEXT:    function.def @compute(%[[VAL_0:.*]]: !array.type<3 x !felt.type>) -> !struct.type<@Component> attributes {function.allow_witness} {
// RELAX-NEXT:      %[[VAL_1:.*]] = struct.new : <@Component>
// RELAX-NEXT:      function.return %[[VAL_1]] : !struct.type<@Component>
// RELAX-NEXT:    }
// RELAX-NEXT:    function.def @constrain(%[[VAL_2:.*]]: !struct.type<@Component>, %[[VAL_3:.*]]: !array.type<3 x !felt.type>) attributes {function.allow_constraint} {
// RELAX-NEXT:      function.return
// RELAX-NEXT:    }
// RELAX-NEXT:  }

// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @A {
    function.def @compute() -> !struct.type<@A> {
      %self = struct.new : !struct.type<@A>
      function.return %self : !struct.type<@A>
    }
    function.def @constrain(%self : !struct.type<@A>) {
      function.return
    }
  }

  struct.def @B {
    struct.field @a : !struct.type<@A>
    function.def @compute() -> !struct.type<@B> {
      %self = struct.new : !struct.type<@B>
      function.return %self : !struct.type<@B>
    }
    function.def @constrain(%self : !struct.type<@B>) {
      %a = struct.readf %self[@a] : !struct.type<@B>, !struct.type<@A>
      function.call @A::@constrain(%a) : (!struct.type<@A>) -> ()
      function.return
    }
  }

  struct.def @C {
    struct.field @b : !struct.type<@B>
    function.def @compute() -> !struct.type<@C> {
      %self = struct.new : !struct.type<@C>
      function.return %self : !struct.type<@C>
    }
    function.def @constrain(%self : !struct.type<@C>) {
      %b = struct.readf %self[@b] : !struct.type<@C>, !struct.type<@B>
      function.call @B::@constrain(%b) : (!struct.type<@B>) -> ()
      function.return
    }
  }

  struct.def @Main {
    struct.field @c : !struct.type<@C> {llzk.pub}
    function.def @compute() -> !struct.type<@Main> {
      %self = struct.new : !struct.type<@Main>
      function.return %self : !struct.type<@Main>
    }
    function.def @constrain(%self : !struct.type<@Main>) {
      %c = struct.readf %self[@c] : !struct.type<@Main>, !struct.type<@C>
      function.call @C::@constrain(%c) : (!struct.type<@C>) -> ()
      function.return
    }
  }
}

// STRICT-LABEL: struct.def @C {
// STRICT-NEXT:    function.def @compute() -> !struct.type<@C> attributes {function.allow_witness} {
// STRICT-NEXT:      %[[VAL_0:.*]] = struct.new : <@C>
// STRICT-NEXT:      function.return %[[VAL_0]] : !struct.type<@C>
// STRICT-NEXT:    }
// STRICT-NEXT:    function.def @constrain(%[[VAL_1:.*]]: !struct.type<@C>) attributes {function.allow_constraint} {
// STRICT-NEXT:      function.return
// STRICT-NEXT:    }
// STRICT-NEXT:  }

// STRICT-LABEL: struct.def @Main {
// STRICT-NEXT:    struct.field @c : !struct.type<@C> {llzk.pub}
// STRICT-NEXT:    function.def @compute() -> !struct.type<@Main> attributes {function.allow_witness} {
// STRICT-NEXT:      %[[VAL_0:.*]] = struct.new : <@Main>
// STRICT-NEXT:      function.return %[[VAL_0]] : !struct.type<@Main>
// STRICT-NEXT:    }
// STRICT-NEXT:    function.def @constrain(%[[VAL_1:.*]]: !struct.type<@Main>) attributes {function.allow_constraint} {
// STRICT-NEXT:      function.return
// STRICT-NEXT:    }
// STRICT-NEXT:  }

// RELAX-LABEL: struct.def @A {
// RELAX-NEXT:    function.def @compute() -> !struct.type<@A> attributes {function.allow_witness} {
// RELAX-NEXT:      %[[VAL_0:.*]] = struct.new : <@A>
// RELAX-NEXT:      function.return %[[VAL_0]] : !struct.type<@A>
// RELAX-NEXT:    }
// RELAX-NEXT:    function.def @constrain(%[[VAL_1:.*]]: !struct.type<@A>) attributes {function.allow_constraint} {
// RELAX-NEXT:      function.return
// RELAX-NEXT:    }
// RELAX-NEXT:  }

// RELAX-LABEL: struct.def @B {
// RELAX-NEXT:    function.def @compute() -> !struct.type<@B> attributes {function.allow_witness} {
// RELAX-NEXT:      %[[VAL_0:.*]] = struct.new : <@B>
// RELAX-NEXT:      function.return %[[VAL_0]] : !struct.type<@B>
// RELAX-NEXT:    }
// RELAX-NEXT:    function.def @constrain(%[[VAL_1:.*]]: !struct.type<@B>) attributes {function.allow_constraint} {
// RELAX-NEXT:      function.return
// RELAX-NEXT:    }
// RELAX-NEXT:  }

// RELAX-LABEL: struct.def @C {
// RELAX-NEXT:    function.def @compute() -> !struct.type<@C> attributes {function.allow_witness} {
// RELAX-NEXT:      %[[VAL_0:.*]] = struct.new : <@C>
// RELAX-NEXT:      function.return %[[VAL_0]] : !struct.type<@C>
// RELAX-NEXT:    }
// RELAX-NEXT:    function.def @constrain(%[[VAL_1:.*]]: !struct.type<@C>) attributes {function.allow_constraint} {
// RELAX-NEXT:      function.return
// RELAX-NEXT:    }
// RELAX-NEXT:  }

// RELAX-LABEL: struct.def @Main {
// RELAX-NEXT:    struct.field @c : !struct.type<@C> {llzk.pub}
// RELAX-NEXT:    function.def @compute() -> !struct.type<@Main> attributes {function.allow_witness} {
// RELAX-NEXT:      %[[VAL_0:.*]] = struct.new : <@Main>
// RELAX-NEXT:      function.return %[[VAL_0]] : !struct.type<@Main>
// RELAX-NEXT:    }
// RELAX-NEXT:    function.def @constrain(%[[VAL_1:.*]]: !struct.type<@Main>) attributes {function.allow_constraint} {
// RELAX-NEXT:      function.return
// RELAX-NEXT:    }
// RELAX-NEXT:  }

// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @VarArray<[@N, @T]> {
    struct.field @val: !array.type<@N x !poly.tvar<@T>>

    function.def @compute(%inp: !array.type<@N x !poly.tvar<@T>>) -> !struct.type<@VarArray<[@N, @T]>> {
      %self = struct.new : !struct.type<@VarArray<[@N, @T]>>
      struct.writef %self[@val] = %inp : !struct.type<@VarArray<[@N, @T]>>, !array.type<@N x !poly.tvar<@T>>
      function.return %self : !struct.type<@VarArray<[@N, @T]>>
    }

    function.def @constrain(%self: !struct.type<@VarArray<[@N, @T]>>, %inp: !array.type<@N x !poly.tvar<@T>>) {
      function.return
    }
  }

  struct.def @Main {
    struct.field @a : !struct.type<@VarArray<[2, !felt.type]>> // unused, should be removed
    struct.field @b : !struct.type<@VarArray<[7, index]>> // unused, should be removed
    struct.field @c : !struct.type<@VarArray<[2, !felt.type]>> {llzk.pub} // unused, shouldn't be removed since it's an output
    function.def @compute() -> !struct.type<@Main> {
      %self = struct.new : !struct.type<@Main>
      function.return %self : !struct.type<@Main>
    }
    function.def @constrain(%self : !struct.type<@Main>) {
      function.return
    }
  }
}

// STRICT-LABEL: struct.def @VarArray<[@N, @T]> {
// STRICT-NEXT:    function.def @compute(%[[VAL_0:.*]]: !array.type<@N x !poly.tvar<@T>>) -> !struct.type<@VarArray<[@N, @T]>> attributes {function.allow_witness} {
// STRICT-NEXT:      %[[VAL_1:.*]] = struct.new : <@VarArray<[@N, @T]>>
// STRICT-NEXT:      function.return %[[VAL_1]] : !struct.type<@VarArray<[@N, @T]>>
// STRICT-NEXT:    }
// STRICT-NEXT:    function.def @constrain(%[[VAL_2:.*]]: !struct.type<@VarArray<[@N, @T]>>, %[[VAL_3:.*]]: !array.type<@N x !poly.tvar<@T>>) attributes {function.allow_constraint} {
// STRICT-NEXT:      function.return
// STRICT-NEXT:    }
// STRICT-NEXT:  }

// STRICT-LABEL: struct.def @Main {
// STRICT-NEXT:    struct.field @c : !struct.type<@VarArray<[2, !felt.type]>> {llzk.pub}
// STRICT-NEXT:    function.def @compute() -> !struct.type<@Main> attributes {function.allow_witness} {
// STRICT-NEXT:      %[[VAL_0:.*]] = struct.new : <@Main>
// STRICT-NEXT:      function.return %[[VAL_0]] : !struct.type<@Main>
// STRICT-NEXT:    }
// STRICT-NEXT:    function.def @constrain(%[[VAL_1:.*]]: !struct.type<@Main>) attributes {function.allow_constraint} {
// STRICT-NEXT:      function.return
// STRICT-NEXT:    }
// STRICT-NEXT:  }

// RELAX-LABEL: struct.def @VarArray<[@N, @T]> {
// RELAX-NEXT:    function.def @compute(%[[VAL_0:.*]]: !array.type<@N x !poly.tvar<@T>>) -> !struct.type<@VarArray<[@N, @T]>> attributes {function.allow_witness} {
// RELAX-NEXT:      %[[VAL_1:.*]] = struct.new : <@VarArray<[@N, @T]>>
// RELAX-NEXT:      function.return %[[VAL_1]] : !struct.type<@VarArray<[@N, @T]>>
// RELAX-NEXT:    }
// RELAX-NEXT:    function.def @constrain(%[[VAL_2:.*]]: !struct.type<@VarArray<[@N, @T]>>, %[[VAL_3:.*]]: !array.type<@N x !poly.tvar<@T>>) attributes {function.allow_constraint} {
// RELAX-NEXT:      function.return
// RELAX-NEXT:    }
// RELAX-NEXT:  }

// RELAX-LABEL: struct.def @Main {
// RELAX-NEXT:    struct.field @c : !struct.type<@VarArray<[2, !felt.type]>> {llzk.pub}
// RELAX-NEXT:    function.def @compute() -> !struct.type<@Main> attributes {function.allow_witness} {
// RELAX-NEXT:      %[[VAL_0:.*]] = struct.new : <@Main>
// RELAX-NEXT:      function.return %[[VAL_0]] : !struct.type<@Main>
// RELAX-NEXT:    }
// RELAX-NEXT:    function.def @constrain(%[[VAL_1:.*]]: !struct.type<@Main>) attributes {function.allow_constraint} {
// RELAX-NEXT:      function.return
// RELAX-NEXT:    }
// RELAX-NEXT:  }

// -----

module attributes {veridise.lang = "llzk"} {

  module @std {
    struct.def @Wrapper<[@T]> {
      struct.field @val: !poly.tvar<@T>

      function.def @compute(%inp: !poly.tvar<@T>) -> !struct.type<@std::@Wrapper<[@T]> > {
        %self = struct.new : !struct.type<@std::@Wrapper<[@T]> >
        struct.writef %self[@val] = %inp : !struct.type<@std::@Wrapper<[@T]>>, !poly.tvar<@T>
        function.return %self : !struct.type<@std::@Wrapper<[@T]>>
      }

      function.def @constrain(%self: !struct.type<@std::@Wrapper<[@T]>>, %inp: !poly.tvar<@T>) {
        %val = struct.readf %self[@val] : !struct.type<@std::@Wrapper<[@T]>>, !poly.tvar<@T>
        constrain.eq %val, %inp : !poly.tvar<@T>
        function.return
      }
    }
  }

  struct.def @VarArray<[@N, @T]> {
    struct.field @valUnused: !array.type<@N x !struct.type<@std::@Wrapper<[@T]>>>
    struct.field @valUsed: !array.type<@N x !struct.type<@std::@Wrapper<[@T]>>>

    function.def @compute(%inp: !array.type<@N x !struct.type<@std::@Wrapper<[@T]>>>, %first : !poly.tvar<@T>) -> !struct.type<@VarArray<[@N, @T]>> {
      %self = struct.new : !struct.type<@VarArray<[@N, @T]>>
      struct.writef %self[@valUnused] = %inp : !struct.type<@VarArray<[@N, @T]>>, !array.type<@N x !struct.type<@std::@Wrapper<[@T]>>>
      struct.writef %self[@valUsed] = %inp : !struct.type<@VarArray<[@N, @T]>>, !array.type<@N x !struct.type<@std::@Wrapper<[@T]>>>
      function.return %self : !struct.type<@VarArray<[@N, @T]>>
    }

    function.def @constrain(%self: !struct.type<@VarArray<[@N, @T]>>, %inp: !array.type<@N x !struct.type<@std::@Wrapper<[@T]>>>, %first : !poly.tvar<@T>) {
      %arr = struct.readf %self[@valUsed] : !struct.type<@VarArray<[@N, @T]>>, !array.type<@N x !struct.type<@std::@Wrapper<[@T]>>>
      %idx = arith.constant 0 : index
      %elem = array.read %arr[%idx] : !array.type<@N x !struct.type<@std::@Wrapper<[@T]>>>, !struct.type<@std::@Wrapper<[@T]>>
      %inner = struct.readf %elem[@val] : !struct.type<@std::@Wrapper<[@T]>>, !poly.tvar<@T>
      constrain.eq %first, %inner : !poly.tvar<@T>
      function.return
    }
  }

  struct.def @Main {
    struct.field @a : !struct.type<@VarArray<[2, !felt.type]>> // unused, should be removed
    struct.field @b : !struct.type<@VarArray<[7, index]>> // unused, should be removed
    struct.field @c : !struct.type<@VarArray<[2, !felt.type]>> {llzk.pub} // unused, shouldn't be removed since it's an output
    function.def @compute() -> !struct.type<@Main> {
      %self = struct.new : !struct.type<@Main>
      function.return %self : !struct.type<@Main>
    }
    function.def @constrain(%self : !struct.type<@Main>) {
      function.return
    }
  }
}

// STRICT-LABEL: module @std {
// STRICT-NEXT:    struct.def @Wrapper<[@T]> {
// STRICT-NEXT:      struct.field @val : !poly.tvar<@T>
// STRICT-NEXT:      function.def @compute(%[[VAL_0:.*]]: !poly.tvar<@T>) -> !struct.type<@std::@Wrapper<[@T]>> attributes {function.allow_witness} {
// STRICT-NEXT:        %[[VAL_1:.*]] = struct.new : <@std::@Wrapper<[@T]>>
// STRICT-NEXT:        struct.writef %[[VAL_1]][@val] = %[[VAL_0]] : <@std::@Wrapper<[@T]>>, !poly.tvar<@T>
// STRICT-NEXT:        function.return %[[VAL_1]] : !struct.type<@std::@Wrapper<[@T]>>
// STRICT-NEXT:      }
// STRICT-NEXT:      function.def @constrain(%[[VAL_2:.*]]: !struct.type<@std::@Wrapper<[@T]>>, %[[VAL_3:.*]]: !poly.tvar<@T>) attributes {function.allow_constraint} {
// STRICT-NEXT:        %[[VAL_4:.*]] = struct.readf %[[VAL_2]][@val] : <@std::@Wrapper<[@T]>>, !poly.tvar<@T>
// STRICT-NEXT:        constrain.eq %[[VAL_4]], %[[VAL_3]] : !poly.tvar<@T>, !poly.tvar<@T>
// STRICT-NEXT:        function.return
// STRICT-NEXT:      }
// STRICT-NEXT:    }
// STRICT-NEXT:  }

// STRICT-LABEL: struct.def @VarArray<[@N, @T]> {
// STRICT-NEXT:    struct.field @valUsed : !array.type<@N x !struct.type<@std::@Wrapper<[@T]>>>
// STRICT-NEXT:    function.def @compute(%[[VAL_0:.*]]: !array.type<@N x !struct.type<@std::@Wrapper<[@T]>>>, %[[VAL_1:.*]]: !poly.tvar<@T>) -> !struct.type<@VarArray<[@N, @T]>> attributes {function.allow_witness} {
// STRICT-NEXT:      %[[VAL_2:.*]] = struct.new : <@VarArray<[@N, @T]>>
// STRICT-NEXT:      struct.writef %[[VAL_2]][@valUsed] = %[[VAL_0]] : <@VarArray<[@N, @T]>>, !array.type<@N x !struct.type<@std::@Wrapper<[@T]>>>
// STRICT-NEXT:      function.return %[[VAL_2]] : !struct.type<@VarArray<[@N, @T]>>
// STRICT-NEXT:    }
// STRICT-NEXT:    function.def @constrain(%[[VAL_3:.*]]: !struct.type<@VarArray<[@N, @T]>>, %[[VAL_4:.*]]: !array.type<@N x !struct.type<@std::@Wrapper<[@T]>>>, %[[VAL_5:.*]]: !poly.tvar<@T>) attributes {function.allow_constraint} {
// STRICT-NEXT:      %[[VAL_6:.*]] = struct.readf %[[VAL_3]][@valUsed] : <@VarArray<[@N, @T]>>, !array.type<@N x !struct.type<@std::@Wrapper<[@T]>>>
// STRICT-NEXT:      %[[VAL_7:.*]] = arith.constant 0 : index
// STRICT-NEXT:      %[[VAL_8:.*]] = array.read %[[VAL_6]]{{\[}}%[[VAL_7]]] : <@N x !struct.type<@std::@Wrapper<[@T]>>>, !struct.type<@std::@Wrapper<[@T]>>
// STRICT-NEXT:      %[[VAL_9:.*]] = struct.readf %[[VAL_8]][@val] : <@std::@Wrapper<[@T]>>, !poly.tvar<@T>
// STRICT-NEXT:      constrain.eq %[[VAL_5]], %[[VAL_9]] : !poly.tvar<@T>, !poly.tvar<@T>
// STRICT-NEXT:      function.return
// STRICT-NEXT:    }
// STRICT-NEXT:  }

// STRICT-LABEL: struct.def @Main {
// STRICT-NEXT:    struct.field @c : !struct.type<@VarArray<[2, !felt.type]>> {llzk.pub}
// STRICT-NEXT:    function.def @compute() -> !struct.type<@Main> attributes {function.allow_witness} {
// STRICT-NEXT:      %[[VAL_0:.*]] = struct.new : <@Main>
// STRICT-NEXT:      function.return %[[VAL_0]] : !struct.type<@Main>
// STRICT-NEXT:    }
// STRICT-NEXT:    function.def @constrain(%[[VAL_1:.*]]: !struct.type<@Main>) attributes {function.allow_constraint} {
// STRICT-NEXT:      function.return
// STRICT-NEXT:    }
// STRICT-NEXT:  }

// RELAX-LABEL: module @std {
// RELAX-NEXT:    struct.def @Wrapper<[@T]> {
// RELAX-NEXT:      struct.field @val : !poly.tvar<@T>
// RELAX-NEXT:      function.def @compute(%[[VAL_0:.*]]: !poly.tvar<@T>) -> !struct.type<@std::@Wrapper<[@T]>> attributes {function.allow_witness} {
// RELAX-NEXT:        %[[VAL_1:.*]] = struct.new : <@std::@Wrapper<[@T]>>
// RELAX-NEXT:        struct.writef %[[VAL_1]][@val] = %[[VAL_0]] : <@std::@Wrapper<[@T]>>, !poly.tvar<@T>
// RELAX-NEXT:        function.return %[[VAL_1]] : !struct.type<@std::@Wrapper<[@T]>>
// RELAX-NEXT:      }
// RELAX-NEXT:      function.def @constrain(%[[VAL_2:.*]]: !struct.type<@std::@Wrapper<[@T]>>, %[[VAL_3:.*]]: !poly.tvar<@T>) attributes {function.allow_constraint} {
// RELAX-NEXT:        %[[VAL_4:.*]] = struct.readf %[[VAL_2]][@val] : <@std::@Wrapper<[@T]>>, !poly.tvar<@T>
// RELAX-NEXT:        constrain.eq %[[VAL_4]], %[[VAL_3]] : !poly.tvar<@T>, !poly.tvar<@T>
// RELAX-NEXT:        function.return
// RELAX-NEXT:      }
// RELAX-NEXT:    }
// RELAX-NEXT:  }

// RELAX-LABEL: struct.def @VarArray<[@N, @T]> {
// RELAX-NEXT:    struct.field @valUsed : !array.type<@N x !struct.type<@std::@Wrapper<[@T]>>>
// RELAX-NEXT:    function.def @compute(%[[VAL_0:.*]]: !array.type<@N x !struct.type<@std::@Wrapper<[@T]>>>, %[[VAL_1:.*]]: !poly.tvar<@T>) -> !struct.type<@VarArray<[@N, @T]>> attributes {function.allow_witness} {
// RELAX-NEXT:      %[[VAL_2:.*]] = struct.new : <@VarArray<[@N, @T]>>
// RELAX-NEXT:      struct.writef %[[VAL_2]][@valUsed] = %[[VAL_0]] : <@VarArray<[@N, @T]>>, !array.type<@N x !struct.type<@std::@Wrapper<[@T]>>>
// RELAX-NEXT:      function.return %[[VAL_2]] : !struct.type<@VarArray<[@N, @T]>>
// RELAX-NEXT:    }
// RELAX-NEXT:    function.def @constrain(%[[VAL_3:.*]]: !struct.type<@VarArray<[@N, @T]>>, %[[VAL_4:.*]]: !array.type<@N x !struct.type<@std::@Wrapper<[@T]>>>, %[[VAL_5:.*]]: !poly.tvar<@T>) attributes {function.allow_constraint} {
// RELAX-NEXT:      %[[VAL_6:.*]] = struct.readf %[[VAL_3]][@valUsed] : <@VarArray<[@N, @T]>>, !array.type<@N x !struct.type<@std::@Wrapper<[@T]>>>
// RELAX-NEXT:      %[[VAL_7:.*]] = arith.constant 0 : index
// RELAX-NEXT:      %[[VAL_8:.*]] = array.read %[[VAL_6]]{{\[}}%[[VAL_7]]] : <@N x !struct.type<@std::@Wrapper<[@T]>>>, !struct.type<@std::@Wrapper<[@T]>>
// RELAX-NEXT:      %[[VAL_9:.*]] = struct.readf %[[VAL_8]][@val] : <@std::@Wrapper<[@T]>>, !poly.tvar<@T>
// RELAX-NEXT:      constrain.eq %[[VAL_5]], %[[VAL_9]] : !poly.tvar<@T>, !poly.tvar<@T>
// RELAX-NEXT:      function.return
// RELAX-NEXT:    }
// RELAX-NEXT:  }

// RELAX-LABEL: struct.def @Main {
// RELAX-NEXT:    struct.field @c : !struct.type<@VarArray<[2, !felt.type]>> {llzk.pub}
// RELAX-NEXT:    function.def @compute() -> !struct.type<@Main> attributes {function.allow_witness} {
// RELAX-NEXT:      %[[VAL_0:.*]] = struct.new : <@Main>
// RELAX-NEXT:      function.return %[[VAL_0]] : !struct.type<@Main>
// RELAX-NEXT:    }
// RELAX-NEXT:    function.def @constrain(%[[VAL_1:.*]]: !struct.type<@Main>) attributes {function.allow_constraint} {
// RELAX-NEXT:      function.return
// RELAX-NEXT:    }
// RELAX-NEXT:  }

// -----

module attributes {veridise.lang = "llzk"} {

  module @nested {
    // @val is read-only in this module, but not read-only in all modules,
    // so this test will examine if our symbol lookup works across modules
    struct.def @Wrapper {
      struct.field @val : !felt.type {llzk.pub}
      function.def @compute(%inp : !felt.type) -> !struct.type<@nested::@Wrapper> {
        %self = struct.new : !struct.type<@nested::@Wrapper>
        struct.writef %self[@val] = %inp : !struct.type<@nested::@Wrapper>, !felt.type
        function.return %self : !struct.type<@nested::@Wrapper>
      }
      function.def @constrain(%self : !struct.type<@nested::@Wrapper>, %inp : !felt.type) {
        function.return
      }
    }
  }

  module @user {
    struct.def @Unwrapper {
      struct.field @comp : !struct.type<@nested::@Wrapper>
      function.def @compute(%inp : !felt.type) -> !struct.type<@user::@Unwrapper> {
        %self = struct.new : !struct.type<@user::@Unwrapper>
        %wrapped = function.call @nested::@Wrapper::@compute(%inp) : (!felt.type) -> !struct.type<@nested::@Wrapper>
        struct.writef %self[@comp] = %wrapped : !struct.type<@user::@Unwrapper>, !struct.type<@nested::@Wrapper>
        function.return %self : !struct.type<@user::@Unwrapper>
      }
      function.def @constrain(%self : !struct.type<@user::@Unwrapper>, %inp : !felt.type) {
        %wrapper = struct.readf %self[@comp] : !struct.type<@user::@Unwrapper>, !struct.type<@nested::@Wrapper>
        %wrapped = struct.readf %wrapper[@val] : !struct.type<@nested::@Wrapper>, !felt.type
        constrain.eq %wrapped, %inp : !felt.type
        function.return
      }
    }
  }

  struct.def @Main {
    // Since this is private, this is eliminated in remove-structs.
    struct.field @unwrapper : !struct.type<@user::@Unwrapper>
    function.def @compute() -> !struct.type<@Main> {
      %self = struct.new : !struct.type<@Main>
      function.return %self : !struct.type<@Main>
    }
    function.def @constrain(%self : !struct.type<@Main>) {
      function.return
    }
  }
}

// STRICT-LABEL: module @nested {
// STRICT-NEXT:  }

// STRICT-LABEL: module @user {
// STRICT-NEXT:  }

// STRICT-LABEL: struct.def @Main {
// STRICT-NEXT:    function.def @compute() -> !struct.type<@Main> attributes {function.allow_witness} {
// STRICT-NEXT:      %[[VAL_0:.*]] = struct.new : <@Main>
// STRICT-NEXT:      function.return %[[VAL_0]] : !struct.type<@Main>
// STRICT-NEXT:    }
// STRICT-NEXT:    function.def @constrain(%[[VAL_1:.*]]: !struct.type<@Main>) attributes {function.allow_constraint} {
// STRICT-NEXT:      function.return
// STRICT-NEXT:    }
// STRICT-NEXT:  }

// RELAX-LABEL: module @nested {
// RELAX-NEXT:    struct.def @Wrapper {
// RELAX-NEXT:      struct.field @val : !felt.type {llzk.pub}
// RELAX-NEXT:      function.def @compute(%[[VAL_0:.*]]: !felt.type) -> !struct.type<@nested::@Wrapper> attributes {function.allow_witness} {
// RELAX-NEXT:        %[[VAL_1:.*]] = struct.new : <@nested::@Wrapper>
// RELAX-NEXT:        struct.writef %[[VAL_1]][@val] = %[[VAL_0]] : <@nested::@Wrapper>, !felt.type
// RELAX-NEXT:        function.return %[[VAL_1]] : !struct.type<@nested::@Wrapper>
// RELAX-NEXT:      }
// RELAX-NEXT:      function.def @constrain(%[[VAL_2:.*]]: !struct.type<@nested::@Wrapper>, %[[VAL_3:.*]]: !felt.type) attributes {function.allow_constraint} {
// RELAX-NEXT:        function.return
// RELAX-NEXT:      }
// RELAX-NEXT:    }
// RELAX-NEXT:  }

// RELAX-LABEL: module @user {
// RELAX-NEXT:    struct.def @Unwrapper {
// RELAX-NEXT:      struct.field @comp : !struct.type<@nested::@Wrapper>
// RELAX-NEXT:      function.def @compute(%[[VAL_0:.*]]: !felt.type) -> !struct.type<@user::@Unwrapper> attributes {function.allow_witness} {
// RELAX-NEXT:        %[[VAL_1:.*]] = struct.new : <@user::@Unwrapper>
// RELAX-NEXT:        %[[VAL_2:.*]] = function.call @nested::@Wrapper::@compute(%[[VAL_0]]) : (!felt.type) -> !struct.type<@nested::@Wrapper>
// RELAX-NEXT:        struct.writef %[[VAL_1]][@comp] = %[[VAL_2]] : <@user::@Unwrapper>, !struct.type<@nested::@Wrapper>
// RELAX-NEXT:        function.return %[[VAL_1]] : !struct.type<@user::@Unwrapper>
// RELAX-NEXT:      }
// RELAX-NEXT:      function.def @constrain(%[[VAL_3:.*]]: !struct.type<@user::@Unwrapper>, %[[VAL_4:.*]]: !felt.type) attributes {function.allow_constraint} {
// RELAX-NEXT:        %[[VAL_5:.*]] = struct.readf %[[VAL_3]][@comp] : <@user::@Unwrapper>, !struct.type<@nested::@Wrapper>
// RELAX-NEXT:        %[[VAL_6:.*]] = struct.readf %[[VAL_5]][@val] : <@nested::@Wrapper>, !felt.type
// RELAX-NEXT:        constrain.eq %[[VAL_6]], %[[VAL_4]] : !felt.type, !felt.type
// RELAX-NEXT:        function.return
// RELAX-NEXT:      }
// RELAX-NEXT:    }
// RELAX-NEXT:  }

// RELAX-LABEL: struct.def @Main {
// RELAX-NEXT:    function.def @compute() -> !struct.type<@Main> attributes {function.allow_witness} {
// RELAX-NEXT:      %[[VAL_0:.*]] = struct.new : <@Main>
// RELAX-NEXT:      function.return %[[VAL_0]] : !struct.type<@Main>
// RELAX-NEXT:    }
// RELAX-NEXT:    function.def @constrain(%[[VAL_1:.*]]: !struct.type<@Main>) attributes {function.allow_constraint} {
// RELAX-NEXT:      function.return
// RELAX-NEXT:    }
// RELAX-NEXT:  }

// -----

// Overloading symbol names
module attributes {veridise.lang = "llzk"} {
  module @nested {
    // @val is read-only in this module, but not read-only in all modules,
    // so this test will examine if our symbol lookup works across modules
    struct.def @Wrapper {
      struct.field @val : !felt.type {llzk.pub}
      function.def @compute(%inp : !felt.type) -> !struct.type<@nested::@Wrapper> {
        %self = struct.new : !struct.type<@nested::@Wrapper>
        struct.writef %self[@val] = %inp : !struct.type<@nested::@Wrapper>, !felt.type
        function.return %self : !struct.type<@nested::@Wrapper>
      }
      function.def @constrain(%self : !struct.type<@nested::@Wrapper>, %inp : !felt.type) {
        function.return
      }
    }
  }

  module @user {
    struct.def @Unwrapper {
      struct.field @val : !struct.type<@nested::@Wrapper>
      function.def @compute(%inp : !felt.type) -> !struct.type<@user::@Unwrapper> {
        %self = struct.new : !struct.type<@user::@Unwrapper>
        %wrapped = function.call @nested::@Wrapper::@compute(%inp) : (!felt.type) -> !struct.type<@nested::@Wrapper>
        struct.writef %self[@val] = %wrapped : !struct.type<@user::@Unwrapper>, !struct.type<@nested::@Wrapper>
        function.return %self : !struct.type<@user::@Unwrapper>
      }
      function.def @constrain(%self : !struct.type<@user::@Unwrapper>, %inp : !felt.type) {
        %wrapper = struct.readf %self[@val] : !struct.type<@user::@Unwrapper>, !struct.type<@nested::@Wrapper>
        %wrapped = struct.readf %wrapper[@val] : !struct.type<@nested::@Wrapper>, !felt.type
        constrain.eq %wrapped, %inp : !felt.type
        function.return
      }
    }
  }

  struct.def @Main {
    struct.field @val : !struct.type<@user::@Unwrapper>
    function.def @compute() -> !struct.type<@Main> {
      %self = struct.new : !struct.type<@Main>
      function.return %self : !struct.type<@Main>
    }
    function.def @constrain(%self : !struct.type<@Main>) {
      function.return
    }
  }
}

// STRICT-LABEL: module @nested {
// STRICT-NEXT:  }

// STRICT-LABEL: module @user {
// STRICT-NEXT:  }

// STRICT-LABEL: struct.def @Main {
// STRICT-NEXT:    function.def @compute() -> !struct.type<@Main> attributes {function.allow_witness} {
// STRICT-NEXT:      %[[VAL_0:.*]] = struct.new : <@Main>
// STRICT-NEXT:      function.return %[[VAL_0]] : !struct.type<@Main>
// STRICT-NEXT:    }
// STRICT-NEXT:    function.def @constrain(%[[VAL_1:.*]]: !struct.type<@Main>) attributes {function.allow_constraint} {
// STRICT-NEXT:      function.return
// STRICT-NEXT:    }
// STRICT-NEXT:  }

// RELAX-LABEL: module @nested {
// RELAX-NEXT:    struct.def @Wrapper {
// RELAX-NEXT:      struct.field @val : !felt.type {llzk.pub}
// RELAX-NEXT:      function.def @compute(%[[VAL_0:.*]]: !felt.type) -> !struct.type<@nested::@Wrapper> attributes {function.allow_witness} {
// RELAX-NEXT:        %[[VAL_1:.*]] = struct.new : <@nested::@Wrapper>
// RELAX-NEXT:        struct.writef %[[VAL_1]][@val] = %[[VAL_0]] : <@nested::@Wrapper>, !felt.type
// RELAX-NEXT:        function.return %[[VAL_1]] : !struct.type<@nested::@Wrapper>
// RELAX-NEXT:      }
// RELAX-NEXT:      function.def @constrain(%[[VAL_2:.*]]: !struct.type<@nested::@Wrapper>, %[[VAL_3:.*]]: !felt.type) attributes {function.allow_constraint} {
// RELAX-NEXT:        function.return
// RELAX-NEXT:      }
// RELAX-NEXT:    }
// RELAX-NEXT:  }

// RELAX-LABEL: module @user {
// RELAX-NEXT:    struct.def @Unwrapper {
// RELAX-NEXT:      struct.field @val : !struct.type<@nested::@Wrapper>
// RELAX-NEXT:      function.def @compute(%[[VAL_0:.*]]: !felt.type) -> !struct.type<@user::@Unwrapper> attributes {function.allow_witness} {
// RELAX-NEXT:        %[[VAL_1:.*]] = struct.new : <@user::@Unwrapper>
// RELAX-NEXT:        %[[VAL_2:.*]] = function.call @nested::@Wrapper::@compute(%[[VAL_0]]) : (!felt.type) -> !struct.type<@nested::@Wrapper>
// RELAX-NEXT:        struct.writef %[[VAL_1]][@val] = %[[VAL_2]] : <@user::@Unwrapper>, !struct.type<@nested::@Wrapper>
// RELAX-NEXT:        function.return %[[VAL_1]] : !struct.type<@user::@Unwrapper>
// RELAX-NEXT:      }
// RELAX-NEXT:      function.def @constrain(%[[VAL_3:.*]]: !struct.type<@user::@Unwrapper>, %[[VAL_4:.*]]: !felt.type) attributes {function.allow_constraint} {
// RELAX-NEXT:        %[[VAL_5:.*]] = struct.readf %[[VAL_3]][@val] : <@user::@Unwrapper>, !struct.type<@nested::@Wrapper>
// RELAX-NEXT:        %[[VAL_6:.*]] = struct.readf %[[VAL_5]][@val] : <@nested::@Wrapper>, !felt.type
// RELAX-NEXT:        constrain.eq %[[VAL_6]], %[[VAL_4]] : !felt.type, !felt.type
// RELAX-NEXT:        function.return
// RELAX-NEXT:      }
// RELAX-NEXT:    }
// RELAX-NEXT:  }

// RELAX-LABEL: struct.def @Main {
// RELAX-NEXT:    function.def @compute() -> !struct.type<@Main> attributes {function.allow_witness} {
// RELAX-NEXT:      %[[VAL_0:.*]] = struct.new : <@Main>
// RELAX-NEXT:      function.return %[[VAL_0]] : !struct.type<@Main>
// RELAX-NEXT:    }
// RELAX-NEXT:    function.def @constrain(%[[VAL_1:.*]]: !struct.type<@Main>) attributes {function.allow_constraint} {
// RELAX-NEXT:      function.return
// RELAX-NEXT:    }
// RELAX-NEXT:  }
