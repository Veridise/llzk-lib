// RUN: llzk-opt -I %S -split-input-file -llzk-array-to-scalar %s | FileCheck --enable-var-scope %s

module attributes {veridise.lang = "llzk"} {
  function.def @new_then_read() -> index {
    %0 = arith.constant 0 : index
    %1 = arith.constant 1 : index

    %a = arith.constant 45 : index
    %b = arith.constant 214 : index
    %c = arith.constant 15875 : index
    %d = arith.constant 769 : index

    %r = array.new %a, %b, %c, %d, %c, %a: !array.array<2,3 x index>
    %x = array.read %r[%1,%0] : !array.array<2,3 x index>, index
    function.return %x : index
  }
}
// CHECK-LABEL: function.def @new_then_read() -> index {
// CHECK-NEXT:    %[[V:[0-9a-zA-Z_\.]+]] = arith.constant 769 : index
// CHECK-NEXT:    function.return %[[V]] : index
// CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  function.def @multiple_read_and_write() -> !felt.felt {
    %0 = arith.constant 0 : index
    %1 = arith.constant 1 : index
    %2 = arith.constant 2 : index

    %a = felt.const 2
    %b = felt.const 3
    %c = felt.const 5
    %d = felt.const 7
    %e = felt.const 11
    %f = felt.const 13
    %g = felt.const 17
    %h = felt.const 19
    %i = felt.const 23
    %j = felt.const 29

    %r = array.new %a, %b, %c, %d, %e, %f, %g, %h: !array.array<4,2 x !felt.felt>
    %x = array.read %r[%2,%0] : !array.array<4,2 x !felt.felt>, !felt.felt
    // overwrite the same index to ensure the read survives
    array.write %r[%1,%0] = %i : !array.array<4,2 x !felt.felt>, !felt.felt
    // write to a different index and then read it to ensure the new value is used
    array.write %r[%0,%1] = %j : !array.array<4,2 x !felt.felt>, !felt.felt
    %y = array.read %r[%0,%1] : !array.array<4,2 x !felt.felt>, !felt.felt
    // e * j
    %z = felt.mul %x, %y
    function.return %z : !felt.felt
  }
}
// CHECK-LABEL: function.def @multiple_read_and_write() -> !felt.felt {
// CHECK-NEXT:    %[[V0:[0-9a-zA-Z_\.]+]] = felt.const  11
// CHECK-NEXT:    %[[V1:[0-9a-zA-Z_\.]+]] = felt.const  29
// CHECK-NEXT:    %[[V2:[0-9a-zA-Z_\.]+]] = felt.mul %[[V0]], %[[V1]] : !felt.felt, !felt.felt
// CHECK-NEXT:    function.return %[[V2]] : !felt.felt
// CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  function.def @new_then_return() -> !array.array<2,1,2 x !felt.felt> {
    %a = felt.const 45
    %b = felt.const 214
    %c = felt.const 2
    %d = felt.const 52

    %r = array.new %a, %b, %c, %d : !array.array<2,1,2 x !felt.felt>
    function.return %r: !array.array<2,1,2 x !felt.felt>
  }
}
// CHECK-LABEL: function.def @new_then_return() -> (!felt.felt, !felt.felt, !felt.felt, !felt.felt) {
// CHECK-NEXT:    %[[V0:[0-9a-zA-Z_\.]+]] = felt.const  45
// CHECK-NEXT:    %[[V1:[0-9a-zA-Z_\.]+]] = felt.const  214
// CHECK-NEXT:    %[[V2:[0-9a-zA-Z_\.]+]] = felt.const  2
// CHECK-NEXT:    %[[V3:[0-9a-zA-Z_\.]+]] = felt.const  52
// CHECK-NEXT:    function.return %[[V0]], %[[V1]], %[[V2]], %[[V3]] : !felt.felt, !felt.felt, !felt.felt, !felt.felt
// CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  function.def @len() -> index {
    %a = array.new  : !array.array<6,1,2,1,5,1 x !felt.felt>
    %4 = arith.constant 4 : index
    %z = array.len %a, %4 : !array.array<6,1,2,1,5,1 x !felt.felt> // result is 5
    function.return %z: index
  }
}
// CHECK-LABEL: function.def @len() -> index {
// CHECK-NEXT:    %[[V0:[0-9a-zA-Z_\.]+]] = arith.constant 5 : index
// CHECK-NEXT:    function.return %[[V0]] : index
// CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  function.def @convert_arg(%a: !array.array<3,1,2,1,4,1 x !felt.felt>) -> !felt.felt {
    %0 = arith.constant 0 : index
    %1 = arith.constant 1 : index
    %z = array.read %a[%1,%0,%1,%0,%1,%0] : !array.array<3,1,2,1,4,1 x !felt.felt>, !felt.felt
    function.return %z: !felt.felt
  }
}
// CHECK-LABEL: function.def @convert_arg(
// CHECK-SAME:              %[[V0:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V1:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V2:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V3:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V4:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V5:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V6:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V7:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V8:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V9:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V10:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V11:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V12:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V13:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V14:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V15:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V16:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V17:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V18:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V19:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V20:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V21:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V22:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:              %[[V23:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !felt.felt {
// CHECK-NEXT:    function.return %[[V13]] : !felt.felt
// CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  function.def @uninitialized() -> index {
    %0 = arith.constant 0 : index
    %1 = arith.constant 1 : index

    %r = array.new : !array.array<2,3 x index>
    %x = array.read %r[%1,%0] : !array.array<2,3 x index>, index
    function.return %x : index
  }
}
// CHECK-LABEL: function.def @uninitialized() -> index {
// CHECK-NEXT:    %[[V0:[0-9a-zA-Z_\.]+]] = llzk.undef : index
// CHECK-NEXT:    function.return %[[V0]] : index
// CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  function.def @f1(%arg: !felt.felt) -> !array.array<3,2 x !felt.felt> {
    %0 = arith.constant 0 : index
    %a = function.call @f2() : () -> !array.array<3,2 x !felt.felt>
    array.write %a[%0,%0] = %arg : !array.array<3,2 x !felt.felt>, !felt.felt
    function.return %a : !array.array<3,2 x !felt.felt>
  }

  function.def @f2() -> !array.array<3,2 x !felt.felt> {
    %a = array.new : !array.array<3,2 x !felt.felt>
    function.return %a : !array.array<3,2 x !felt.felt>
  }
}
// CHECK-LABEL: function.def @f1(
// CHECK-SAME:           %[[V0:[0-9a-zA-Z_\.]+]]: !felt.felt) -> (!felt.felt, !felt.felt, !felt.felt, !felt.felt, !felt.felt, !felt.felt) {
// CHECK-NEXT:    %[[V1:[0-9a-zA-Z_\.]+]]:6 = function.call @f2() : () -> (!felt.felt, !felt.felt, !felt.felt, !felt.felt, !felt.felt, !felt.felt)
// CHECK-NEXT:    function.return %[[V0]], %[[V1]]#1, %[[V1]]#2, %[[V1]]#3, %[[V1]]#4, %[[V1]]#5 : !felt.felt, !felt.felt, !felt.felt, !felt.felt, !felt.felt, !felt.felt
// CHECK-NEXT:  }
//
// CHECK-LABEL: function.def @f2() -> (!felt.felt, !felt.felt, !felt.felt, !felt.felt, !felt.felt, !felt.felt) {
// CHECK-NEXT:    %[[V0:[0-9a-zA-Z_\.]+]] = llzk.undef : !felt.felt
// CHECK-NEXT:    %[[V1:[0-9a-zA-Z_\.]+]] = llzk.undef : !felt.felt
// CHECK-NEXT:    %[[V2:[0-9a-zA-Z_\.]+]] = llzk.undef : !felt.felt
// CHECK-NEXT:    %[[V3:[0-9a-zA-Z_\.]+]] = llzk.undef : !felt.felt
// CHECK-NEXT:    %[[V4:[0-9a-zA-Z_\.]+]] = llzk.undef : !felt.felt
// CHECK-NEXT:    %[[V5:[0-9a-zA-Z_\.]+]] = llzk.undef : !felt.felt
// CHECK-NEXT:    function.return %[[V5]], %[[V4]], %[[V3]], %[[V2]], %[[V1]], %[[V0]] : !felt.felt, !felt.felt, !felt.felt, !felt.felt, !felt.felt, !felt.felt
// CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  function.def @new_then_write_then_read() -> !felt.felt {
    %0 = arith.constant 0 : index
    %1 = arith.constant 1 : index

    %a = felt.const 0
    %b = felt.const 424867
    %c = felt.const 2465
    %d = felt.const 367

    %r = array.new %a, %a, %a, %a: !array.array<2,2 x !felt.felt>
    array.write %r[%0,%1] = %b: !array.array<2,2 x !felt.felt>, !felt.felt
    array.write %r[%0,%0] = %c: !array.array<2,2 x !felt.felt>, !felt.felt
    array.write %r[%1,%0] = %d: !array.array<2,2 x !felt.felt>, !felt.felt
    // [[2465, 424867],[367, 0]]
    %w = array.read %r[%0,%0] : !array.array<2,2 x !felt.felt>, !felt.felt
    %x = array.read %r[%0,%1] : !array.array<2,2 x !felt.felt>, !felt.felt
    %y = array.read %r[%1,%0] : !array.array<2,2 x !felt.felt>, !felt.felt
    %z = array.read %r[%1,%1] : !array.array<2,2 x !felt.felt>, !felt.felt

    %s1 = felt.add %w, %x   // 2465 + 424867
    %s2 = felt.add %s1, %y  // ^ + 367
    %s3 = felt.add %s2, %z  // ^ + 0
    function.return %s3 : !felt.felt
  }
}
// CHECK-LABEL: function.def @new_then_write_then_read() -> !felt.felt {
// CHECK-NEXT:    %[[V0:[0-9a-zA-Z_\.]+]] = felt.const  0
// CHECK-NEXT:    %[[V1:[0-9a-zA-Z_\.]+]] = felt.const  424867
// CHECK-NEXT:    %[[V2:[0-9a-zA-Z_\.]+]] = felt.const  2465
// CHECK-NEXT:    %[[V3:[0-9a-zA-Z_\.]+]] = felt.const  367
// CHECK-NEXT:    %[[V4:[0-9a-zA-Z_\.]+]] = felt.add %[[V1]], %[[V2]] : !felt.felt, !felt.felt
// CHECK-NEXT:    %[[V5:[0-9a-zA-Z_\.]+]] = felt.add %[[V4]], %[[V3]] : !felt.felt, !felt.felt
// CHECK-NEXT:    %[[V6:[0-9a-zA-Z_\.]+]] = felt.add %[[V5]], %[[V0]] : !felt.felt, !felt.felt
// CHECK-NEXT:    function.return %[[V6]] : !felt.felt
// CHECK-NEXT:  }
// -----

!F = !felt.felt
module attributes {veridise.lang = "llzk"} {
  struct.def @ArrayFields {
    struct.field @arr : !array.array<2,3 x !F>

    function.def @compute(%a0: !F, %a1: !F, %a2: !F, %a3: !F, %a4: !F, %a5: !F) -> !struct.struct<@ArrayFields> {
      %self = struct.new : !struct.struct<@ArrayFields>
      %a = array.new %a0, %a1, %a2, %a3, %a4, %a5 : !array.array<2,3 x !F>
      struct.writef %self[@arr] = %a : !struct.struct<@ArrayFields>, !array.array<2,3 x !F>
      function.return %self : !struct.struct<@ArrayFields>
    }

    function.def @constrain(%self: !struct.struct<@ArrayFields>, %a0: !F, %a1: !F, %a2: !F, %a3: !F, %a4: !F, %a5: !F) {
      %a = struct.readf %self[@arr] : !struct.struct<@ArrayFields>, !array.array<2,3 x !F>

      %0 = arith.constant 0 : index
      %1 = arith.constant 1 : index
      %2 = arith.constant 2 : index

      %b0 = array.read %a[%0, %0] : !array.array<2,3 x !F>, !F
      constrain.eq %a0, %b0 : !F

      %b1 = array.read %a[%0, %1] : !array.array<2,3 x !F>, !F
      constrain.eq %a1, %b1 : !F

      %b2 = array.read %a[%0, %2] : !array.array<2,3 x !F>, !F
      constrain.eq %a2, %b2 : !F

      %b3 = array.read %a[%1, %0] : !array.array<2,3 x !F>, !F
      constrain.eq %a3, %b3 : !F

      %b4 = array.read %a[%1, %1] : !array.array<2,3 x !F>, !F
      constrain.eq %a4, %b4 : !F

      %b5 = array.read %a[%1, %2] : !array.array<2,3 x !F>, !F
      constrain.eq %a5, %b5 : !F

      function.return
    }
  }
}
// CHECK-LABEL: struct.def @ArrayFields {
// CHECK-NEXT:    struct.field @arr_0 : !felt.felt
// CHECK-NEXT:    struct.field @arr_1 : !felt.felt
// CHECK-NEXT:    struct.field @arr_2 : !felt.felt
// CHECK-NEXT:    struct.field @arr_3 : !felt.felt
// CHECK-NEXT:    struct.field @arr_4 : !felt.felt
// CHECK-NEXT:    struct.field @arr_5 : !felt.felt
// CHECK-NEXT:    function.def @compute(%[[V0:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V1:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V2:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:    %[[V3:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V4:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V5:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !struct.struct<@ArrayFields>  attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V6:[0-9a-zA-Z_\.]+]] = struct.new : <@ArrayFields>
// CHECK-DAG:       struct.writef %[[V6]][@arr_5] = %[[V5]] : <@ArrayFields>, !felt.felt
// CHECK-DAG:       struct.writef %[[V6]][@arr_3] = %[[V3]] : <@ArrayFields>, !felt.felt
// CHECK-DAG:       struct.writef %[[V6]][@arr_4] = %[[V4]] : <@ArrayFields>, !felt.felt
// CHECK-DAG:       struct.writef %[[V6]][@arr_2] = %[[V2]] : <@ArrayFields>, !felt.felt
// CHECK-DAG:       struct.writef %[[V6]][@arr_0] = %[[V0]] : <@ArrayFields>, !felt.felt
// CHECK-DAG:       struct.writef %[[V6]][@arr_1] = %[[V1]] : <@ArrayFields>, !felt.felt
// CHECK-NEXT:      function.return %[[V6]] : !struct.struct<@ArrayFields>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V7:[0-9a-zA-Z_\.]+]]: !struct.struct<@ArrayFields>, %[[V8:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V9:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:    %[[V10:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V11:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V12:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V13:[0-9a-zA-Z_\.]+]]: !felt.felt) attributes {function.allow_constraint} {
// CHECK-DAG:       %[[V14:[0-9a-zA-Z_\.]+]] = struct.readf %[[V7]][@arr_5] : <@ArrayFields>, !felt.felt
// CHECK-DAG:       %[[V15:[0-9a-zA-Z_\.]+]] = struct.readf %[[V7]][@arr_3] : <@ArrayFields>, !felt.felt
// CHECK-DAG:       %[[V16:[0-9a-zA-Z_\.]+]] = struct.readf %[[V7]][@arr_4] : <@ArrayFields>, !felt.felt
// CHECK-DAG:       %[[V17:[0-9a-zA-Z_\.]+]] = struct.readf %[[V7]][@arr_2] : <@ArrayFields>, !felt.felt
// CHECK-DAG:       %[[V18:[0-9a-zA-Z_\.]+]] = struct.readf %[[V7]][@arr_0] : <@ArrayFields>, !felt.felt
// CHECK-DAG:       %[[V19:[0-9a-zA-Z_\.]+]] = struct.readf %[[V7]][@arr_1] : <@ArrayFields>, !felt.felt
// CHECK-NEXT:      constrain.eq %[[V8]], %[[V18]] : !felt.felt, !felt.felt
// CHECK-NEXT:      constrain.eq %[[V9]], %[[V19]] : !felt.felt, !felt.felt
// CHECK-NEXT:      constrain.eq %[[V10]], %[[V17]] : !felt.felt, !felt.felt
// CHECK-NEXT:      constrain.eq %[[V11]], %[[V15]] : !felt.felt, !felt.felt
// CHECK-NEXT:      constrain.eq %[[V12]], %[[V16]] : !felt.felt, !felt.felt
// CHECK-NEXT:      constrain.eq %[[V13]], %[[V14]] : !felt.felt, !felt.felt
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// -----

!F = !felt.felt
module attributes {veridise.lang = "llzk"} {
  struct.def @ArrayFieldsAndParams {
    struct.field @arr : !array.array<2,3 x !F>

    function.def @compute(%a: !array.array<2,3 x !F>) -> !struct.struct<@ArrayFieldsAndParams> {
      %self = struct.new : !struct.struct<@ArrayFieldsAndParams>
      struct.writef %self[@arr] = %a : !struct.struct<@ArrayFieldsAndParams>, !array.array<2,3 x !F>
      function.return %self : !struct.struct<@ArrayFieldsAndParams>
    }

    function.def @constrain(%self: !struct.struct<@ArrayFieldsAndParams>, %b: !array.array<2,3 x !F>) {
      %a = struct.readf %self[@arr] : !struct.struct<@ArrayFieldsAndParams>, !array.array<2,3 x !F>

      %0 = arith.constant 0 : index
      %1 = arith.constant 1 : index
      %2 = arith.constant 2 : index

      %a0 = array.read %a[%0, %0] : !array.array<2,3 x !F>, !F
      %b0 = array.read %b[%0, %0] : !array.array<2,3 x !F>, !F
      constrain.eq %a0, %b0 : !F

      %a1 = array.read %a[%0, %1] : !array.array<2,3 x !F>, !F
      %b1 = array.read %b[%0, %1] : !array.array<2,3 x !F>, !F
      constrain.eq %a1, %b1 : !F

      %a2 = array.read %a[%0, %2] : !array.array<2,3 x !F>, !F
      %b2 = array.read %b[%0, %2] : !array.array<2,3 x !F>, !F
      constrain.eq %a2, %b2 : !F

      %a3 = array.read %a[%1, %0] : !array.array<2,3 x !F>, !F
      %b3 = array.read %b[%1, %0] : !array.array<2,3 x !F>, !F
      constrain.eq %a3, %b3 : !F

      %a4 = array.read %a[%1, %1] : !array.array<2,3 x !F>, !F
      %b4 = array.read %b[%1, %1] : !array.array<2,3 x !F>, !F
      constrain.eq %a4, %b4 : !F

      %a5 = array.read %a[%1, %2] : !array.array<2,3 x !F>, !F
      %b5 = array.read %b[%1, %2] : !array.array<2,3 x !F>, !F
      constrain.eq %a5, %b5 : !F

      function.return
    }
  }
}
// CHECK-LABEL: struct.def @ArrayFieldsAndParams {
// CHECK-NEXT:    struct.field @arr_0 : !felt.felt
// CHECK-NEXT:    struct.field @arr_1 : !felt.felt
// CHECK-NEXT:    struct.field @arr_2 : !felt.felt
// CHECK-NEXT:    struct.field @arr_3 : !felt.felt
// CHECK-NEXT:    struct.field @arr_4 : !felt.felt
// CHECK-NEXT:    struct.field @arr_5 : !felt.felt
// CHECK-NEXT:    function.def @compute(%[[V0:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V1:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V2:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:    %[[V3:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V4:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V5:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !struct.struct<@ArrayFieldsAndParams>  attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V6:[0-9a-zA-Z_\.]+]] = struct.new : <@ArrayFieldsAndParams>
// CHECK-DAG:       struct.writef %[[V6]][@arr_5] = %[[V5]] : <@ArrayFieldsAndParams>, !felt.felt
// CHECK-DAG:       struct.writef %[[V6]][@arr_4] = %[[V4]] : <@ArrayFieldsAndParams>, !felt.felt
// CHECK-DAG:       struct.writef %[[V6]][@arr_3] = %[[V3]] : <@ArrayFieldsAndParams>, !felt.felt
// CHECK-DAG:       struct.writef %[[V6]][@arr_2] = %[[V2]] : <@ArrayFieldsAndParams>, !felt.felt
// CHECK-DAG:       struct.writef %[[V6]][@arr_1] = %[[V1]] : <@ArrayFieldsAndParams>, !felt.felt
// CHECK-DAG:       struct.writef %[[V6]][@arr_0] = %[[V0]] : <@ArrayFieldsAndParams>, !felt.felt
// CHECK-NEXT:      function.return %[[V6]] : !struct.struct<@ArrayFieldsAndParams>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V7:[0-9a-zA-Z_\.]+]]: !struct.struct<@ArrayFieldsAndParams>, %[[V8:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V9:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:    %[[V10:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V11:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V12:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V13:[0-9a-zA-Z_\.]+]]: !felt.felt) attributes {function.allow_constraint} {
// CHECK-DAG:       %[[V14:[0-9a-zA-Z_\.]+]] = struct.readf %[[V7]][@arr_5] : <@ArrayFieldsAndParams>, !felt.felt
// CHECK-DAG:       %[[V15:[0-9a-zA-Z_\.]+]] = struct.readf %[[V7]][@arr_4] : <@ArrayFieldsAndParams>, !felt.felt
// CHECK-DAG:       %[[V16:[0-9a-zA-Z_\.]+]] = struct.readf %[[V7]][@arr_3] : <@ArrayFieldsAndParams>, !felt.felt
// CHECK-DAG:       %[[V17:[0-9a-zA-Z_\.]+]] = struct.readf %[[V7]][@arr_2] : <@ArrayFieldsAndParams>, !felt.felt
// CHECK-DAG:       %[[V18:[0-9a-zA-Z_\.]+]] = struct.readf %[[V7]][@arr_1] : <@ArrayFieldsAndParams>, !felt.felt
// CHECK-DAG:       %[[V19:[0-9a-zA-Z_\.]+]] = struct.readf %[[V7]][@arr_0] : <@ArrayFieldsAndParams>, !felt.felt
// CHECK-NEXT:      constrain.eq %[[V19]], %[[V8]] : !felt.felt, !felt.felt
// CHECK-NEXT:      constrain.eq %[[V18]], %[[V9]] : !felt.felt, !felt.felt
// CHECK-NEXT:      constrain.eq %[[V17]], %[[V10]] : !felt.felt, !felt.felt
// CHECK-NEXT:      constrain.eq %[[V16]], %[[V11]] : !felt.felt, !felt.felt
// CHECK-NEXT:      constrain.eq %[[V15]], %[[V12]] : !felt.felt, !felt.felt
// CHECK-NEXT:      constrain.eq %[[V14]], %[[V13]] : !felt.felt, !felt.felt
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// -----

!F = !felt.felt
module attributes {veridise.lang = "llzk"} {
  // Order the structs so that the field ref is converted before the field itself
  struct.def @ComponentA2 {
    function.def @compute(%p: !struct.struct<@ComponentA1>) -> !struct.struct<@ComponentA2> {
      %self = struct.new : !struct.struct<@ComponentA2>
      %r = struct.readf %p[@f1] : !struct.struct<@ComponentA1>, !array.array<4,3 x !F>
      function.return %self : !struct.struct<@ComponentA2>
    }

    function.def @constrain(%self: !struct.struct<@ComponentA2>, %p: !struct.struct<@ComponentA1>) {
      function.return
    }
  }

  struct.def @ComponentA1 {
    struct.field @f1 : !array.array<4,3 x !F>

    function.def @constrain(%self: !struct.struct<@ComponentA1>) { function.return }
    function.def @compute() -> !struct.struct<@ComponentA1> {
      %self = struct.new : !struct.struct<@ComponentA1>
      function.return %self : !struct.struct<@ComponentA1>
    }
  }
}
// CHECK-LABEL: struct.def @ComponentA2 {
// CHECK-NEXT:    function.def @compute(%[[V0:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentA1>) -> !struct.struct<@ComponentA2> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA2>
// CHECK-DAG:       %[[V2:[0-9a-zA-Z_\.]+]] = struct.readf %[[V0]][@f1_8] : <@ComponentA1>, !felt.felt
// CHECK-DAG:       %[[V3:[0-9a-zA-Z_\.]+]] = struct.readf %[[V0]][@f1_7] : <@ComponentA1>, !felt.felt
// CHECK-DAG:       %[[V4:[0-9a-zA-Z_\.]+]] = struct.readf %[[V0]][@f1_10] : <@ComponentA1>, !felt.felt
// CHECK-DAG:       %[[V5:[0-9a-zA-Z_\.]+]] = struct.readf %[[V0]][@f1_9] : <@ComponentA1>, !felt.felt
// CHECK-DAG:       %[[V6:[0-9a-zA-Z_\.]+]] = struct.readf %[[V0]][@f1_11] : <@ComponentA1>, !felt.felt
// CHECK-DAG:       %[[V7:[0-9a-zA-Z_\.]+]] = struct.readf %[[V0]][@f1_2] : <@ComponentA1>, !felt.felt
// CHECK-DAG:       %[[V8:[0-9a-zA-Z_\.]+]] = struct.readf %[[V0]][@f1_3] : <@ComponentA1>, !felt.felt
// CHECK-DAG:       %[[V9:[0-9a-zA-Z_\.]+]] = struct.readf %[[V0]][@f1_4] : <@ComponentA1>, !felt.felt
// CHECK-DAG:       %[[V10:[0-9a-zA-Z_\.]+]] = struct.readf %[[V0]][@f1_5] : <@ComponentA1>, !felt.felt
// CHECK-DAG:       %[[V11:[0-9a-zA-Z_\.]+]] = struct.readf %[[V0]][@f1_6] : <@ComponentA1>, !felt.felt
// CHECK-DAG:       %[[V12:[0-9a-zA-Z_\.]+]] = struct.readf %[[V0]][@f1_0] : <@ComponentA1>, !felt.felt
// CHECK-DAG:       %[[V13:[0-9a-zA-Z_\.]+]] = struct.readf %[[V0]][@f1_1] : <@ComponentA1>, !felt.felt
// CHECK-NEXT:      function.return %[[V1]] : !struct.struct<@ComponentA2>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V14:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentA2>, %[[V15:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentA1>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
//
// CHECK-LABEL: struct.def @ComponentA1 {
// CHECK-DAG:     struct.field @f1_0 : !felt.felt
// CHECK-DAG:     struct.field @f1_1 : !felt.felt
// CHECK-DAG:     struct.field @f1_2 : !felt.felt
// CHECK-DAG:     struct.field @f1_3 : !felt.felt
// CHECK-DAG:     struct.field @f1_4 : !felt.felt
// CHECK-DAG:     struct.field @f1_5 : !felt.felt
// CHECK-DAG:     struct.field @f1_6 : !felt.felt
// CHECK-DAG:     struct.field @f1_7 : !felt.felt
// CHECK-DAG:     struct.field @f1_8 : !felt.felt
// CHECK-DAG:     struct.field @f1_9 : !felt.felt
// CHECK-DAG:     struct.field @f1_10 : !felt.felt
// CHECK-DAG:     struct.field @f1_11 : !felt.felt
// CHECK-NEXT:    function.def @constrain(%[[V0:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentA1>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @compute() -> !struct.struct<@ComponentA1> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA1>
// CHECK-NEXT:      function.return %[[V1]] : !struct.struct<@ComponentA1>
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  function.def @new_then_insert() -> !felt.felt {
    %a = felt.const 45
    %b = felt.const 214

    %x = array.new : !array.array<4,2 x !felt.felt>
    %y = array.new %a, %b : !array.array<2 x !felt.felt>

    %0 = arith.constant 0 : index
    %1 = arith.constant 1 : index
    %2 = arith.constant 2 : index
    array.insert %x[%2] = %y : !array.array<4,2 x !felt.felt>, !array.array<2 x !felt.felt>

    %z = array.read %x[%2,%1] : !array.array<4,2 x !felt.felt>, !felt.felt // %b
    function.return %z : !felt.felt
  }
}
// CHECK-LABEL: function.def @new_then_insert() -> !felt.felt {
// CHECK-NEXT:    %[[V0:[0-9a-zA-Z_\.]+]] = felt.const  214
// CHECK-NEXT:    function.return %[[V0]] : !felt.felt
// CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  function.def @new_then_insert_then_insert() -> !array.array<2,2,2 x !felt.felt> {
    %a = felt.const 45
    %b = felt.const 214
    %c = felt.const 2
    %d = felt.const 52
    %e = felt.const 99
    %f = felt.const 73

    %r = array.new : !array.array<2,2,2 x !felt.felt>
    %s = array.new : !array.array<2,2 x !felt.felt>
    %t = array.new %a, %b : !array.array<2 x !felt.felt>
    %u = array.new %c, %d : !array.array<2 x !felt.felt>
    %v = array.new %e, %f : !array.array<2 x !felt.felt>

    %0 = arith.constant 0 : index
    %1 = arith.constant 1 : index

    // populate part of %s and assign at position 1 in %r
    // %r = [[[?, ?], [?, ?]], [[a, b], [?, ?]]]
    array.insert %s[%0] = %t : !array.array<2,2 x !felt.felt>, !array.array<2 x !felt.felt>
    array.insert %r[%1] = %s : !array.array<2,2,2 x !felt.felt>, !array.array<2,2 x !felt.felt>

    // overwrite values in %s and assign at position 0 in %r
    // %r = [[[c, d], [e, f]], [[a, b], [?, ?]]]
    array.insert %s[%0] = %u : !array.array<2,2 x !felt.felt>, !array.array<2 x !felt.felt>
    array.insert %s[%1] = %v : !array.array<2,2 x !felt.felt>, !array.array<2 x !felt.felt>
    array.insert %r[%0] = %s : !array.array<2,2,2 x !felt.felt>, !array.array<2,2 x !felt.felt>

    function.return %r : !array.array<2,2,2 x !felt.felt>
  }
}
// CHECK-LABEL: function.def @new_then_insert_then_insert() -> (!felt.felt, !felt.felt, !felt.felt, !felt.felt, !felt.felt, !felt.felt, !felt.felt, !felt.felt) {
// CHECK-DAG:     %[[V0:[0-9a-zA-Z_\.]+]] = felt.const  73
// CHECK-DAG:     %[[V1:[0-9a-zA-Z_\.]+]] = felt.const  99
// CHECK-DAG:     %[[V2:[0-9a-zA-Z_\.]+]] = felt.const  52
// CHECK-DAG:     %[[V3:[0-9a-zA-Z_\.]+]] = felt.const  2
// CHECK-DAG:     %[[V4:[0-9a-zA-Z_\.]+]] = felt.const  214
// CHECK-DAG:     %[[V5:[0-9a-zA-Z_\.]+]] = felt.const  45
// CHECK-DAG:     %[[V6:[0-9a-zA-Z_\.]+]] = llzk.undef : !felt.felt
// CHECK-DAG:     %[[V7:[0-9a-zA-Z_\.]+]] = llzk.undef : !felt.felt
// CHECK-NEXT:    function.return %[[V3]], %[[V2]], %[[V1]], %[[V0]], %[[V5]], %[[V4]], %[[V7]], %[[V6]]
// CHECK-SAME:           : !felt.felt, !felt.felt, !felt.felt, !felt.felt, !felt.felt, !felt.felt, !felt.felt, !felt.felt
// CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  function.def @new_then_extract() -> !array.array<3,1 x !felt.felt> {
    %a = felt.const 45
    %b = felt.const 214
    %c = felt.const 2
    %d = felt.const 52
    %e = felt.const 92
    %f = felt.const 10

    %r = array.new %a, %b, %c, %d, %e, %f : !array.array<2,3,1 x !felt.felt>

    %1 = arith.constant 1 : index
    %x = array.extract %r[%1] : !array.array<2,3,1 x !felt.felt>
    function.return %x : !array.array<3,1 x !felt.felt>
  }
}
// CHECK-LABEL: function.def @new_then_extract() -> (!felt.felt, !felt.felt, !felt.felt) {
// CHECK-DAG:     %[[V0:[0-9a-zA-Z_\.]+]] = felt.const  52
// CHECK-DAG:     %[[V1:[0-9a-zA-Z_\.]+]] = felt.const  92
// CHECK-DAG:     %[[V2:[0-9a-zA-Z_\.]+]] = felt.const  10
// CHECK-NEXT:    function.return %[[V0]], %[[V1]], %[[V2]] : !felt.felt, !felt.felt, !felt.felt
// CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  function.def @new_then_extract_then_read() -> !felt.felt {
    %a = felt.const 45
    %b = felt.const 214
    %c = felt.const 2
    %d = felt.const 52
    %e = felt.const 92
    %f = felt.const 10

    %r = array.new %a, %b, %c, %d, %e, %f : !array.array<2,3,1 x !felt.felt>

    %0 = arith.constant 0 : index
    %1 = arith.constant 1 : index
    %x = array.extract %r[%1] : !array.array<2,3,1 x !felt.felt>
    %z = array.read %x[%0,%0] : !array.array<3,1 x !felt.felt>, !felt.felt
    function.return %z: !felt.felt
  }
}
// CHECK-LABEL: function.def @new_then_extract_then_read() -> !felt.felt {
// CHECK-NEXT:    %[[V0:[0-9a-zA-Z_\.]+]] = felt.const  52
// CHECK-NEXT:    function.return %[[V0]] : !felt.felt
// CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  function.def @new_then_extract_then_extract_then_read() -> !felt.felt {
    %a = felt.const 45
    %b = felt.const 214
    %c = felt.const 2
    %d = felt.const 52
    %e = felt.const 92
    %f = felt.const 10

    %r = array.new %a, %b, %c, %d, %e, %f : !array.array<2,3,1 x !felt.felt>

    %1 = arith.constant 1 : index
    %x = array.extract %r[%1] : !array.array<2,3,1 x !felt.felt>
    %0 = arith.constant 0 : index
    %y = array.extract %x[%0] : !array.array<3,1 x !felt.felt>
    %z = array.read %y[%0] : !array.array<1 x !felt.felt>, !felt.felt
    function.return %z: !felt.felt // %d = 52
  }
}
// CHECK-LABEL: function.def @new_then_extract_then_extract_then_read() -> !felt.felt {
// CHECK-NEXT:    %[[V0:[0-9a-zA-Z_\.]+]] = felt.const  52
// CHECK-NEXT:    function.return %[[V0]] : !felt.felt
// CHECK-NEXT:  }
// -----

// FieldDef and FieldRead w/ non-static shape (i.e. cannot be flattened to scalars)
module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentB2<[@N]> {
    function.def @compute(%p: !struct.struct<@ComponentB1<[@N]>>) -> !struct.struct<@ComponentB2<[@N]>> {
      %self = struct.new : !struct.struct<@ComponentB2<[@N]>>
      %r = struct.readf %p[@f1] : !struct.struct<@ComponentB1<[@N]>>, !array.array<4,@N x !felt.felt>
      function.return %self : !struct.struct<@ComponentB2<[@N]>>
    }

    function.def @constrain(%self: !struct.struct<@ComponentB2<[@N]>>, %p: !struct.struct<@ComponentB1<[@N]>>) {
      function.return
    }
  }

  struct.def @ComponentB1<[@N]> {
    struct.field @f1 : !array.array<4,@N x !felt.felt>

    function.def @constrain(%self: !struct.struct<@ComponentB1<[@N]>>) { function.return }
    function.def @compute() -> !struct.struct<@ComponentB1<[@N]>> {
      %self = struct.new : !struct.struct<@ComponentB1<[@N]>>
      function.return %self : !struct.struct<@ComponentB1<[@N]>>
    }
  }
}
// CHECK-LABEL: struct.def @ComponentB2<[@N]> {
// CHECK-NEXT:    function.def @compute(%[[V0:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentB1<[@N]>>) -> !struct.struct<@ComponentB2<[@N]>> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentB2<[@N]>>
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = struct.readf %[[V0]][@f1] : <@ComponentB1<[@N]>>, !array.array<4,@N x !felt.felt>
// CHECK-NEXT:      function.return %[[V1]] : !struct.struct<@ComponentB2<[@N]>>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V3:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentB2<[@N]>>, %[[V4:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentB1<[@N]>>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }

// CHECK-LABEL: struct.def @ComponentB1<[@N]> {
// CHECK-NEXT:    struct.field @f1 : !array.array<4,@N x !felt.felt>
// CHECK-NEXT:    function.def @constrain(%[[V0:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentB1<[@N]>>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @compute() -> !struct.struct<@ComponentB1<[@N]>> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentB1<[@N]>>
// CHECK-NEXT:      function.return %[[V1]] : !struct.struct<@ComponentB1<[@N]>>
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// -----

// Func and CallOp w/ non-static shape (i.e. cannot be flattened to scalars)
module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentC1<[@N]> {
    function.def @compute(%p: !array.array<@N x !felt.felt>) -> !struct.struct<@ComponentC1<[@N]>> {
      %self = struct.new : !struct.struct<@ComponentC1<[@N]>>
      function.return %self : !struct.struct<@ComponentC1<[@N]>>
    }

    function.def @constrain(%self: !struct.struct<@ComponentC1<[@N]>>, %p: !array.array<@N x !felt.felt>) {
      function.return
    }
  }

  struct.def @ComponentC2<[@N]> {
    struct.field @f1 : !struct.struct<@ComponentC1<[@N]>>

    function.def @compute(%p: !array.array<@N x !felt.felt>) -> !struct.struct<@ComponentC2<[@N]>> {
      %self = struct.new : !struct.struct<@ComponentC2<[@N]>>
      %c = function.call @ComponentC1::@compute(%p) : (!array.array<@N x !felt.felt>) -> !struct.struct<@ComponentC1<[@N]>>
      struct.writef %self[@f1] = %c : !struct.struct<@ComponentC2<[@N]>>, !struct.struct<@ComponentC1<[@N]>>
      function.return %self : !struct.struct<@ComponentC2<[@N]>>
    }

    function.def @constrain(%self: !struct.struct<@ComponentC2<[@N]>>, %p: !array.array<@N x !felt.felt>) {
      function.return
    }
  }
}
// CHECK-LABEL: struct.def @ComponentC1<[@N]> {
// CHECK-NEXT:    function.def @compute(%[[V0:[0-9a-zA-Z_\.]+]]: !array.array<@N x !felt.felt>) -> !struct.struct<@ComponentC1<[@N]>> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentC1<[@N]>>
// CHECK-NEXT:      function.return %[[V1]] : !struct.struct<@ComponentC1<[@N]>>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V2:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentC1<[@N]>>, %[[V3:[0-9a-zA-Z_\.]+]]: !array.array<@N x !felt.felt>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }

// CHECK-LABEL: struct.def @ComponentC2<[@N]> {
// CHECK-NEXT:    struct.field @f1 : !struct.struct<@ComponentC1<[@N]>>
// CHECK-NEXT:    function.def @compute(%[[V0:[0-9a-zA-Z_\.]+]]: !array.array<@N x !felt.felt>) -> !struct.struct<@ComponentC2<[@N]>> attributes {function.allow_witness} {
// CHECK-NEXT:      %[[V1:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentC2<[@N]>>
// CHECK-NEXT:      %[[V2:[0-9a-zA-Z_\.]+]] = function.call @ComponentC1::@compute(%[[V0]]) : (!array.array<@N x !felt.felt>) -> !struct.struct<@ComponentC1<[@N]>>
// CHECK-NEXT:      struct.writef %[[V1]][@f1] = %[[V2]] : <@ComponentC2<[@N]>>, !struct.struct<@ComponentC1<[@N]>>
// CHECK-NEXT:      function.return %[[V1]] : !struct.struct<@ComponentC2<[@N]>>
// CHECK-NEXT:    }
// CHECK-NEXT:    function.def @constrain(%[[V3:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentC2<[@N]>>, %[[V4:[0-9a-zA-Z_\.]+]]: !array.array<@N x !felt.felt>) attributes {function.allow_constraint} {
// CHECK-NEXT:      function.return
// CHECK-NEXT:    }
// CHECK-NEXT:  }
