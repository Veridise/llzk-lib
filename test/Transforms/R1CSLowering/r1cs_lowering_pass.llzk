// RUN: llzk-opt -split-input-file -llzk-full-r1cs-lowering -verify-diagnostics %s | FileCheck --enable-var-scope %s

module attributes {veridise.lang = "llzk"} {
  // lowers constraints to be at most degree 2 polynomials
  struct.def @CmpConstraint {
    struct.field @val: !felt.type {llzk.pub}
    function.def @compute(%a: !felt.type, %b: !felt.type, %c: !felt.type) -> !struct.type<@CmpConstraint> {
      %self = struct.new : !struct.type<@CmpConstraint>
      function.return %self : !struct.type<@CmpConstraint>
    }

    function.def @constrain(%self: !struct.type<@CmpConstraint>, %a: !felt.type {llzk.pub}, %b: !felt.type, %c: !felt.type) {
      %z = felt.mul %a, %b
      %0 = felt.mul %b, %c
      %1 = felt.add %0, %z
      %7 = struct.readf %self[@val] : !struct.type<@CmpConstraint>, !felt.type
      constrain.eq %1, %z : !felt.type
      %2 = felt.add %z, %b
      constrain.eq %7, %2 : !felt.type
      function.return
    }
  }
}

// CHECK-LABEL:   r1cs.circuit @CmpConstraint inputs (
// CHECK-SAME:                                        %[[VAL_0:[0-9a-zA-Z_\.]+]]: !r1cs.signal {#r1cs.pub},
// CHECK-SAME:                                        %[[VAL_1:[0-9a-zA-Z_\.]+]]: !r1cs.signal,
// CHECK-SAME:                                        %[[VAL_2:[0-9a-zA-Z_\.]+]]: !r1cs.signal) {
// CHECK-DAG:           %[[VAL_3:[0-9a-zA-Z_\.]+]] = r1cs.def 0 : !r1cs.signal {pub = #r1cs.pub}
// CHECK-DAG:           %[[VAL_4:[0-9a-zA-Z_\.]+]] = r1cs.def 1 : !r1cs.signal
// CHECK-DAG:           %[[VAL_5:[0-9a-zA-Z_\.]+]] = r1cs.def 2 : !r1cs.signal
// CHECK-DAG:           %[[VAL_6:[0-9a-zA-Z_\.]+]] = r1cs.to_linear %[[VAL_1]] : !r1cs.signal to !r1cs.linear
// CHECK-DAG:           %[[VAL_7:[0-9a-zA-Z_\.]+]] = r1cs.to_linear %[[VAL_2]] : !r1cs.signal to !r1cs.linear
// CHECK-DAG:           %[[VAL_8:[0-9a-zA-Z_\.]+]] = r1cs.to_linear %[[VAL_4]] : !r1cs.signal to !r1cs.linear
// CHECK-DAG:           %[[VAL_9:[0-9a-zA-Z_\.]+]] = r1cs.mul_const %[[VAL_8]],  -1 : i64 : !r1cs.linear
// CHECK-DAG:           r1cs.constrain %[[VAL_6]], %[[VAL_7]], %[[VAL_9]] : !r1cs.linear
// CHECK-DAG:           %[[VAL_10:[0-9a-zA-Z_\.]+]] = r1cs.to_linear %[[VAL_0]] : !r1cs.signal to !r1cs.linear
// CHECK-DAG:           %[[VAL_11:[0-9a-zA-Z_\.]+]] = r1cs.to_linear %[[VAL_5]] : !r1cs.signal to !r1cs.linear
// CHECK-DAG:           %[[VAL_12:[0-9a-zA-Z_\.]+]] = r1cs.mul_const %[[VAL_11]],  -1 : i64 : !r1cs.linear
// CHECK-DAG:           %[[VAL_13:[0-9a-zA-Z_\.]+]] = r1cs.add %{{[0-9a-zA-Z_\.]+}}, %{{[0-9a-zA-Z_\.]+}} : !r1cs.linear
// CHECK-DAG:           r1cs.constrain %[[VAL_10]], %[[VAL_6]], %[[VAL_13]] : !r1cs.linear
// CHECK-DAG:           r1cs.constrain %[[VAL_10]], %[[VAL_6]], %[[VAL_12]] : !r1cs.linear
// CHECK-DAG:           %[[VAL_14:[0-9a-zA-Z_\.]+]] = r1cs.to_linear %[[VAL_3]] : !r1cs.signal to !r1cs.linear
// CHECK-DAG:           %[[VAL_15:[0-9a-zA-Z_\.]+]] = r1cs.mul_const %[[VAL_14]],  -1 : i64 : !r1cs.linear
// CHECK-DAG:           %[[VAL_16:[0-9a-zA-Z_\.]+]] = r1cs.add %{{[0-9a-zA-Z_\.]+}}, %{{[0-9a-zA-Z_\.]+}} : !r1cs.linear
// CHECK-DAG:           r1cs.constrain %[[VAL_10]], %[[VAL_6]], %[[VAL_16]] : !r1cs.linear
// CHECK-DAG:         }
// -----

module attributes {veridise.lang = "llzk"} {
  // lowers constraints to be at most degree 2 polynomials
  struct.def @CmpConstraint {
    struct.field @val: !felt.type {llzk.pub}
    function.def @compute(%a: !felt.type , %b: !felt.type, %c: !felt.type) -> !struct.type<@CmpConstraint> {
      %self = struct.new : !struct.type<@CmpConstraint>
      function.return %self : !struct.type<@CmpConstraint>
    }

    function.def @constrain(%self: !struct.type<@CmpConstraint>, %a: !felt.type {llzk.pub}, %b: !felt.type, %c: !felt.type) {
      %z = felt.mul %a, %b
      %0 = felt.mul %b, %c
      %1 = felt.sub %0, %z
      %2 = felt.neg %1
      %7 = struct.readf %self[@val] : !struct.type<@CmpConstraint>, !felt.type
      constrain.eq %2, %z : !felt.type
      %3 = felt.sub %z, %b
      constrain.eq %7, %3 : !felt.type
      function.return
    }
  }
}

// CHECK-LABEL:   r1cs.circuit @CmpConstraint inputs (
// CHECK-SAME:                                        %[[VAL_0:[0-9a-zA-Z_\.]+]]: !r1cs.signal {#r1cs.pub},
// CHECK-SAME:                                        %[[VAL_1:[0-9a-zA-Z_\.]+]]: !r1cs.signal,
// CHECK-SAME:                                        %[[VAL_2:[0-9a-zA-Z_\.]+]]: !r1cs.signal) {
// CHECK-DAG:           %[[VAL_3:[0-9a-zA-Z_\.]+]] = r1cs.def 0 : !r1cs.signal {pub = #r1cs.pub}
// CHECK-DAG:           %[[VAL_4:[0-9a-zA-Z_\.]+]] = r1cs.def 1 : !r1cs.signal
// CHECK-DAG:           %[[VAL_5:[0-9a-zA-Z_\.]+]] = r1cs.def 2 : !r1cs.signal
// CHECK-DAG:           %[[VAL_6:[0-9a-zA-Z_\.]+]] = r1cs.to_linear %[[VAL_1]] : !r1cs.signal to !r1cs.linear
// CHECK-DAG:           %[[VAL_7:[0-9a-zA-Z_\.]+]] = r1cs.to_linear %[[VAL_2]] : !r1cs.signal to !r1cs.linear
// CHECK-DAG:           %[[VAL_8:[0-9a-zA-Z_\.]+]] = r1cs.to_linear %[[VAL_4]] : !r1cs.signal to !r1cs.linear
// CHECK-DAG:           %[[VAL_9:[0-9a-zA-Z_\.]+]] = r1cs.mul_const %[[VAL_8]],  -1 : i64 : !r1cs.linear
// CHECK-DAG:           r1cs.constrain %[[VAL_6]], %[[VAL_7]], %[[VAL_9]] : !r1cs.linear
// CHECK-DAG:           %[[VAL_10:[0-9a-zA-Z_\.]+]] = r1cs.to_linear %[[VAL_0]] : !r1cs.signal to !r1cs.linear
// CHECK-DAG:           %[[VAL_11:[0-9a-zA-Z_\.]+]] = r1cs.to_linear %[[VAL_5]] : !r1cs.signal to !r1cs.linear
// CHECK-DAG:           %[[VAL_12:[0-9a-zA-Z_\.]+]] = r1cs.mul_const %[[VAL_11]],  -1 : i64 : !r1cs.linear
// CHECK-DAG:           %[[VAL_13:[0-9a-zA-Z_\.]+]] = r1cs.add %{{[0-9a-zA-Z_\.]+}}, %{{[0-9a-zA-Z_\.]+}} : !r1cs.linear
// CHECK-DAG:           r1cs.constrain %[[VAL_10]], %[[VAL_6]], %[[VAL_13]] : !r1cs.linear
// CHECK-DAG:           r1cs.constrain %[[VAL_10]], %[[VAL_6]], %[[VAL_12]] : !r1cs.linear
// CHECK-DAG:           %[[VAL_14:[0-9a-zA-Z_\.]+]] = r1cs.mul_const %[[VAL_6]],  -1 : i64 : !r1cs.linear
// CHECK-DAG:           %[[VAL_15:[0-9a-zA-Z_\.]+]] = r1cs.to_linear %[[VAL_3]] : !r1cs.signal to !r1cs.linear
// CHECK-DAG:           %[[VAL_16:[0-9a-zA-Z_\.]+]] = r1cs.mul_const %[[VAL_15]],  -1 : i64 : !r1cs.linear
// CHECK-DAG:           %[[VAL_17:[0-9a-zA-Z_\.]+]] = r1cs.add %{{[0-9a-zA-Z_\.]+}}, %{{[0-9a-zA-Z_\.]+}} : !r1cs.linear
// CHECK-DAG:           r1cs.constrain %[[VAL_10]], %[[VAL_6]], %[[VAL_17]] : !r1cs.linear
// CHECK-DAG:         }
