// RUN: llzk-opt -split-input-file %s 2>&1 | FileCheck --enable-var-scope %s

/// Selection of index dialect that is reasonable to use in LLZK.

function.def @f_constant() -> index {
  %0 = arith.constant 42 : index
  function.return %0: index
}
//CHECK-LABEL:  function.def @f_constant() -> index {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = arith.constant 42 : index
//CHECK-NEXT:     function.return %[[T1]] : index
//CHECK-NEXT:   }
// -----

function.def @f_add(%a: index, %b: index) -> index {
  %c = arith.addi %a, %b : index
  function.return %c: index
}
//CHECK-LABEL:  function.def @f_add
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: index, %[[A1:[0-9a-zA-Z_\.]+]]: index) -> index {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = arith.addi %[[A0]], %[[A1]] : index
//CHECK-NEXT:     function.return %[[T1]] : index
//CHECK-NEXT:   }
// -----

function.def @f_sub(%a: index, %b: index) -> index {
  %c = arith.subi %a, %b : index
  function.return %c: index
}
//CHECK-LABEL:  function.def @f_sub
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: index, %[[A1:[0-9a-zA-Z_\.]+]]: index) -> index {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = arith.subi %[[A0]], %[[A1]] : index
//CHECK-NEXT:     function.return %[[T1]] : index
//CHECK-NEXT:   }
// -----

function.def @f_mul(%a: index, %b: index) -> index {
  %c = arith.muli %a, %b : index
  function.return %c: index
}
//CHECK-LABEL:  function.def @f_mul
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: index, %[[A1:[0-9a-zA-Z_\.]+]]: index) -> index {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = arith.muli %[[A0]], %[[A1]] : index
//CHECK-NEXT:     function.return %[[T1]] : index
//CHECK-NEXT:   }
// -----

function.def @f_div(%a: index, %b: index) -> index {
  %c = arith.divui %a, %b : index
  function.return %c: index
}
//CHECK-LABEL:  function.def @f_div
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: index, %[[A1:[0-9a-zA-Z_\.]+]]: index) -> index {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = arith.divui %[[A0]], %[[A1]] : index
//CHECK-NEXT:     function.return %[[T1]] : index
//CHECK-NEXT:   }
// -----

function.def @f_eq(%a: index, %b: index) -> i1 {
  %c = arith.cmpi eq, %a, %b : index
  function.return %c: i1
}
//CHECK-LABEL:  function.def @f_eq
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: index, %[[A1:[0-9a-zA-Z_\.]+]]: index) -> i1 {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = arith.cmpi eq, %[[A0]], %[[A1]] : index
//CHECK-NEXT:     function.return %[[T1]] : i1
//CHECK-NEXT:   }
// -----

function.def @f_ne(%a: index, %b: index) -> i1 {
  %c = arith.cmpi ne, %a, %b : index
  function.return %c: i1
}
//CHECK-LABEL:  function.def @f_ne
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: index, %[[A1:[0-9a-zA-Z_\.]+]]: index) -> i1 {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = arith.cmpi ne, %[[A0]], %[[A1]] : index
//CHECK-NEXT:     function.return %[[T1]] : i1
//CHECK-NEXT:   }
// -----

function.def @f_slt(%a: index, %b: index) -> i1 {
  %c = arith.cmpi slt, %a, %b : index
  function.return %c: i1
}
//CHECK-LABEL:  function.def @f_slt
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: index, %[[A1:[0-9a-zA-Z_\.]+]]: index) -> i1 {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = arith.cmpi slt, %[[A0]], %[[A1]] : index
//CHECK-NEXT:     function.return %[[T1]] : i1
//CHECK-NEXT:   }
// -----

function.def @f_sle(%a: index, %b: index) -> i1 {
  %c = arith.cmpi sle, %a, %b : index
  function.return %c: i1
}
//CHECK-LABEL:  function.def @f_sle
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: index, %[[A1:[0-9a-zA-Z_\.]+]]: index) -> i1 {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = arith.cmpi sle, %[[A0]], %[[A1]] : index
//CHECK-NEXT:     function.return %[[T1]] : i1
//CHECK-NEXT:   }
// -----
