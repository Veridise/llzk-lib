// RUN: llzk-opt -split-input-file -verify-diagnostics %s

// expected-error@+1 {{'function.def' op expected a valid LLZK type but found 'i32'}}
function.def private @fail_01(i32)
// -----
// expected-error@+1 {{'function.def' op expected a valid LLZK type but found 'i32'}}
function.def private @fail_02(i1) -> i32
// -----
// expected-error@+1 {{'function.def' op expected a valid LLZK type but found 'i32'}}
function.def private @fail_03(i1) -> (i32, i32)
// -----
// expected-error@+1 {{'function.def' op expected a valid LLZK type but found 'i32'}}
function.def private @fail_04(i1, index, i32)
// -----
// expected-error@+1 {{'function.def' op expected a valid LLZK type but found 'none'}}
function.def @fail_05(%x: i1) -> none {
  function.return
}
// -----
// expected-error@+1 {{'function.def' op expected a valid LLZK type but found '(i1) -> i32'}}
function.def @fail_06(%x: (i1) -> i32) -> index {
  function.return
}
// -----
function.def @fail_07() {
  // expected-error@+1 {{'function.def' op expects parent op to be one of 'builtin.module, struct.def'}}
  function.def @inner() {
    function.return
  }
  function.return
}
// -----
module attributes {veridise.lang = "llzk"} {
  function.def @user() {
    // expected-error@+2 {{'function.call' op references unknown symbol "@missing_fn"}}
    // expected-error@+1 {{expected 'function.def' named "@missing_fn"}}
    function.call @missing_fn() : () -> ()
    function.return
  }
}
// -----
module { // expected-note {{unnamed 'builtin.module' here}}
  function.def @user() {
    // expected-error@+2 {{'function.call' op has ancestor 'builtin.module' without "veridise.lang" attribute or a name}}
    // expected-error@+1 {{expected 'function.def' named "@missing_fn"}}
    function.call @missing_fn() : () -> ()
    function.return
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+2 {{'function.def' op references unknown symbol "@WasNotDefined"}}
  // expected-error@+1 {{could not find 'struct.def' named "@WasNotDefined"}}
  function.def @constrain(%p: !struct.type<@WasNotDefined>) {
    function.return
  }
}
// -----
module { // expected-note {{unnamed 'builtin.module' here}}
  // expected-error@+2 {{'function.def' op has ancestor 'builtin.module' without "veridise.lang" attribute or a name}}
  // expected-error@+1 {{could not find 'struct.def' named "@MissingComponent"}}
  function.def @constrain(%p: !struct.type<@MissingComponent>) {
    function.return
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+2 {{'function.def' op references unknown symbol "@WasNotDefined"}}
  // expected-error@+1 {{could not find 'struct.def' named "@WasNotDefined"}}
  function.def @f(%0: i1, %1: i1, %2: i1, %3: i1, %4: i1, %5: i1, %6: i1, %7: !struct.type<@WasNotDefined>) {
    function.return
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+2 {{'function.def' op references unknown symbol "@WasNotDefined"}}
  // expected-error@+1 {{could not find 'struct.def' named "@WasNotDefined"}}
  function.def private @f(%0: i1, %1: i1, %2: i1, %3: i1, %4: i1, %5: i1, %6: i1) -> !struct.type<@WasNotDefined>
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+2 {{'function.def' op references unknown symbol "@WasNotDefined"}}
  // expected-error@+1 {{could not find 'struct.def' named "@WasNotDefined"}}
  function.def private @f(%0: i1, %1: i1, %2: i1, %3: i1, %4: i1, %5: i1, %6: i1) -> (!felt.type, i1, !struct.type<@WasNotDefined>)
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+8 {{'function.def' op references unknown symbol "@A"}}
  // expected-error@+7 {{could not find 'struct.def' named "@A"}}
  // expected-error@+6 {{'function.def' op references unknown symbol "@B"}}
  // expected-error@+5 {{could not find 'struct.def' named "@B"}}
  // expected-error@+4 {{'function.def' op references unknown symbol "@C"}}
  // expected-error@+3 {{could not find 'struct.def' named "@C"}}
  // expected-error@+2 {{'function.def' op references unknown symbol "@D"}}
  // expected-error@+1 {{could not find 'struct.def' named "@D"}}
  function.def private @f(%1: !struct.type<@A>, %7: !struct.type<@B>) -> (!struct.type<@C>, !struct.type<@D>)
}
// -----
module attributes {veridise.lang = "llzk"} {
  function.def @identity(%x: index) -> (index) { // expected-note {{callee defined here}}
    function.return %x : index
  }
  function.def @user(%x: !felt.type) -> (index) {
    // expected-error@+1 {{'function.call' op incorrect number of operands for callee, expected 1}}
    %1 = function.call @identity(%x, %x) : (!felt.type, !felt.type) -> (index)
    function.return %1 : index
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  function.def @identity(%x: index) -> (index) {
    function.return %x : index
  }
  function.def @user(%x: !felt.type) -> (index) {
    // expected-error@+1 {{'function.call' op operand type mismatch: expected type 'index', but found '!felt.type' for operand number 0}}
    %1 = function.call @identity(%x) : (!felt.type) -> (index)
    function.return %1: index
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  function.def @split(%x: index) -> (index, index) { // expected-note {{callee defined here}}
    %0 = arith.constant 1 : index
    function.return %x, %0 : index, index
  }
  function.def @user(%x: index) -> index {
    // expected-error@+1 {{'function.call' op incorrect number of results for callee, expected 2}}
    %1 = function.call @split(%x) : (index) -> (index)
    function.return %1 : index
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  function.def @split(%x: index) -> (index, index) {
    %0 = arith.constant 1 : index
    function.return %x, %0 : index, index
  }
  function.def @user(%x: index) -> (i1, i1) {
    // expected-error@+1 {{'function.call' op result type mismatch: expected type 'index', but found 'i1' for result number 0}}
    %1, %2 = function.call @split(%x) : (index) -> (i1, i1)
    function.return %1, %2 : i1, i1
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentA1 {
    function.def @compute() -> !struct.type<@ComponentA1> { // expected-note {{callee defined here}}
      %self = struct.new : !struct.type<@ComponentA1>
      function.return %self : !struct.type<@ComponentA1>
    }
    function.def @constrain(%self: !struct.type<@ComponentA1>) { function.return }
  }

  struct.def @ComponentA2 {
    function.def @compute(%0: !felt.type) -> !struct.type<@ComponentA2> {
      %self = struct.new : !struct.type<@ComponentA2>
      // expected-error@+1 {{'function.call' op incorrect number of operands for callee, expected 0}}
      %x = function.call @ComponentA1::@compute(%0) : (!felt.type) -> (!struct.type<@ComponentA1>)
      function.return %self : !struct.type<@ComponentA2>
    }

    function.def @constrain(%self: !struct.type<@ComponentA2>) { function.return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentB1 {
    function.def @compute() -> !struct.type<@ComponentB1> {
      %self = struct.new : !struct.type<@ComponentB1>
      function.return %self : !struct.type<@ComponentB1>
    }
    function.def @constrain(%self: !struct.type<@ComponentB1>) { function.return }
  }

  struct.def @ComponentB2 {
    function.def @compute(%0: !struct.type<@ComponentB1>) -> !struct.type<@ComponentB2> {
      %self = struct.new : !struct.type<@ComponentB2>
      function.return %self : !struct.type<@ComponentB2>
    }

    function.def @constrain(%self: !struct.type<@ComponentB2>, %0: !felt.type) {
      // expected-error@+1 {{'function.call' op operand type mismatch: expected type '!struct.type<@ComponentB1>', but found '!felt.type' for operand number 0}}
      function.call @ComponentB1::@constrain(%0) : (!felt.type) -> ()
      function.return
    }
  }
}
