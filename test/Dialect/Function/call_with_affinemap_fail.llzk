// RUN: llzk-opt -I %input_dir -split-input-file -verify-diagnostics %s

// -----
module attributes {veridise.lang = "llzk"} {
  include.from "Inputs/header_11.llzk" as @Lib

  llzk.struct @MissingInstantiations {
    function.def @compute(%n: index) -> !llzk.struct<@MissingInstantiations> {
      %self = llzk.new_struct : !llzk.struct<@MissingInstantiations>
      // expected-error@+1 {{'function.call' op map instantiation group count (0) does not match the number of affine map instantiations (1) required by the type}}
      %x = function.call @Lib::@D1::@compute() : () -> !llzk.struct<@Lib::@D1<[affine_map<(i)->(i)>]>>
      function.return %self : !llzk.struct<@MissingInstantiations>
    }

    function.def @constrain(%self: !llzk.struct<@MissingInstantiations>, %n: index) { function.return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  include.from "Inputs/header_11.llzk" as @Lib

  llzk.struct @EmptyInstantiations {
    function.def @compute(%n: index) -> !llzk.struct<@EmptyInstantiations> {
      %self = llzk.new_struct : !llzk.struct<@EmptyInstantiations>
      // expected-error@+1 {{expected '(' in operand list}}
      %x = function.call @Lib::@D1::@compute(){} : () -> !llzk.struct<@Lib::@D1<[affine_map<(i)->(i)>]>>
      function.return %self : !llzk.struct<@EmptyInstantiations>
    }

    function.def @constrain(%self: !llzk.struct<@EmptyInstantiations>, %n: index) { function.return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  include.from "Inputs/header_11.llzk" as @Lib

  llzk.struct @TooFewInstantiations {
    function.def @compute(%n: index) -> !llzk.struct<@TooFewInstantiations> {
      %self = llzk.new_struct : !llzk.struct<@TooFewInstantiations>
      // expected-error@+1 {{'function.call' op map instantiation group count (1) does not match the number of affine map instantiations (2) required by the type}}
      %x = function.call @Lib::@D2::@compute(){(%n)[]} : () -> !llzk.struct<@Lib::@D2<[affine_map<(i)->(i)>, affine_map<(i)->(i)>]>>
      function.return %self : !llzk.struct<@TooFewInstantiations>
    }

    function.def @constrain(%self: !llzk.struct<@TooFewInstantiations>, %n: index) { function.return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  include.from "Inputs/header_11.llzk" as @Lib

  llzk.struct @TooManyInstantiations {
    function.def @compute(%n: index) -> !llzk.struct<@TooManyInstantiations> {
      %self = llzk.new_struct : !llzk.struct<@TooManyInstantiations>
      // expected-error@+1 {{'function.call' op map instantiation group count (2) does not match the number of affine map instantiations (1) required by the type}}
      %x = function.call @Lib::@D1::@compute(){(%n)[], ()[%n]} : () -> !llzk.struct<@Lib::@D1<[affine_map<(i)->(i)>]>>
      function.return %self : !llzk.struct<@TooManyInstantiations>
    }

    function.def @constrain(%self: !llzk.struct<@TooManyInstantiations>, %n: index) { function.return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  include.from "Inputs/header_11.llzk" as @Lib

  llzk.struct @TooFewDimensions {
    function.def @compute(%n: index) -> !llzk.struct<@TooFewDimensions> {
      %self = llzk.new_struct : !llzk.struct<@TooFewDimensions>
      // expected-error@+1 {{'function.call' op instantiation of map 0 expected 1 but found 0 dimension values in ()}}
      %x = function.call @Lib::@D1::@compute(){()[%n]} : () -> !llzk.struct<@Lib::@D1<[affine_map<(i)->(i)>]>>
      function.return %self : !llzk.struct<@TooFewDimensions>
    }

    function.def @constrain(%self: !llzk.struct<@TooFewDimensions>, %n: index) { function.return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  include.from "Inputs/header_11.llzk" as @Lib

  llzk.struct @TooManyDimensions {
    function.def @compute(%a: index, %b: index) -> !llzk.struct<@TooManyDimensions> {
      %self = llzk.new_struct : !llzk.struct<@TooManyDimensions>
      // expected-error@+1 {{'function.call' op instantiation of map 0 expected 1 but found 2 dimension values in ()}}
      %x = function.call @Lib::@D1::@compute(){ (%a,%b)[] } : () -> !llzk.struct<@Lib::@D1<[affine_map<(i)->(i)>]>>
      function.return %self : !llzk.struct<@TooManyDimensions>
    }

    function.def @constrain(%self: !llzk.struct<@TooManyDimensions>, %a: index, %b: index) { function.return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  include.from "Inputs/header_11.llzk" as @Lib

  llzk.struct @TooFewSymbols {
    function.def @compute(%n: index) -> !llzk.struct<@TooFewSymbols> {
      %self = llzk.new_struct : !llzk.struct<@TooFewSymbols>
      // expected-error@+1 {{'function.call' op instantiation of map 0 expected 1 but found 0 symbol values in []}}
      %x = function.call @Lib::@D1::@compute(){(%n)[]} : () -> !llzk.struct<@Lib::@D1<[affine_map<(i)[k] -> (5*i+k)>]>>
      function.return %self : !llzk.struct<@TooFewSymbols>
    }

    function.def @constrain(%self: !llzk.struct<@TooFewSymbols>, %n: index) { function.return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  include.from "Inputs/header_11.llzk" as @Lib

  llzk.struct @TooManySymbols {
    function.def @compute(%a: index, %b: index, %c: index) -> !llzk.struct<@TooManySymbols> {
      %self = llzk.new_struct : !llzk.struct<@TooManySymbols>
      // expected-error@+1 {{'function.call' op instantiation of map 0 expected 1 but found 2 symbol values in []}}
      %x = function.call @Lib::@D1::@compute(){ (%a)[%b, %c] } : () -> !llzk.struct<@Lib::@D1<[affine_map<(i)[k] -> (5*i+k)>]>>
      function.return %self : !llzk.struct<@TooManySymbols>
    }

    function.def @constrain(%self: !llzk.struct<@TooManySymbols>, %a: index, %b: index, %c: index) { function.return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @CallUnknownConstrainWithMapInit<[@S]> {
    function.def @compute(%0: !llzk.tvar<@S>) -> !llzk.struct<@CallUnknownConstrainWithMapInit<[@S]>> {
      %self = llzk.new_struct : !llzk.struct<@CallUnknownConstrainWithMapInit<[@S]>>
      function.return %self : !llzk.struct<@CallUnknownConstrainWithMapInit<[@S]>>
    }

    function.def @constrain(%self: !llzk.struct<@CallUnknownConstrainWithMapInit<[@S]>>, %0: !llzk.tvar<@S>) {
      %i = arith.constant 28 : index
      // expected-error@+1 {{'function.call' op can only have affine map instantiations when targeting a "@compute" function}}
      function.call @S::@constrain(%0){ (%i) } : (!llzk.tvar<@S>) -> ()
      function.return
    }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  include.from "Inputs/header_11.llzk" as @Lib

  llzk.struct @CallKnownConstrainWithMapInit {
    function.def @compute(%0: !llzk.struct<@Lib::@D0>) -> !llzk.struct<@CallKnownConstrainWithMapInit> {
      %self = llzk.new_struct : !llzk.struct<@CallKnownConstrainWithMapInit>
      function.return %self : !llzk.struct<@CallKnownConstrainWithMapInit>
    }

    function.def @constrain(%self: !llzk.struct<@CallKnownConstrainWithMapInit>, %0: !llzk.struct<@Lib::@D0>) {
      %i = arith.constant 28 : index
      // expected-error@+1 {{'function.call' op can only have affine map instantiations when targeting a "@compute" function}}
      function.call @Lib::@D0::@constrain(%0){ (%i) } : (!llzk.struct<@Lib::@D0>) -> ()
      function.return
    }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  function.def @global_id(%0: index) -> index {
    function.return %0 : index
  }

  llzk.struct @CallKnownGlobalWithMapInit {
    function.def @compute() -> !llzk.struct<@CallKnownGlobalWithMapInit> {
      %self = llzk.new_struct : !llzk.struct<@CallKnownGlobalWithMapInit>
      %i = arith.constant 28 : index
      // expected-error@+1 {{'function.call' op can only have affine map instantiations when targeting a "@compute" function}}
      %0 = function.call @global_id(%i){ (%i) } : (index) -> (index)
      function.return %self : !llzk.struct<@CallKnownGlobalWithMapInit>
    }

    function.def @constrain(%self: !llzk.struct<@CallKnownGlobalWithMapInit>) { function.return }
  }
}

// -----
module attributes {veridise.lang = "llzk"} {
  include.from "Inputs/header_11.llzk" as @Lib

  llzk.struct @TooFewResults {
    function.def @compute(%a: index, %b: index, %c: index) -> !llzk.struct<@TooManySymbols> {
      %self = llzk.new_struct : !llzk.struct<@TooManySymbols>
      // expected-error@+1 {{AffineMapAttr must yield a single result, but found 0 results}}
      %x = function.call @Lib::@D1::@compute(){ (%a)[%b, %c] } : () -> !llzk.struct<@Lib::@D1<[affine_map<(i)[k, j] -> ()>]>>
      function.return %self : !llzk.struct<@TooManySymbols>
    }

    function.def @constrain(%self: !llzk.struct<@TooManySymbols>, %a: index, %b: index, %c: index) { function.return }
  }
}

// -----
module attributes {veridise.lang = "llzk"} {
  include.from "Inputs/header_11.llzk" as @Lib

  llzk.struct @TooManyResults {
    function.def @compute(%a: index, %b: index, %c: index) -> !llzk.struct<@TooManySymbols> {
      %self = llzk.new_struct : !llzk.struct<@TooManySymbols>
      // expected-error@+1 {{AffineMapAttr must yield a single result, but found 5 results}}
      %x = function.call @Lib::@D1::@compute(){ (%a)[%b, %c] } : () -> !llzk.struct<@Lib::@D1<[affine_map<(i)[k, j] -> (5*i+k, j, i, k, 7)>]>>
      function.return %self : !llzk.struct<@TooManySymbols>
    }

    function.def @constrain(%self: !llzk.struct<@TooManySymbols>, %a: index, %b: index, %c: index) { function.return }
  }
}
