// RUN: llzk-opt -split-input-file %s 2>&1 | FileCheck --enable-var-scope %s

module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentE1<[@A]> {
    function.def @compute(%0: !felt.type) -> !struct.type<@ComponentE1<[@A]>> {
      %self = struct.new : !struct.type<@ComponentE1<[@A]>>
      function.return %self : !struct.type<@ComponentE1<[@A]>>
    }
    function.def @constrain(%self: !struct.type<@ComponentE1<[@A]>>, %0: !felt.type) {
      %1 = poly.read_const @A : !felt.type
      constrain.eq %0, %1 : !felt.type
      function.return
    }
  }
}
//CHECK-LABEL: module attributes {veridise.lang = "llzk"} {
//CHECK-NEXT:    struct.def @ComponentE1<[@A]> {
//CHECK-NEXT:      function.def @compute(%arg0: !felt.type) -> !struct.type<@ComponentE1<[@A]>> attributes {function.allow_witness} {
//CHECK-NEXT:        %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentE1<[@A]>>
//CHECK-NEXT:        function.return %[[SELF]] : !struct.type<@ComponentE1<[@A]>>
//CHECK-NEXT:      }
//CHECK-NEXT:      function.def @constrain(%arg0: !struct.type<@ComponentE1<[@A]>>, %arg1: !felt.type) attributes {function.allow_constraint} {
//CHECK-NEXT:        %[[T0:[0-9a-zA-Z_\.]+]] = poly.read_const @A : !felt.type
//CHECK-NEXT:        constrain.eq %arg1, %[[T0]] : !felt.type, !felt.type
//CHECK-NEXT:        function.return
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-NEXT:  }
