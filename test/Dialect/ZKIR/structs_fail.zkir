// RUN: zkir-opt -split-input-file -verify-diagnostics %s

zkir.struct @ComponentD<[@B, @D, @C]> {
  // expected-error@+1 {{'zkir.struct' op expects parent op 'builtin.module'}}
  zkir.struct @ComponentA {}
}
// -----
zkir.func @identity(%x: !zkir.felt) -> !zkir.felt {
  // expected-error@+1 {{'zkir.struct' op expects parent op 'builtin.module'}}
  zkir.struct @ComponentA {}
  return %x: !zkir.felt
}
// -----
zkir.struct @ComponentB<[@B, @D, @C]> {
  // expected-error@+1 {{'zkir.struct' op must define only 'compute' and 'constrain' functions; found 'invalidname'}}
  func @invalidname(%a: !zkir.felt, %b: !zkir.felt) {
    return
  }
}
// -----
zkir.struct @ComponentE<[@B, @D, @C]> {
  // expected-note@+1 {{see existing symbol definition here}}
  func @compute(%a: !zkir.felt, %b: !zkir.felt) {
    return
  }
  // expected-error@+1 {{redefinition of symbol named 'compute'}}
  func @compute() {
    return
  }
}
// -----
// expected-error@+1 {{'zkir.struct' op must define exactly one 'constrain' function}}
zkir.struct @ComponentF<[@B, @D, @C]> {
  func @compute(%a: !zkir.felt, %b: !zkir.felt) {
    return
  }
}
// -----
zkir.struct @ComponentG<[@B, @D, @C]> {
  func @compute() {
    return
  }
  // expected-error@+1 {{'builtin.module' op invalid operation in 'struct'; only 'field' and 'func' operations are permitted}}
  builtin.module {
  }
}
// -----
zkir.struct @ComponentH {
  zkir.field @f2 : !zkir.felt // expected-note {{see existing symbol definition here}}
  // expected-error@+1 {{redefinition of symbol named 'f2'}}
  zkir.field @f2 : !zkir.felt

  func @compute() { return }
  func @constrain()  { return }
}
// -----
module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentJ {
    func @compute() { return }
    func @constrain()  { return }
  }

  zkir.func @user() {
    // expected-error@+2 {{symbol "@ComponentJ" references a 'zkir.struct' but expected a 'zkir.func'}}
    // expected-error@+1 {{no 'zkir.func' named "@ComponentJ"}}
    zkir.call @ComponentJ() : () -> ()
    return
  }
}
// -----

