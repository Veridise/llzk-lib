// RUN: zkir-opt -split-input-file -verify-diagnostics %s

zkir.struct @ComponentD<[@B, @D, @C]> {
  // expected-error@+1 {{'zkir.struct' op expects parent op 'builtin.module'}}
  zkir.struct @ComponentA {}
}
// -----
func.func @identity(%x: !zkir.felt) -> !zkir.felt {
  // expected-error@+1 {{'zkir.struct' op expects parent op 'builtin.module'}}
  zkir.struct @ComponentA {}
  return %x: !zkir.felt
}
// -----
zkir.struct @ComponentB<[@B, @D, @C]> {
  // expected-error@+1 {{'zkir.struct' op must define only 'compute' and 'constrain' functions; found 'invalidname'}}
  func.func public @invalidname(%a: !zkir.felt, %b: !zkir.felt) {
    return
  }
}
// -----
zkir.struct @ComponentE<[@B, @D, @C]> {
  // expected-note@+1 {{see existing symbol definition here}}
  func.func public @compute(%a: !zkir.felt, %b: !zkir.felt) {
    return
  }
  // expected-error@+1 {{redefinition of symbol named 'compute'}}
  func.func public @compute() {
    return
  }
}
// -----
// expected-error@+1 {{'zkir.struct' op must define exactly one 'constrain' function}}
zkir.struct @ComponentF<[@B, @D, @C]> {
  func.func public @compute(%a: !zkir.felt, %b: !zkir.felt) {
    return
  }
}
// -----
zkir.struct @ComponentG<[@B, @D, @C]> {
  func.func public @compute() {
    return
  }
  // expected-error@+1 {{'builtin.module' op invalid operation in 'struct'; only 'field' and 'func' operations are permitted}}
  builtin.module {
  }
}
// -----
zkir.struct @ComponentH {
  zkir.field @f2 : !zkir.felt // expected-note {{see existing symbol definition here}}
  // expected-error@+1 {{redefinition of symbol named 'f2'}}
  zkir.field @f2 : !zkir.felt

  func.func public @compute() { return }
  func.func public @constrain()  { return }
}
// -----
zkir.struct @ComponentJ {
  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@WasNotDefined>) {
    // expected-error@+1 {{'zkir.fref' op undefined component: '!zkir.struct<@WasNotDefined>'}}
    %0 = zkir.fref %p[@f2] : !zkir.struct<@WasNotDefined> -> !zkir.felt
    return
  }
}
// -----
zkir.struct @ComponentK {
  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@ComponentK>) {
    // expected-error@+1 {{'zkir.fref' op undefined struct field: @f2}}
    %0 = zkir.fref %p[@f2] : !zkir.struct<@ComponentK> -> !zkir.felt
    return
  }
}
// -----
zkir.struct @ComponentL {
  zkir.field @f2 : index

  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@ComponentL>) {
    // expected-error@+1 {{'zkir.fref' op field ref has wrong type; expected 'index', got '!zkir.felt}}
    %0 = zkir.fref %p[@f2] : !zkir.struct<@ComponentL> -> !zkir.felt
    return
  }
}
// -----
zkir.struct @ComponentM {
  zkir.field @f2 : index

  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@ComponentM>) { // expected-note {{prior use here}}
    // expected-error@+1 {{use of value '%p' expects different type than prior uses: '!zkir.struct<@WrongComponent>' vs '!zkir.struct<@ComponentM>'}}
    %0 = zkir.fref %p[@f2] : !zkir.struct<@WrongComponent> -> index
    return
  }
}
// -----
zkir.struct @ComponentN {
  zkir.field @f2 : index

  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@WrongComponent>) { // expected-note {{prior use here}}
    // expected-error@+1 {{use of value '%p' expects different type than prior uses: '!zkir.struct<@ComponentN>' vs '!zkir.struct<@WrongComponent>'}}
    %0 = zkir.fref %p[@f2] : !zkir.struct<@ComponentN> -> index
    return
  }
}
// -----
