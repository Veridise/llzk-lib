// RUN: zkir-opt -split-input-file -verify-diagnostics %s

module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentD<[@B, @D, @C]> {
    // expected-error@+1 {{'zkir.struct' op expects parent op 'builtin.module'}}
    zkir.struct @ComponentA {}
  }
}
// -----
module attributes {veridise.lang = "zkir"} {
  zkir.func @identity(%x: !zkir.felt) -> !zkir.felt {
    // expected-error@+1 {{'zkir.struct' op expects parent op 'builtin.module'}}
    zkir.struct @ComponentA {}
    return %x: !zkir.felt
  }
}
// -----
module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentB<[@B, @D, @C]> {
    // expected-error@+1 {{'zkir.struct' op must define only 'compute' and 'constrain' functions; found 'invalidname'}}
    func @invalidname(%a: !zkir.felt, %b: !zkir.felt) {
      return
    }
  }
}
// -----
module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentE<[@B, @D, @C]> {
    // expected-note@+1 {{see existing symbol definition here}}
    func @compute(%a: !zkir.felt, %b: !zkir.felt) -> !zkir.struct<@ComponentE> {
      %self = new_struct : !zkir.struct<@ComponentE>
      return %self : !zkir.struct<@ComponentE>
    }
    // expected-error@+1 {{redefinition of symbol named 'compute'}}
    func @compute() -> !zkir.struct<@ComponentE> {
      %self = new_struct : !zkir.struct<@ComponentE>
      return %self : !zkir.struct<@ComponentE>
    }
  }
}
// -----
module attributes {veridise.lang = "zkir"} {
  // expected-error@+1 {{'zkir.struct' op must define exactly one 'constrain' function}}
  zkir.struct @ComponentF<[@B, @D, @C]> {
    func @compute(%a: !zkir.felt, %b: !zkir.felt) -> !zkir.struct<@ComponentF> {
      %self = new_struct : !zkir.struct<@ComponentF>
      return %self : !zkir.struct<@ComponentF>
    }
  }
}
// -----
module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentG<[@B, @D, @C]> {
    func @compute() -> !zkir.struct<@ComponentG> {
      %self = new_struct : !zkir.struct<@ComponentG>
      return %self : !zkir.struct<@ComponentG>
    }
    // expected-error@+1 {{'builtin.module' op invalid operation in 'struct'; only 'field' and 'func' operations are permitted}}
    builtin.module {
    }
  }
}
// -----
module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentH {
    zkir.field @f2 : !zkir.felt // expected-note {{see existing symbol definition here}}
    // expected-error@+1 {{redefinition of symbol named 'f2'}}
    zkir.field @f2 : !zkir.felt

    func @compute() -> !zkir.struct<@ComponentH> {
      %self = new_struct : !zkir.struct<@ComponentH>
      return %self : !zkir.struct<@ComponentH>
    }
    func @constrain(%self: !zkir.struct<@ComponentH>)  { return }
  }
}
// -----
module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentJ {
    func @compute() -> !zkir.struct<@ComponentJ> {
      %self = new_struct : !zkir.struct<@ComponentJ>
      return %self : !zkir.struct<@ComponentJ>
    }
    func @constrain(%self: !zkir.struct<@ComponentJ>)  { return }
  }

  zkir.func @user() {
    // expected-error@+2 {{symbol "@ComponentJ" references a 'zkir.struct' but expected a 'zkir.func'}}
    // expected-error@+1 {{no 'zkir.func' named "@ComponentJ"}}
    zkir.call @ComponentJ() : () -> ()
    return
  }
}
// -----
module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentK {
    // expected-error@+2 {{'zkir.field' op references unknown symbol "@Missing"}}
    // expected-error@+1 {{no 'zkir.struct' named "@Missing"}}
    zkir.field @f : !zkir.struct<@Missing>

    func @compute() -> !zkir.struct<@ComponentK> {
      %self = new_struct : !zkir.struct<@ComponentK>
      return %self : !zkir.struct<@ComponentK>
    }
    func @constrain(%self: !zkir.struct<@ComponentK>)  { return }
  }
}
// -----
module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentL {
    // expected-error@+2 {{'zkir.field' op references unknown symbol "@Missing"}}
    // expected-error@+1 {{no 'zkir.struct' named "@Missing"}}
    zkir.field @f : !zkir.array<2x3x2 x !zkir.struct<@Missing>>

    func @compute() -> !zkir.struct<@ComponentL> {
      %self = new_struct : !zkir.struct<@ComponentL>
      return %self : !zkir.struct<@ComponentL>
    }
    func @constrain(%self: !zkir.struct<@ComponentL>)  { return }
  }
}
// -----
module attributes {veridise.lang = "zkir"} {
  module @path{}
  zkir.struct @ComponentM {
    // expected-error@+2 {{'zkir.field' op references unknown symbol "@path::@to::@Missing"}}
    // expected-error@+1 {{no 'zkir.struct' named "@path::@to::@Missing"}}
    zkir.field @f : !zkir.array<2x3x2 x !zkir.struct<@path::@to::@Missing>>

    func @compute() -> !zkir.struct<@ComponentM> {
      %self = new_struct : !zkir.struct<@ComponentM>
      return %self : !zkir.struct<@ComponentM>
    }
    func @constrain(%self: !zkir.struct<@ComponentM>)  { return }
  }
}
