// RUN: zkir-opt -split-input-file %s 2>&1 | FileCheck %s

zkir.struct @ComponentA {
  func @compute(%a: !zkir.felt) {
    return
  }

  func @constrain(%a: !zkir.felt) {
    return
  }
}
//CHECK-LABEL:  zkir.struct @ComponentA {
//CHECK-NEXT:     func @compute(%arg0: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%arg0: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

zkir.struct @ComponentB<[]> {
  func @compute(%a: index) {
    return
  }

  func @constrain(%a: index) {
    return
  }
}
//CHECK-LABEL:  zkir.struct @ComponentB<[]> {
//CHECK-NEXT:     func @compute(%arg0: index) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%arg0: index) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

zkir.struct @ComponentC<[@A]> {
  func @constrain(%a: !zkir.felt, %b: !zkir.felt) { return }
  func @compute(%a: !zkir.felt, %b: !zkir.felt) { return }
}
//CHECK-LABEL:  zkir.struct @ComponentC<[@A]> {
//CHECK-NEXT:     func @constrain(%arg0: !zkir.felt, %arg1: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @compute(%arg0: !zkir.felt, %arg1: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

zkir.struct @ComponentD<[@B, @D, @C]> {
  func @constrain(%a: !zkir.felt, %b: !zkir.felt) {
    return
  }

  func @compute(%a: !zkir.felt, %b: !zkir.felt) {
    return
  }
}
//CHECK-LABEL:  zkir.struct @ComponentD<[@B, @D, @C]> {
//CHECK-NEXT:     func @constrain(%arg0: !zkir.felt, %arg1: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @compute(%arg0: !zkir.felt, %arg1: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

zkir.struct @ComponentE<[@B, @D, @C]> {
  zkir.field @f1 : !zkir.felt
  zkir.field @f2 : !zkir.felt {zkir.pub}

  func @compute(%a: !zkir.felt, %b: !zkir.felt) {
    return
  }

  func @constrain(%a: !zkir.felt, %b: !zkir.felt) {
    return
  }
}
//CHECK-LABEL:  zkir.struct @ComponentE<[@B, @D, @C]> {
//CHECK-NEXT:     field @f1 : !zkir.felt
//CHECK-NEXT:     field @f2 : !zkir.felt {zkir.pub}
//CHECK-NEXT:     func @compute(%arg0: !zkir.felt, %arg1: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%arg0: !zkir.felt, %arg1: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

zkir.struct @ComponentG1 {
  func @compute() { return }
  func @constrain(%a: !zkir.felt) { return }
}

zkir.struct @ComponentG2 {
  zkir.field @f2 : !zkir.struct<@ComponentG1>

  func @compute() {
    return
  }

  func @constrain() {
    %b = zkir.nondetfelt
    return
  }
}
//CHECK-LABEL:  zkir.struct @ComponentG1 {
//CHECK-NEXT:     func @compute() {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%[[A0:[0-9a-zA-Z_\.]+]]: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
//CHECK-LABEL:  zkir.struct @ComponentG2 {
//CHECK-NEXT:     field @f2 : !zkir.struct<@ComponentG1>
//CHECK-NEXT:     func @compute() {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain() {
//CHECK-NEXT:       %felt_nondet = nondetfelt
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

zkir.struct @ComponentH {
  func @compute(%self: !zkir.struct<@ComponentH>) {
    return
  }

  func @constrain(%self: !zkir.struct<@ComponentH>) {
    call @constrain(%self) : (!zkir.struct<@ComponentH>) -> ()
    return
  }
}
//CHECK-LABEL:  zkir.struct @ComponentH {
//CHECK-NEXT:     func @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !zkir.struct<@ComponentH>) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%[[A0:[0-9a-zA-Z_\.]+]]: !zkir.struct<@ComponentH>) {
//CHECK-NEXT:       call @constrain(%[[A0]]) : (!zkir.struct<@ComponentH>) -> ()
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

zkir.struct @ComponentJ1 {
  field @f1 : !zkir.felt

  func @compute(%self: !zkir.struct<@ComponentJ1>, %p: !zkir.felt) { return }
  func @constrain(%self: !zkir.struct<@ComponentJ1>, %p: !zkir.felt) { return }
}

zkir.struct @ComponentJ2 {
  field @f2 : !zkir.felt
  field @f3 : !zkir.struct<@ComponentJ1>

  func @compute(%self: !zkir.struct<@ComponentJ2>) {
    return
  }

  func @constrain(%self: !zkir.struct<@ComponentJ2>) {
    %a = readf %self[@f2] : !zkir.struct<@ComponentJ2>, !zkir.felt
    %b = readf %self[@f3] : !zkir.struct<@ComponentJ2>, !zkir.struct<@ComponentJ1>
    call @ComponentJ1::@constrain(%b, %a) : (!zkir.struct<@ComponentJ1>, !zkir.felt) -> ()
    return
  }
}
//CHECK-LABEL:  zkir.struct @ComponentJ1 {
//CHECK-NEXT:     field @f1 : !zkir.felt
//CHECK-NEXT:     func @compute(%arg0: !zkir.struct<@ComponentJ1>, %arg1: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%arg0: !zkir.struct<@ComponentJ1>, %arg1: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
//CHECK-LABEL:  zkir.struct @ComponentJ2 {
//CHECK-NEXT:     field @f2 : !zkir.felt
//CHECK-NEXT:     field @f3 : !zkir.struct<@ComponentJ1>
//CHECK-NEXT:     func @compute(%arg0: !zkir.struct<@ComponentJ2>) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%arg0: !zkir.struct<@ComponentJ2>) {
//CHECK-NEXT:       %0 = readf %arg0[@f2] : <@ComponentJ2>, !zkir.felt
//CHECK-NEXT:       %1 = readf %arg0[@f3] : <@ComponentJ2>, !zkir.struct<@ComponentJ1>
//CHECK-NEXT:       call @ComponentJ1::@constrain(%1, %0) : (!zkir.struct<@ComponentJ1>, !zkir.felt) -> ()
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

zkir.func @identity(%x: !zkir.felt) -> !zkir.felt {
  return %x: !zkir.felt
}

zkir.struct @ComponentK {
  func @compute(%self: !zkir.struct<@ComponentK>) {
    return
  }

  func @constrain(%self: !zkir.struct<@ComponentK>, %a: !zkir.felt) {
    call @identity(%a) : (!zkir.felt) -> (!zkir.felt)
    return
  }
}
//CHECK-LABEL:  zkir.func @identity(%arg0: !zkir.felt) -> !zkir.felt {
//CHECK-NEXT:     return %arg0 : !zkir.felt
//CHECK-NEXT:   }
//CHECK-LABEL:  zkir.struct @ComponentK {
//CHECK-NEXT:     func @compute(%arg0: !zkir.struct<@ComponentK>) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%arg0: !zkir.struct<@ComponentK>, %arg1: !zkir.felt) {
//CHECK-NEXT:       %0 = call @identity(%arg1) : (!zkir.felt) -> !zkir.felt
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

zkir.struct @ComponentM {
  func @compute(%p: !zkir.felt) -> !zkir.struct<@ComponentM> {
    %self = new_struct : !zkir.struct<@ComponentM>
    // initialize all fields of `%self` here
    return %self : !zkir.struct<@ComponentM>
  }
  func @constrain(%self: !zkir.struct<@ComponentM>, %p: !zkir.felt) { return }
}
//CHECK-LABEL:   zkir.struct @ComponentM {
//CHECK-NEXT:      func @compute(%arg0: !zkir.felt) -> !zkir.struct<@ComponentM> {
//CHECK-NEXT:        %self = new_struct : <@ComponentM>
//CHECK-NEXT:        return %self : !zkir.struct<@ComponentM>
//CHECK-NEXT:      }
//CHECK-NEXT:      func @constrain(%arg0: !zkir.struct<@ComponentM>, %arg1: !zkir.felt) {
//CHECK-NEXT:        return
//CHECK-NEXT:      }
//CHECK-NEXT:    }
// -----
