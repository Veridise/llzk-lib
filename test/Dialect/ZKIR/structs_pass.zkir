// RUN: zkir-opt -split-input-file %s 2>&1 | FileCheck %s

module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentA {
    func @compute(%a: !zkir.felt) -> !zkir.struct<@ComponentA> {
      %self = new_struct : !zkir.struct<@ComponentA>
      return %self : !zkir.struct<@ComponentA>
    }

    func @constrain(%self: !zkir.struct<@ComponentA>, %a: !zkir.felt) {
      return
    }
  }
}
//CHECK-LABEL:  zkir.struct @ComponentA {
//CHECK-NEXT:     func @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !zkir.felt) -> !zkir.struct<@ComponentA> {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentA>
//CHECK-NEXT:       return %[[SELF]] : !zkir.struct<@ComponentA>
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !zkir.struct<@ComponentA>, %[[A0:[0-9a-zA-Z_\.]+]]: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentB<[]> {
    func @compute(%a: index) -> !zkir.struct<@ComponentB> {
      %self = new_struct : !zkir.struct<@ComponentB>
      return %self : !zkir.struct<@ComponentB>
    }

    func @constrain(%self: !zkir.struct<@ComponentB>, %a: index) {
      return
    }
  }
}
//CHECK-LABEL:  zkir.struct @ComponentB<[]> {
//CHECK-NEXT:     func @compute(%[[A0:[0-9a-zA-Z_\.]+]]: index) -> !zkir.struct<@ComponentB> {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentB>
//CHECK-NEXT:       return %[[SELF]] : !zkir.struct<@ComponentB>
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !zkir.struct<@ComponentB>, %[[A0:[0-9a-zA-Z_\.]+]]: index) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentC<[@A]> {
    func @constrain(%self: !zkir.struct<@ComponentC>, %a: !zkir.felt, %b: !zkir.felt) { return }
    func @compute(%a: !zkir.felt, %b: !zkir.felt) -> !zkir.struct<@ComponentC> {
      %self = new_struct : !zkir.struct<@ComponentC>
      return %self : !zkir.struct<@ComponentC>
    }
  }
}
//CHECK-LABEL:  zkir.struct @ComponentC<[@A]> {
//CHECK-NEXT:     func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !zkir.struct<@ComponentC>,
//CHECK-SAME:     %[[A0:[0-9a-zA-Z_\.]+]]: !zkir.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !zkir.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !zkir.felt) -> !zkir.struct<@ComponentC> {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentC>
//CHECK-NEXT:       return %[[SELF]] : !zkir.struct<@ComponentC>
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentD<[@B, @D, @C]> {
    func @constrain(%self: !zkir.struct<@ComponentD>, %a: !zkir.felt, %b: !zkir.felt) {
      return
    }

    func @compute(%a: !zkir.felt, %b: !zkir.felt) -> !zkir.struct<@ComponentD> {
      %self = new_struct : !zkir.struct<@ComponentD>
      return %self : !zkir.struct<@ComponentD>
    }
  }
}
//CHECK-LABEL:  zkir.struct @ComponentD<[@B, @D, @C]> {
//CHECK-NEXT:     func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !zkir.struct<@ComponentD>,
//CHECK-SAME:     %[[A0:[0-9a-zA-Z_\.]+]]: !zkir.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !zkir.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !zkir.felt) -> !zkir.struct<@ComponentD> {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentD>
//CHECK-NEXT:       return %[[SELF]] : !zkir.struct<@ComponentD>
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentE<[@B, @D, @C]> {
    zkir.field @f1 : !zkir.felt
    zkir.field @f2 : !zkir.felt {zkir.pub}

    func @compute(%a: !zkir.felt, %b: !zkir.felt) -> !zkir.struct<@ComponentE> {
      %self = new_struct : !zkir.struct<@ComponentE>
      return %self : !zkir.struct<@ComponentE>
    }

    func @constrain(%self: !zkir.struct<@ComponentE>, %a: !zkir.felt, %b: !zkir.felt) {
      return
    }
  }
}
//CHECK-LABEL:  zkir.struct @ComponentE<[@B, @D, @C]> {
//CHECK-NEXT:     field @f1 : !zkir.felt
//CHECK-NEXT:     field @f2 : !zkir.felt {zkir.pub}
//CHECK-NEXT:     func @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !zkir.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !zkir.felt) -> !zkir.struct<@ComponentE> {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentE>
//CHECK-NEXT:       return %[[SELF]] : !zkir.struct<@ComponentE>
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !zkir.struct<@ComponentE>,
//CHECK-SAME:     %[[A0:[0-9a-zA-Z_\.]+]]: !zkir.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentG1 {
    func @compute() -> !zkir.struct<@ComponentG1> {
      %self = new_struct : !zkir.struct<@ComponentG1>
      return %self : !zkir.struct<@ComponentG1>
    }
    func @constrain(%self: !zkir.struct<@ComponentG1>, %a: !zkir.felt) { return }
  }

  zkir.struct @ComponentG2 {
    zkir.field @f2 : !zkir.struct<@ComponentG1>

    func @compute() -> !zkir.struct<@ComponentG2> {
      %self = new_struct : !zkir.struct<@ComponentG2>
      return %self : !zkir.struct<@ComponentG2>
    }

    func @constrain(%self: !zkir.struct<@ComponentG2>) {
      %b = zkir.nondetfelt
      return
    }
  }
}
//CHECK-LABEL:  zkir.struct @ComponentG1 {
//CHECK-NEXT:     func @compute() -> !zkir.struct<@ComponentG1> {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentG1>
//CHECK-NEXT:       return %[[SELF]] : !zkir.struct<@ComponentG1>
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !zkir.struct<@ComponentG1>, %[[A0:[0-9a-zA-Z_\.]+]]: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
//CHECK-LABEL:  zkir.struct @ComponentG2 {
//CHECK-NEXT:     field @f2 : !zkir.struct<@ComponentG1>
//CHECK-NEXT:     func @compute() -> !zkir.struct<@ComponentG2> {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentG2>
//CHECK-NEXT:       return %[[SELF]] : !zkir.struct<@ComponentG2>
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !zkir.struct<@ComponentG2>) {
//CHECK-NEXT:       %felt_nondet = nondetfelt
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentH {
    func @compute() -> !zkir.struct<@ComponentH> {
      %self = new_struct : !zkir.struct<@ComponentH>
      return %self : !zkir.struct<@ComponentH>
    }

    func @constrain(%self: !zkir.struct<@ComponentH>) {
      call @ComponentH::@constrain(%self) : (!zkir.struct<@ComponentH>) -> ()
      return
    }
  }
}
//CHECK-LABEL:  zkir.struct @ComponentH {
//CHECK-NEXT:     func @compute() -> !zkir.struct<@ComponentH> {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentH>
//CHECK-NEXT:       return %[[SELF]] : !zkir.struct<@ComponentH>
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !zkir.struct<@ComponentH>) {
//CHECK-NEXT:       call @ComponentH::@constrain(%[[SELF]]) : (!zkir.struct<@ComponentH>) -> ()
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentJ1 {
    field @f1 : !zkir.felt

    func @compute(%p: !zkir.felt) -> !zkir.struct<@ComponentJ1> {
      %self = new_struct : !zkir.struct<@ComponentJ1>
      return %self : !zkir.struct<@ComponentJ1>
    }
    func @constrain(%self: !zkir.struct<@ComponentJ1>, %p: !zkir.felt) { return }
  }

  zkir.struct @ComponentJ2 {
    field @f2 : !zkir.felt
    field @f3 : !zkir.struct<@ComponentJ1>

    func @compute() -> !zkir.struct<@ComponentJ2> {
      %self = new_struct : !zkir.struct<@ComponentJ2>
      return %self : !zkir.struct<@ComponentJ2>
    }

    func @constrain(%self: !zkir.struct<@ComponentJ2>) {
      %a = readf %self[@f2] : !zkir.struct<@ComponentJ2>, !zkir.felt
      %b = readf %self[@f3] : !zkir.struct<@ComponentJ2>, !zkir.struct<@ComponentJ1>
      call @ComponentJ1::@constrain(%b, %a) : (!zkir.struct<@ComponentJ1>, !zkir.felt) -> ()
      return
    }
  }
}
//CHECK-LABEL:  zkir.struct @ComponentJ1 {
//CHECK-NEXT:     field @f1 : !zkir.felt
//CHECK-NEXT:     func @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !zkir.felt) -> !zkir.struct<@ComponentJ1> {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentJ1>
//CHECK-NEXT:       return %[[SELF]] : !zkir.struct<@ComponentJ1>
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%[[A0:[0-9a-zA-Z_\.]+]]: !zkir.struct<@ComponentJ1>, %[[A1:[0-9a-zA-Z_\.]+]]: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
//CHECK-LABEL:  zkir.struct @ComponentJ2 {
//CHECK-NEXT:     field @f2 : !zkir.felt
//CHECK-NEXT:     field @f3 : !zkir.struct<@ComponentJ1>
//CHECK-NEXT:     func @compute() -> !zkir.struct<@ComponentJ2> {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentJ2>
//CHECK-NEXT:       return %[[SELF]] : !zkir.struct<@ComponentJ2>
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !zkir.struct<@ComponentJ2>) {
//CHECK-NEXT:       %0 = readf %[[SELF]][@f2] : <@ComponentJ2>, !zkir.felt
//CHECK-NEXT:       %1 = readf %[[SELF]][@f3] : <@ComponentJ2>, !zkir.struct<@ComponentJ1>
//CHECK-NEXT:       call @ComponentJ1::@constrain(%1, %0) : (!zkir.struct<@ComponentJ1>, !zkir.felt) -> ()
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "zkir"} {
  zkir.func @identity(%x: !zkir.felt) -> !zkir.felt {
    return %x: !zkir.felt
  }

  zkir.struct @ComponentK {
    func @compute() -> !zkir.struct<@ComponentK> {
      %self = new_struct : !zkir.struct<@ComponentK>
      return %self : !zkir.struct<@ComponentK>
    }

    func @constrain(%self: !zkir.struct<@ComponentK>, %a: !zkir.felt) {
      call @identity(%a) : (!zkir.felt) -> (!zkir.felt)
      return
    }
  }
}
//CHECK-LABEL:  zkir.func @identity
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: !zkir.felt) -> !zkir.felt {
//CHECK-NEXT:     return %[[A0:[0-9a-zA-Z_\.]+]] : !zkir.felt
//CHECK-NEXT:   }
//CHECK-LABEL:  zkir.struct @ComponentK {
//CHECK-NEXT:     func @compute() -> !zkir.struct<@ComponentK> {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentK>
//CHECK-NEXT:       return %[[SELF]] : !zkir.struct<@ComponentK>
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !zkir.struct<@ComponentK>, %[[A1:[0-9a-zA-Z_\.]+]]: !zkir.felt) {
//CHECK-NEXT:       %0 = call @identity(%[[A1:[0-9a-zA-Z_\.]+]]) : (!zkir.felt) -> !zkir.felt
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentM {
    func @compute(%p: !zkir.felt) -> !zkir.struct<@ComponentM> {
      %self = new_struct : !zkir.struct<@ComponentM>
      // initialize all fields of `%self` here
      return %self : !zkir.struct<@ComponentM>
    }
    func @constrain(%self: !zkir.struct<@ComponentM>, %p: !zkir.felt) { return }
  }
}
//CHECK-LABEL:   zkir.struct @ComponentM {
//CHECK-NEXT:      func @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !zkir.felt) -> !zkir.struct<@ComponentM> {
//CHECK-NEXT:        %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentM>
//CHECK-NEXT:        return %[[SELF]] : !zkir.struct<@ComponentM>
//CHECK-NEXT:      }
//CHECK-NEXT:      func @constrain(%[[A0:[0-9a-zA-Z_\.]+]]: !zkir.struct<@ComponentM>, %arg1: !zkir.felt) {
//CHECK-NEXT:        return
//CHECK-NEXT:      }
//CHECK-NEXT:    }
// -----

module attributes {veridise.lang = "zkir"} {
  module @mod1 {
    zkir.struct @ComponentP1 {
      func @compute() -> !zkir.struct<@mod1::@ComponentP1> {
        %self = new_struct : !zkir.struct<@mod1::@ComponentP1>
        return %self : !zkir.struct<@mod1::@ComponentP1>
      }
      func @constrain(%self: !zkir.struct<@mod1::@ComponentP1>) { return }
    }
    module @mod2 {
      zkir.struct @ComponentP2 {
        func @compute() -> !zkir.struct<@mod1::@mod2::@ComponentP2> {
          %self = new_struct : !zkir.struct<@mod1::@mod2::@ComponentP2>
          return %self : !zkir.struct<@mod1::@mod2::@ComponentP2>
        }
        func @constrain(%self: !zkir.struct<@mod1::@mod2::@ComponentP2>) { return }
      }
    }
  }
  zkir.struct @ComponentP3 {
    zkir.field @f1 : !zkir.struct<@mod1::@ComponentP1>
    zkir.field @f2 : !zkir.struct<@mod1::@mod2::@ComponentP2>
    zkir.field @f3 : !zkir.array<27x3x2x1x1x7 x !zkir.struct<@mod1::@ComponentP1>>
    zkir.field @f4 : !zkir.array<2 x !zkir.struct<@mod1::@mod2::@ComponentP2>>

    func @compute() -> !zkir.struct<@ComponentP3> {
      %self = new_struct : !zkir.struct<@ComponentP3>
      return %self : !zkir.struct<@ComponentP3>
    }
    func @constrain(%self: !zkir.struct<@ComponentP3>) { return }
  }
}
//CHECK-LABEL:  module @mod1 {
//CHECK-LABEL:    zkir.struct @ComponentP1 {
//CHECK-NEXT:       func @compute() -> !zkir.struct<@mod1::@ComponentP1> {
//CHECK-NEXT:         %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@mod1::@ComponentP1>
//CHECK-NEXT:         return %[[SELF]] : !zkir.struct<@mod1::@ComponentP1>
//CHECK-NEXT:       }
//CHECK-NEXT:       func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !zkir.struct<@mod1::@ComponentP1>) {
//CHECK-NEXT:         return
//CHECK-NEXT:       }
//CHECK-NEXT:     }
//CHECK-LABEL:    module @mod2 {
//CHECK-LABEL:      zkir.struct @ComponentP2 {
//CHECK-NEXT:         func @compute() -> !zkir.struct<@mod1::@mod2::@ComponentP2> {
//CHECK-NEXT:           %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@mod1::@mod2::@ComponentP2>
//CHECK-NEXT:           return %[[SELF]] : !zkir.struct<@mod1::@mod2::@ComponentP2>
//CHECK-NEXT:         }
//CHECK-NEXT:         func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !zkir.struct<@mod1::@mod2::@ComponentP2>) {
//CHECK-NEXT:           return
//CHECK-NEXT:         }
//CHECK-NEXT:       }
//CHECK-NEXT:     }
//CHECK-NEXT:   }
//CHECK-LABEL:  zkir.struct @ComponentP3 {
//CHECK-NEXT:     field @f1 : !zkir.struct<@mod1::@ComponentP1>
//CHECK-NEXT:     field @f2 : !zkir.struct<@mod1::@mod2::@ComponentP2>
//CHECK-NEXT:     field @f3 : !zkir.array<27x3x2x1x1x7 x !zkir.struct<@mod1::@ComponentP1>>
//CHECK-NEXT:     field @f4 : !zkir.array<2 x !zkir.struct<@mod1::@mod2::@ComponentP2>>
//CHECK-NEXT:     func @compute() -> !zkir.struct<@ComponentP3> {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentP3>
//CHECK-NEXT:       return %[[SELF]] : !zkir.struct<@ComponentP3>
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !zkir.struct<@ComponentP3>) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "zkir"} {
  zkir.struct @ComponentP1 {
    func @compute() -> !zkir.struct<@ComponentP1> {
      %self = new_struct : !zkir.struct<@ComponentP1>
      return %self : !zkir.struct<@ComponentP1>
    }
    func @constrain(%self: !zkir.struct<@ComponentP1>) { return }
  }
  module @mod2 {
    zkir.struct @ComponentP2 {
      func @compute() -> !zkir.struct<@mod2::@ComponentP2> {
        %self = new_struct : !zkir.struct<@mod2::@ComponentP2>
        return %self : !zkir.struct<@mod2::@ComponentP2>
      }
      func @constrain(%self: !zkir.struct<@mod2::@ComponentP2>) { return }
    }
  }
  module @mod1 {
    zkir.struct @ComponentP3 {
      zkir.field @f1 : !zkir.struct<@ComponentP1>
      zkir.field @f2 : !zkir.struct<@mod2::@ComponentP2>
      zkir.field @f3 : !zkir.array<27x3x2x1x1x7 x !zkir.struct<@ComponentP1>>
      zkir.field @f4 : !zkir.array<2 x !zkir.struct<@mod2::@ComponentP2>>

      func @compute() -> !zkir.struct<@mod1::@ComponentP3> {
        %self = new_struct : !zkir.struct<@mod1::@ComponentP3>
        return %self : !zkir.struct<@mod1::@ComponentP3>
      }
      func @constrain(%self: !zkir.struct<@mod1::@ComponentP3>) { return }
    }
  }
}
//CHECK-LABEL:  zkir.struct @ComponentP1 {
//CHECK-NEXT:     func @compute() -> !zkir.struct<@ComponentP1> {
//CHECK-NEXT:       %self = new_struct : <@ComponentP1>
//CHECK-NEXT:       return %self : !zkir.struct<@ComponentP1>
//CHECK-NEXT:     }
//CHECK-NEXT:     func @constrain(%arg0: !zkir.struct<@ComponentP1>) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
//CHECK-LABEL:  module @mod2 {
//CHECK-LABEL:    zkir.struct @ComponentP2 {
//CHECK-NEXT:       func @compute() -> !zkir.struct<@mod2::@ComponentP2> {
//CHECK-NEXT:         %self = new_struct : <@mod2::@ComponentP2>
//CHECK-NEXT:         return %self : !zkir.struct<@mod2::@ComponentP2>
//CHECK-NEXT:       }
//CHECK-NEXT:       func @constrain(%arg0: !zkir.struct<@mod2::@ComponentP2>) {
//CHECK-NEXT:         return
//CHECK-NEXT:       }
//CHECK-NEXT:     }
//CHECK-NEXT:   }
//CHECK-LABEL:  module @mod1 {
//CHECK-LABEL:    zkir.struct @ComponentP3 {
//CHECK-NEXT:       field @f1 : !zkir.struct<@ComponentP1>
//CHECK-NEXT:       field @f2 : !zkir.struct<@mod2::@ComponentP2>
//CHECK-NEXT:       field @f3 : !zkir.array<27x3x2x1x1x7 x !zkir.struct<@ComponentP1>>
//CHECK-NEXT:       field @f4 : !zkir.array<2 x !zkir.struct<@mod2::@ComponentP2>>
//CHECK-NEXT:       func @compute() -> !zkir.struct<@mod1::@ComponentP3> {
//CHECK-NEXT:         %self = new_struct : <@mod1::@ComponentP3>
//CHECK-NEXT:         return %self : !zkir.struct<@mod1::@ComponentP3>
//CHECK-NEXT:       }
//CHECK-NEXT:       func @constrain(%arg0: !zkir.struct<@mod1::@ComponentP3>) {
//CHECK-NEXT:         return
//CHECK-NEXT:       }
//CHECK-NEXT:     }
//CHECK-NEXT:   }
