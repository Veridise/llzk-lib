// RUN: zkir-opt %s 2>&1 | FileCheck %s

zkir.struct @ComponentA {
  func.func public @compute(%a: !zkir.felt) {
    return
  }

  func.func public @constrain(%a: !zkir.felt) {
    return
  }
}

zkir.struct @ComponentB<[]> {
  func.func public @compute(%a: index) {
    return
  }

  func.func public @constrain(%a: index) {
    return
  }
}

zkir.struct @ComponentC<[@A]> {
  func.func public @constrain(%a: !zkir.felt, %b: !zkir.felt) { return }
  func.func public @compute(%a: !zkir.felt, %b: !zkir.felt) { return }
}

zkir.struct @ComponentD<[@B, @D, @C]> {
  func.func public @constrain(%a: !zkir.felt, %b: !zkir.felt) {
    return
  }

  func.func public @compute(%a: !zkir.felt, %b: !zkir.felt) {
    return
  }
}

//CHECK:      module {
//CHECK-NEXT:   zkir.struct @ComponentA {
//CHECK-NEXT:     func.func public @compute(%arg0: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func.func public @constrain(%arg0: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
//CHECK-NEXT:   zkir.struct @ComponentB<[]> {
//CHECK-NEXT:     func.func public @compute(%arg0: index) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func.func public @constrain(%arg0: index) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
//CHECK-NEXT:   zkir.struct @ComponentC<[@A]> {
//CHECK-NEXT:     func.func public @constrain(%arg0: !zkir.felt, %arg1: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func.func public @compute(%arg0: !zkir.felt, %arg1: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
//CHECK-NEXT:   zkir.struct @ComponentD<[@B, @D, @C]> {
//CHECK-NEXT:     func.func public @constrain(%arg0: !zkir.felt, %arg1: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func.func public @compute(%arg0: !zkir.felt, %arg1: !zkir.felt) {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
//CHECK-NEXT: }
