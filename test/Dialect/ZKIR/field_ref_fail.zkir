// RUN: zkir-opt -split-input-file -verify-diagnostics %s

zkir.struct @ComponentJ {
  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@WasNotDefined>) {
    // expected-error@+1 {{'zkir.fref' op undefined component: '!zkir.struct<@WasNotDefined>'}}
    %0 = zkir.fref %p[@f2] : !zkir.struct<@WasNotDefined> -> !zkir.felt
    return
  }
}
// -----
zkir.struct @ComponentK {
  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@ComponentK>) {
    // expected-error@+1 {{'zkir.fref' op undefined struct field: @f2}}
    %0 = zkir.fref %p[@f2] : !zkir.struct<@ComponentK> -> !zkir.felt
    return
  }
}
// -----
zkir.struct @ComponentL {
  zkir.field @f2 : index

  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@ComponentL>) {
    // expected-error@+1 {{'zkir.fref' op field ref has wrong type; expected 'index', got '!zkir.felt}}
    %0 = zkir.fref %p[@f2] : !zkir.struct<@ComponentL> -> !zkir.felt
    return
  }
}
// -----
zkir.struct @ComponentM {
  zkir.field @f2 : index

  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@ComponentM>) { // expected-note {{prior use here}}
    // expected-error@+1 {{use of value '%p' expects different type than prior uses: '!zkir.struct<@WrongComponent>' vs '!zkir.struct<@ComponentM>'}}
    %0 = zkir.fref %p[@f2] : !zkir.struct<@WrongComponent> -> index
    return
  }
}
// -----
zkir.struct @ComponentN {
  zkir.field @f2 : index

  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@WrongComponent>) { // expected-note {{prior use here}}
    // expected-error@+1 {{use of value '%p' expects different type than prior uses: '!zkir.struct<@ComponentN>' vs '!zkir.struct<@WrongComponent>'}}
    %0 = zkir.fref %p[@f2] : !zkir.struct<@ComponentN> -> index
    return
  }
}
// -----
