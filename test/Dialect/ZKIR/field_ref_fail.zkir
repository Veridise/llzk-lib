// RUN: zkir-opt -split-input-file -verify-diagnostics %s

zkir.struct @ComponentA {
  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@WasNotDefined>) {
    // expected-error@+1 {{'zkir.field.read' op undefined component: '!zkir.struct<@WasNotDefined>'}}
    %0 = zkir.field.read %p[@f2] : !zkir.struct<@WasNotDefined>, !zkir.felt
    return
  }
}
// -----
zkir.struct @ComponentB {
  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@ComponentB>) {
    // expected-error@+1 {{'zkir.field.read' op undefined struct field: @f2}}
    %0 = zkir.field.read %p[@f2] : !zkir.struct<@ComponentB>, !zkir.felt
    return
  }
}
// -----
zkir.struct @ComponentC {
  zkir.field @f2 : index

  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@ComponentC>) {
    // expected-error@+1 {{'zkir.field.read' op field read has wrong type; expected 'index', got '!zkir.felt}}
    %0 = zkir.field.read %p[@f2] : !zkir.struct<@ComponentC>, !zkir.felt
    return
  }
}
// -----
zkir.struct @ComponentD {
  zkir.field @f2 : index

  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@ComponentD>) { // expected-note {{prior use here}}
    // expected-error@+1 {{use of value '%p' expects different type than prior uses: '!zkir.struct<@WrongComponent>' vs '!zkir.struct<@ComponentD>'}}
    %0 = zkir.field.read %p[@f2] : !zkir.struct<@WrongComponent>, index
    return
  }
}
// -----
zkir.struct @ComponentF {
  zkir.field @f2 : index

  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@WrongComponent>) { // expected-note {{prior use here}}
    // expected-error@+1 {{use of value '%p' expects different type than prior uses: '!zkir.struct<@ComponentF>' vs '!zkir.struct<@WrongComponent>'}}
    %0 = zkir.field.read %p[@f2] : !zkir.struct<@ComponentF>, index
    return
  }
}
// -----
zkir.struct @ComponentG {
  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@WasNotDefined>, %0: !zkir.felt) {
    // expected-error@+1 {{'zkir.field.write' op undefined component: '!zkir.struct<@WasNotDefined>'}}
    zkir.field.write %p[@f2] = %0 : !zkir.struct<@WasNotDefined>, !zkir.felt
    return
  }
}
// -----
zkir.struct @ComponentH {
  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@ComponentH>, %0: !zkir.felt) {
    // expected-error@+1 {{'zkir.field.write' op undefined struct field: @f2}}
    zkir.field.write %p[@f2] = %0 : !zkir.struct<@ComponentH>, !zkir.felt
    return
  }
}
// -----
zkir.struct @ComponentJ {
  zkir.field @f2 : index

  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@ComponentJ>, %0: !zkir.felt) {
    // expected-error@+1 {{'zkir.field.write' op field write has wrong type; expected 'index', got '!zkir.felt}}
    zkir.field.write %p[@f2] = %0 : !zkir.struct<@ComponentJ>, !zkir.felt
    return
  }
}
// -----
zkir.struct @ComponentK {
  zkir.field @f2 : index

  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@ComponentK>, %0: !zkir.felt) { // expected-note {{prior use here}}
    // expected-error@+1 {{use of value '%p' expects different type than prior uses: '!zkir.struct<@WrongComponent>' vs '!zkir.struct<@ComponentK>'}}
    zkir.field.write %p[@f2] = %0 : !zkir.struct<@WrongComponent>, index
    return
  }
}
// -----
zkir.struct @ComponentL {
  zkir.field @f2 : index

  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@WrongComponent>, %0: !zkir.felt) { // expected-note {{prior use here}}
    // expected-error@+1 {{use of value '%p' expects different type than prior uses: '!zkir.struct<@ComponentL>' vs '!zkir.struct<@WrongComponent>'}}
    zkir.field.write %p[@f2] = %0 : !zkir.struct<@ComponentL>, index
    return
  }
}
// -----
zkir.struct @ComponentM {
  zkir.field @f2 : !zkir.array<2 x index>

  func.func public @compute() { return }

  func.func public @constrain(%p: !zkir.struct<@ComponentM>, %0: !zkir.array<7 x index>) { // expected-note {{prior use here}}
    // expected-error@+1 {{use of value '%0' expects different type than prior uses: '!zkir.array<2 x index>' vs '!zkir.array<7 x index>'}}
    zkir.field.write %p[@f2] = %0 : !zkir.struct<@ComponentM>, !zkir.array<2 x index>
    return
  }
}
// -----
