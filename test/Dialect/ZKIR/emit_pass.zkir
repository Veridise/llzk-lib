// RUN: zkir-opt -split-input-file %s 2>&1 | FileCheck %s

zkir.struct @ComponentA {
  func @constrain(%a: !zkir.felt, %b: !zkir.felt) {
    zkir.emit.eq %a, %b
    return
  }

  func @compute() {
    return
  }
}
//CHECK-LABEL:  zkir.struct @ComponentA {
//CHECK-NEXT:     func @constrain(%[[A0:[0-9a-zA-Z_\.]+]]: !zkir.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !zkir.felt) {
//CHECK-NEXT:       zkir.emit.eq %[[A0]], %[[A1]]
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @compute() {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

zkir.struct @ComponentB {
  func @constrain(%a: !zkir.felt, %b: !zkir.array<5 x !zkir.felt>) {
    zkir.emit.in %a, %b : !zkir.array<5 x !zkir.felt>
    return
  }

  func @compute() {
    return
  }
}
//CHECK-LABEL:  zkir.struct @ComponentB {
//CHECK-NEXT:     func @constrain(%[[A0:[0-9a-zA-Z_\.]+]]: !zkir.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !zkir.array<5 x !zkir.felt>) {
//CHECK-NEXT:       zkir.emit.in %[[A0]], %[[A1]] : <5 x !zkir.felt>
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @compute() {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

zkir.struct @ComponentC {
  func @constrain(%a: index, %b: !zkir.array<89 x index>) {
    zkir.emit.in %a, %b : !zkir.array<89 x index>
    return
  }

  func @compute() {
    return
  }
}
//CHECK-LABEL:  zkir.struct @ComponentC {
//CHECK-NEXT:     func @constrain(%[[A0:[0-9a-zA-Z_\.]+]]: index, %[[A1:[0-9a-zA-Z_\.]+]]: !zkir.array<89 x index>) {
//CHECK-NEXT:       zkir.emit.in %[[A0]], %[[A1]] : <89 x index>
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @compute() {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

zkir.struct @ComponentD {
  func @constrain(%a: !zkir.struct<@ComponentD>, %b: !zkir.array<89 x !zkir.struct<@ComponentD>>) {
    zkir.emit.in %a, %b : !zkir.array<89 x !zkir.struct<@ComponentD>>
    return
  }

  func @compute() {
    return
  }
}
//CHECK-LABEL:  zkir.struct @ComponentD {
//CHECK-NEXT:     func @constrain(%[[A0:[0-9a-zA-Z_\.]+]]: !zkir.struct<@ComponentD>, %[[A1:[0-9a-zA-Z_\.]+]]: !zkir.array<89 x !zkir.struct<@ComponentD>>) {
//CHECK-NEXT:       zkir.emit.in %[[A0]], %[[A1]] : <89 x !zkir.struct<@ComponentD>>
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @compute() {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----


zkir.struct @ComponentE {
  func @constrain(%a: !zkir.array<2 x index>, %b: !zkir.array<89 x !zkir.array<2 x index>>) {
    zkir.emit.in %a, %b : !zkir.array<89 x !zkir.array<2 x index>>
    return
  }

  func @compute() {
    return
  }
}
//CHECK-LABEL:  zkir.struct @ComponentE {
//CHECK-NEXT:     func @constrain(%[[A0:[0-9a-zA-Z_\.]+]]: !zkir.array<2 x index>, %[[A1:[0-9a-zA-Z_\.]+]]: !zkir.array<89 x !zkir.array<2 x index>>) {
//CHECK-NEXT:       zkir.emit.in %[[A0]], %[[A1]] : <89 x !zkir.array<2 x index>>
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @compute() {
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----
