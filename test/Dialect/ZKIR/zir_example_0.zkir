// RUN: zkir-opt -split-input-file %s 2>&1 | FileCheck %s

// Pre-defined structs to import in all files generated by zirgen frontend
module attributes {veridise.lang = "zkir"} {
  zkir.struct @ValU32 {
    field @low : !zkir.felt
    field @high : !zkir.felt

    func @compute(%self: !zkir.struct<@ValU32>, %low: !zkir.felt, %high: !zkir.felt) {
      writef %self[@low] = %low : !zkir.struct<@ValU32>, !zkir.felt
      writef %self[@high] = %high : !zkir.struct<@ValU32>, !zkir.felt
      return
    }

    func @constrain(%self: !zkir.struct<@ValU32>, %low: !zkir.felt, %high: !zkir.felt) {
      return
    }
  }

  zkir.struct @Reg {
    // ZIR frontend uses `pub` for the return value
    field @reg : !zkir.felt {zkir.pub}

    func @compute(%self: !zkir.struct<@Reg>, %v: !zkir.felt) {
      writef %self[@reg] = %v : !zkir.struct<@Reg>, !zkir.felt
      return
    }

    func @constrain(%self: !zkir.struct<@Reg>, %v: !zkir.felt) {
      %0 = readf %self[@reg] : !zkir.struct<@Reg>, !zkir.felt
      emit_eq %v, %0 : !zkir.felt
      return
    }
  }

  zkir.struct @Div {
    field @reciprocal : !zkir.felt
    // ZIR frontend uses `pub` for the return value
    field @synthetic_return : !zkir.felt {zkir.pub}

    func @compute(%self: !zkir.struct<@Div>, %lhs: !zkir.felt, %rhs: !zkir.felt) {
      // res_inv := inv(rhs);
      %res_inv = inv %rhs
      writef %self[@reciprocal] = %res_inv : !zkir.struct<@Div>, !zkir.felt
      // self.synthetic_return := res_inv * lhs;
      %res_mul = mul %res_inv, %lhs
      writef %self[@synthetic_return] = %res_mul : !zkir.struct<@Div>, !zkir.felt
      //
      return
    }

    func @constrain(%self: !zkir.struct<@Div>, %lhs: !zkir.felt, %rhs: !zkir.felt) {
      // emit self.reciprocal * rhs = 1;
      %res_inv = readf %self[@reciprocal] : !zkir.struct<@Div>, !zkir.felt
      %res_mul_1 = mul %res_inv, %rhs
      %const_1 = constfelt 1
      emit_eq %res_mul_1, %const_1 : !zkir.felt
      // emit self.synthetic_return = self.reciprocal * lhs;
      %res_self = readf %self[@synthetic_return] : !zkir.struct<@Div>, !zkir.felt
      %res_mul_2 = mul %res_inv, %lhs
      emit_eq %res_self, %res_mul_2 : !zkir.felt
      //
      return
    }
  }
}

//CHECK-LABEL: module attributes {veridise.lang = "zkir"} {
//CHECK-NEXT:    zkir.struct @ValU32 {
//CHECK-NEXT:      field @low : !zkir.felt
//CHECK-NEXT:      field @high : !zkir.felt
//CHECK-NEXT:      func @compute(%arg0: !zkir.struct<@ValU32>, %arg1: !zkir.felt, %arg2: !zkir.felt) {
//CHECK-NEXT:        writef %arg0[@low] = %arg1 : <@ValU32>, !zkir.felt
//CHECK-NEXT:        writef %arg0[@high] = %arg2 : <@ValU32>, !zkir.felt
//CHECK-NEXT:        return
//CHECK-NEXT:      }
//CHECK-NEXT:      func @constrain(%arg0: !zkir.struct<@ValU32>, %arg1: !zkir.felt, %arg2: !zkir.felt) {
//CHECK-NEXT:        return
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-NEXT:    zkir.struct @Reg {
//CHECK-NEXT:      field @reg : !zkir.felt {zkir.pub}
//CHECK-NEXT:      func @compute(%arg0: !zkir.struct<@Reg>, %arg1: !zkir.felt) {
//CHECK-NEXT:        writef %arg0[@reg] = %arg1 : <@Reg>, !zkir.felt
//CHECK-NEXT:        return
//CHECK-NEXT:      }
//CHECK-NEXT:      func @constrain(%arg0: !zkir.struct<@Reg>, %arg1: !zkir.felt) {
//CHECK-NEXT:        %0 = readf %arg0[@reg] : <@Reg>, !zkir.felt
//CHECK-NEXT:        emit_eq %arg1, %0 : !zkir.felt
//CHECK-NEXT:        return
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-NEXT:    zkir.struct @Div {
//CHECK-NEXT:      field @reciprocal : !zkir.felt
//CHECK-NEXT:      field @synthetic_return : !zkir.felt {zkir.pub}
//CHECK-NEXT:      func @compute(%arg0: !zkir.struct<@Div>, %arg1: !zkir.felt, %arg2: !zkir.felt) {
//CHECK-NEXT:        %0 = inv %arg2
//CHECK-NEXT:        writef %arg0[@reciprocal] = %0 : <@Div>, !zkir.felt
//CHECK-NEXT:        %1 = mul %0, %arg1
//CHECK-NEXT:        writef %arg0[@synthetic_return] = %1 : <@Div>, !zkir.felt
//CHECK-NEXT:        return
//CHECK-NEXT:      }
//CHECK-NEXT:      func @constrain(%arg0: !zkir.struct<@Div>, %arg1: !zkir.felt, %arg2: !zkir.felt) {
//CHECK-NEXT:        %0 = readf %arg0[@reciprocal] : <@Div>, !zkir.felt
//CHECK-NEXT:        %1 = mul %0, %arg2
//CHECK-NEXT:        %felt_const_1 = constfelt  1
//CHECK-NEXT:        emit_eq %1, %felt_const_1 : !zkir.felt
//CHECK-NEXT:        %2 = readf %arg0[@synthetic_return] : <@Div>, !zkir.felt
//CHECK-NEXT:        %3 = mul %0, %arg1
//CHECK-NEXT:        emit_eq %2, %3 : !zkir.felt
//CHECK-NEXT:        return
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-NEXT:  }
