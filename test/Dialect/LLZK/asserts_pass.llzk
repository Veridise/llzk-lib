// RUN: llzk-opt -split-input-file %s 2>&1 | FileCheck --enable-var-scope %s

module attributes {veridise.lang = "llzk"} {
  struct.def @Component01<[@C]> {
    function.def @compute(%a: !felt.felt) -> !struct.type<@Component01<[@C]>> {
      %self = struct.new : !struct.type<@Component01<[@C]>>
      %b = poly.read_const @C : !felt.felt
      %c = bool.cmp gt(%a, %b)
      bool.assert %c
      function.return %self : !struct.type<@Component01<[@C]>>
    }

    function.def @constrain(%self: !struct.type<@Component01<[@C]>>, %a: !felt.felt) {
      %b = poly.read_const @C : !felt.felt
      %c = bool.cmp gt(%a, %b)
      bool.assert %c
      function.return
    }
  }
}
//CHECK-LABEL: struct.def @Component01<[@C]> {
//CHECK-NEXT:    function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !struct.type<@Component01<[@C]>> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@Component01<[@C]>>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = poly.read_const @C : !felt.felt
//CHECK-NEXT:      %[[T1:[0-9a-zA-Z_\.]+]] = bool.cmp gt(%[[A0]], %[[T0]])
//CHECK-NEXT:      bool.assert %[[T1]]
//CHECK-NEXT:      function.return %[[SELF]] : !struct.type<@Component01<[@C]>>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.type<@Component01<[@C]>>, %[[A1:[0-9a-zA-Z_\.]+]]: !felt.felt) attributes {function.allow_constraint} {
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = poly.read_const @C : !felt.felt
//CHECK-NEXT:      %[[T1:[0-9a-zA-Z_\.]+]] = bool.cmp gt(%[[A1]], %[[T0]])
//CHECK-NEXT:      bool.assert %[[T1]]
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
// -----

function.def @test_in_global_func(%a: !felt.felt, %b: !felt.felt) -> i1 {
  %c = bool.cmp gt(%a, %b)
  bool.assert %c
  function.return %c : i1
}
//CHECK-LABEL: function.def @test_in_global_func
//CHECK-SAME:  (%[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !felt.felt) -> i1 {
//CHECK-NEXT:    %[[T0:[0-9a-zA-Z_\.]+]] = bool.cmp gt(%[[A0]], %[[A1]])
//CHECK-NEXT:    bool.assert %[[T0]]
//CHECK-NEXT:    function.return %[[T0]] : i1
//CHECK-NEXT:  }
// -----

function.def @just_assert(%c: i1) -> i1 {
  bool.assert %c
  function.return %c : i1
}
//CHECK-LABEL: function.def @just_assert
//CHECK-SAME:  (%[[A:[0-9a-zA-Z_\.]+]]: i1) -> i1 {
//CHECK-NEXT:    bool.assert %[[A]]
//CHECK-NEXT:    function.return %[[A]] : i1
//CHECK-NEXT:  }
// -----

function.def @assert_with_message(%c: i1) -> i1 {
  bool.assert %c, "Expected a `true` value"
  function.return %c : i1
}
//CHECK-LABEL: function.def @assert_with_message
//CHECK-SAME:  (%[[A:[0-9a-zA-Z_\.]+]]: i1) -> i1 {
//CHECK-NEXT:    bool.assert %[[A]], "Expected a `true` value"
//CHECK-NEXT:    function.return %[[A]] : i1
//CHECK-NEXT:  }
