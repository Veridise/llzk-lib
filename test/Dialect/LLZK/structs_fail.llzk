// RUN: llzk-opt -split-input-file -verify-diagnostics %s

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentD<[@B, @D, @C]> {
    // expected-error@+1 {{'llzk.struct' op expects parent op 'builtin.module'}}
    llzk.struct @ComponentA {}
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.func @identity(%x: !llzk.felt) -> !llzk.felt {
    // expected-error@+1 {{'llzk.struct' op expects parent op 'builtin.module'}}
    llzk.struct @ComponentA {}
    return %x: !llzk.felt
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentB<[@B, @D, @C]> {
    // expected-error@+1 {{'llzk.struct' op must define only 'compute' and 'constrain' functions; found 'invalidname'}}
    func @invalidname(%a: !llzk.felt, %b: !llzk.felt) {
      return
    }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentE<[@B, @D, @C]> {
    // expected-note@+1 {{see existing symbol definition here}}
    func @compute(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.struct<@ComponentE> {
      %self = new_struct : !llzk.struct<@ComponentE>
      return %self : !llzk.struct<@ComponentE>
    }
    // expected-error@+1 {{redefinition of symbol named 'compute'}}
    func @compute() -> !llzk.struct<@ComponentE> {
      %self = new_struct : !llzk.struct<@ComponentE>
      return %self : !llzk.struct<@ComponentE>
    }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{'llzk.struct' op must define exactly one 'constrain' function}}
  llzk.struct @ComponentF<[@B, @D, @C]> {
    func @compute(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.struct<@ComponentF<[@B, @D, @C]>> {
      %self = new_struct : !llzk.struct<@ComponentF<[@B, @D, @C]>>
      return %self : !llzk.struct<@ComponentF<[@B, @D, @C]>>
    }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentG<[@B, @D, @C]> {
    func @compute() -> !llzk.struct<@ComponentG<[@B, @D, @C]>> {
      %self = new_struct : !llzk.struct<@ComponentG<[@B, @D, @C]>>
      return %self : !llzk.struct<@ComponentG<[@B, @D, @C]>>
    }
    // expected-error@+1 {{'builtin.module' op invalid operation in 'struct'; only 'field' and 'func' operations are permitted}}
    builtin.module {
    }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentH {
    llzk.field @f2 : !llzk.felt // expected-note {{see existing symbol definition here}}
    // expected-error@+1 {{redefinition of symbol named 'f2'}}
    llzk.field @f2 : !llzk.felt

    func @compute() -> !llzk.struct<@ComponentH> {
      %self = new_struct : !llzk.struct<@ComponentH>
      return %self : !llzk.struct<@ComponentH>
    }
    func @constrain(%self: !llzk.struct<@ComponentH>)  { return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentJ {
    func @compute() -> !llzk.struct<@ComponentJ> {
      %self = new_struct : !llzk.struct<@ComponentJ>
      return %self : !llzk.struct<@ComponentJ>
    }
    func @constrain(%self: !llzk.struct<@ComponentJ>)  { return }
  }

  llzk.func @user() {
    // expected-error@+2 {{symbol "@ComponentJ" references a 'llzk.struct' but expected a 'llzk.func'}}
    // expected-error@+1 {{no 'llzk.func' named "@ComponentJ"}}
    llzk.call @ComponentJ() : () -> ()
    return
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentK {
    // expected-error@+2 {{'llzk.field' op references unknown symbol "@Missing"}}
    // expected-error@+1 {{no 'llzk.struct' named "@Missing"}}
    llzk.field @f : !llzk.struct<@Missing>

    func @compute() -> !llzk.struct<@ComponentK> {
      %self = new_struct : !llzk.struct<@ComponentK>
      return %self : !llzk.struct<@ComponentK>
    }
    func @constrain(%self: !llzk.struct<@ComponentK>)  { return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentL {
    // expected-error@+2 {{'llzk.field' op references unknown symbol "@Missing"}}
    // expected-error@+1 {{no 'llzk.struct' named "@Missing"}}
    llzk.field @f : !llzk.array<2,3,2 x !llzk.struct<@Missing>>

    func @compute() -> !llzk.struct<@ComponentL> {
      %self = new_struct : !llzk.struct<@ComponentL>
      return %self : !llzk.struct<@ComponentL>
    }
    func @constrain(%self: !llzk.struct<@ComponentL>)  { return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  module @path{}
  llzk.struct @ComponentM {
    // expected-error@+2 {{'llzk.field' op references unknown symbol "@path::@to::@Missing"}}
    // expected-error@+1 {{no 'llzk.struct' named "@path::@to::@Missing"}}
    llzk.field @f : !llzk.array<2,3,2 x !llzk.struct<@path::@to::@Missing>>

    func @compute() -> !llzk.struct<@ComponentM> {
      %self = new_struct : !llzk.struct<@ComponentM>
      return %self : !llzk.struct<@ComponentM>
    }
    func @constrain(%self: !llzk.struct<@ComponentM>)  { return }
  }
}

// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentP {
    // expected-error@+2 {{'llzk.func' op references unknown symbol "@X"}}
    // expected-error@+1 {{no 'llzk.struct' named "@X"}}
    func @compute(%0: i1, %1: i1, %2: i1, %3: i1, %4: i1, %5: i1, %6: i1, %7: !llzk.struct<@X>) -> !llzk.struct<@ComponentP> {
      %self = new_struct : !llzk.struct<@ComponentP>
      return %self : !llzk.struct<@ComponentP>
    }
    func @constrain(%self: !llzk.struct<@ComponentP>)  { return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentQ {
    func @compute() -> !llzk.struct<@ComponentQ> {
      %self = new_struct : !llzk.struct<@ComponentQ>
      return %self : !llzk.struct<@ComponentQ>
    }
    // expected-error@+2 {{'llzk.func' op references unknown symbol "@X"}}
    // expected-error@+1 {{no 'llzk.struct' named "@X"}}
    func @constrain(%self: !llzk.struct<@ComponentQ>, %0: i1, %1: i1, %2: i1, %3: i1, %4: i1, %5: i1, %6: i1, %7: !llzk.struct<@X>)  { return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentR {
    // expected-error@+4 {{'llzk.func' op references unknown symbol "@A"}}
    // expected-error@+3 {{no 'llzk.struct' named "@A"}}
    // expected-error@+2 {{'llzk.func' op references unknown symbol "@B"}}
    // expected-error@+1 {{no 'llzk.struct' named "@B"}}
    func @compute(%1: !llzk.struct<@A>, %7: !llzk.struct<@B>) -> !llzk.struct<@ComponentR> {
      %self = new_struct : !llzk.struct<@ComponentR>
      return %self : !llzk.struct<@ComponentR>
    }
    func @constrain(%self: !llzk.struct<@ComponentR>, %1: !llzk.struct<@A>, %7: !llzk.struct<@B>)  { return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentS {
    // expected-error@+4 {{'llzk.func' op references unknown symbol "@A"}}
    // expected-error@+3 {{no 'llzk.struct' named "@A"}}
    // expected-error@+2 {{'llzk.func' op references unknown symbol "@B"}}
    // expected-error@+1 {{no 'llzk.struct' named "@B"}}
    func @constrain(%self: !llzk.struct<@ComponentS>, %1: !llzk.struct<@A>, %7: !llzk.struct<@B>)  { return }
    func @compute(%1: !llzk.struct<@A>, %7: !llzk.struct<@B>) -> !llzk.struct<@ComponentS> {
      %self = new_struct : !llzk.struct<@ComponentS>
      return %self : !llzk.struct<@ComponentS>
    }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentT { // expected-note {{references parent component defined here}}
    // expected-error@+1 {{'llzk.field' op type is circular}}
    llzk.field @f : !llzk.struct<@ComponentT>

    func @compute() -> !llzk.struct<@ComponentT> {
      %self = new_struct : !llzk.struct<@ComponentT>
      return %self : !llzk.struct<@ComponentT>
    }
    func @constrain(%self: !llzk.struct<@ComponentT>)  { return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  module @a {
    llzk.struct @ComponentV { // expected-note {{references parent component defined here}}
      // expected-error@+1 {{'llzk.field' op type is circular}}
      llzk.field @f : !llzk.struct<@a::@ComponentV>

      func @compute() -> !llzk.struct<@a::@ComponentV> {
        %self = new_struct : !llzk.struct<@a::@ComponentV>
        return %self : !llzk.struct<@a::@ComponentV>
      }
      func @constrain(%self: !llzk.struct<@a::@ComponentV>)  { return }
    }
  }
}
