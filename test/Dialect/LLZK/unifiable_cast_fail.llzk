// RUN: llzk-opt -split-input-file -verify-diagnostics %s

module attributes {veridise.lang = "llzk"} {
  llzk.struct @Tester<[@S0, @S1]> {
    func @compute(%0: index) -> !llzk.struct<@Tester<[@S0, @S1]>> {
      %self = new_struct : <@Tester<[@S0, @S1]>>
      // expected-error@+1 {{'llzk.unifiable_cast' op input type 'index' and output type '!llzk.felt' are not unifiable}}
      %r0 = unifiable_cast %0 : (index) -> !llzk.felt
      return %self : !llzk.struct<@Tester<[@S0, @S1]>>
    }
    func @constrain(%self: !llzk.struct<@Tester<[@S0, @S1]>>, %0: index) {
      return
    }
  }
}

// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @Tester<[@S0, @S1]> {
    func @compute(%1: i1) -> !llzk.struct<@Tester<[@S0, @S1]>> {
      %self = new_struct : <@Tester<[@S0, @S1]>>
      // expected-error@+1 {{'llzk.unifiable_cast' op input type 'i1' and output type 'index' are not unifiable}}
      %r1 = unifiable_cast %1 : (i1) -> index
     return %self : !llzk.struct<@Tester<[@S0, @S1]>>
    }
    func @constrain(%self: !llzk.struct<@Tester<[@S0, @S1]>>, %1: i1) {
      return
    }
  }
}


// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @Tester<[@S0, @S1]> {
    func @compute(%2: !llzk.felt) -> !llzk.struct<@Tester<[@S0, @S1]>> {
      %self = new_struct : <@Tester<[@S0, @S1]>>
      // expected-error@+1 {{'llzk.unifiable_cast' op input type '!llzk.felt' and output type '!llzk.string' are not unifiable}}
      %r2 = unifiable_cast %2 : (!llzk.felt) -> !llzk.string
      return %self : !llzk.struct<@Tester<[@S0, @S1]>>
    }
    func @constrain(%self: !llzk.struct<@Tester<[@S0, @S1]>>, %2: !llzk.felt) {
      return
    }
  }
}

// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @T1<[]> {
    func @compute() -> !llzk.struct<@T1<[]>> {
      %self = new_struct : <@T1<[]>>
      return %self : !llzk.struct<@T1<[]>>
    }
    func @constrain(%self : !llzk.struct<@T1<[]>>) {
      return
    }
  }
  llzk.struct @T2<[@N]> {
    func @compute() -> !llzk.struct<@T2<[@N]>> {
      %self = new_struct : <@T2<[@N]>>
      return %self : !llzk.struct<@T2<[@N]>>
    }
    func @constrain(%self : !llzk.struct<@T2<[@N]>>) {
      return
    }
  }
  llzk.struct @Tester<[@S0, @S1]> {
    func @compute(%3: !llzk.struct<@T1<[]>>) -> !llzk.struct<@Tester<[@S0, @S1]>> {
      %self = new_struct : <@Tester<[@S0, @S1]>>
      // expected-error@+1 {{'llzk.unifiable_cast' op input type '!llzk.struct<@T1<[]>>' and output type '!llzk.struct<@T2<[@S0]>>' are not unifiable}}
      %r3 = unifiable_cast %3 : (!llzk.struct<@T1<[]>>) -> !llzk.struct<@T2<[@S0]>>
      return %self : !llzk.struct<@Tester<[@S0, @S1]>>
    }
    func @constrain(%self: !llzk.struct<@Tester<[@S0, @S1]>>, %3: !llzk.struct<@T1<[]>>) {
      return
    }
  }
}

// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @T2<[@N]> {
    func @compute() -> !llzk.struct<@T2<[@N]>> {
      %self = new_struct : <@T2<[@N]>>
      return %self : !llzk.struct<@T2<[@N]>>
    }
    func @constrain(%self : !llzk.struct<@T2<[@N]>>) {
      return
    }
  }
  llzk.struct @Tester<[@S0, @S1]> {
    func @compute(%4: !llzk.struct<@T2<[1]>>) -> !llzk.struct<@Tester<[@S0, @S1]>> {
      %self = new_struct : <@Tester<[@S0, @S1]>>
      // expected-error@+1 {{'llzk.unifiable_cast' op input type '!llzk.struct<@T2<[1]>>' and output type '!llzk.struct<@T2<[!llzk.felt]>>' are not unifiable}}
      %r4 = unifiable_cast %4 : (!llzk.struct<@T2<[1]>>) -> !llzk.struct<@T2<[!llzk.felt]>>
      return %self : !llzk.struct<@Tester<[@S0, @S1]>>
    }
    func @constrain(%self: !llzk.struct<@Tester<[@S0, @S1]>>, %4: !llzk.struct<@T2<[1]>>) {
      return
    }
  }
}
