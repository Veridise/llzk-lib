// RUN: llzk-opt -I %input_dir -split-input-file -llzk-inline-includes -llzk-print-constraint-dependency-graphs %s 2>&1 | FileCheck --enable-var-scope %s

module attributes {veridise.lang = "llzk"} {
  struct.def @NoConstraints {
    function.def @compute(%a: !felt.type) -> !struct.type<@NoConstraints> {
      %self = struct.new : !struct.type<@NoConstraints>
      function.return %self : !struct.type<@NoConstraints>
    }

    function.def @constrain(%self: !struct.type<@NoConstraints>, %a: !felt.type) {
      function.return
    }
  }
}

// CHECK-LABEL: @NoConstraints ConstraintDependencyGraph { }

// -----

module attributes {veridise.lang = "llzk"} {

  function.def @global_add(%a: !felt.type, %b: !felt.type) -> !felt.type {
    %c = felt.add %a, %b
    function.return %c : !felt.type
  }

  struct.def @Adder {
    struct.field @sum : !felt.type {llzk.pub}

    function.def @compute(%a: !felt.type, %b: !felt.type) -> !struct.type<@Adder> {
      %self = struct.new : !struct.type<@Adder>
      %sum = function.call @global_add(%a, %b) : (!felt.type, !felt.type) -> (!felt.type)
      struct.writef %self[@sum] = %sum : !struct.type<@Adder>, !felt.type
      function.return %self : !struct.type<@Adder>
    }

    function.def @constrain(%self: !struct.type<@Adder>, %a: !felt.type, %b: !felt.type) {
      %sum = struct.readf %self[@sum] : !struct.type<@Adder>, !felt.type
      %c = function.call @global_add(%a, %b) : (!felt.type, !felt.type) -> (!felt.type)
      constrain.eq %sum, %c : !felt.type
      function.return
    }
  }
}

// CHECK-LABEL: @Adder ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@sum], %arg1, %arg2 }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {

  function.def @global_add(%a: !felt.type, %b: !felt.type) -> !felt.type {
    %c = felt.add %a, %b
    function.return %c : !felt.type
  }

  struct.def @Adder2 {
    struct.field @sum : !felt.type {llzk.pub}

    function.def @compute(%a: !felt.type, %b: !felt.type) -> !struct.type<@Adder2> {
      %self = struct.new : !struct.type<@Adder2>
      %sum = function.call @global_add(%a, %b) : (!felt.type, !felt.type) -> (!felt.type)
      struct.writef %self[@sum] = %sum : !struct.type<@Adder2>, !felt.type
      function.return %self : !struct.type<@Adder2>
    }

    function.def @constrain(%self: !struct.type<@Adder2>, %a: !felt.type, %b: !felt.type) {
      %sum = struct.readf %self[@sum] : !struct.type<@Adder2>, !felt.type
      %c = function.call @global_add(%a, %b) : (!felt.type, !felt.type) -> (!felt.type)
      %d = felt.add %c, %c
      constrain.eq %sum, %d : !felt.type
      function.return
    }
  }
}

// CHECK-LABEL: @Adder2 ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@sum], %arg1, %arg2 }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentB {
    function.def @constrain(%self: !struct.type<@ComponentB>, %a: !felt.type, %b: !array.type<5 x !felt.type>) {
      constrain.in %b, %a : !array.type<5 x !felt.type>
      function.return
    }

    function.def @compute(%a: !felt.type, %b: !array.type<5 x !felt.type>) -> !struct.type<@ComponentB> {
      %self = struct.new : !struct.type<@ComponentB>
      function.return %self : !struct.type<@ComponentB>
    }
  }
}

// CHECK-LABEL: @ComponentB ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1, %arg2 }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {

  struct.def @EnsureZero {
    function.def @compute(%a: !felt.type) -> !struct.type<@EnsureZero> {
      %self = struct.new : !struct.type<@EnsureZero>
      function.return %self : !struct.type<@EnsureZero>
    }

    function.def @constrain(%self: !struct.type<@EnsureZero>, %a: !felt.type) {
      %zero = felt.const 0
      constrain.eq %a, %zero : !felt.type
      function.return
    }
  }

  struct.def @EnsureBothZero {
    function.def @compute(%a: !felt.type, %b: !felt.type) -> !struct.type<@EnsureBothZero> {
      %self = struct.new : !struct.type<@EnsureBothZero>
      function.return %self : !struct.type<@EnsureBothZero>
    }

    // NOTE: This test case demonstrates where this analysis is currently overly conservative,
    // as it does not determine that %a and %b must be precisely equal to 0.
    function.def @constrain(%self: !struct.type<@EnsureBothZero>, %a: !felt.type, %b: !felt.type) {
      %zero = felt.const 0
      constrain.eq %a, %b : !felt.type
      constrain.eq %a, %zero : !felt.type
      function.return
    }
  }
}

// CHECK-LABEL: @EnsureZero ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1, <felt.const: 0> }
// CHECK-NEXT: }
// CHECK-NEXT: @EnsureBothZero ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1, %arg2 },
// CHECK-NEXT:     { %arg1, <felt.const: 0> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {

  struct.def @Passthrough {
    struct.field @out : !felt.type {llzk.pub}

    function.def @compute(%in: !felt.type) -> !struct.type<@Passthrough> {
      %self = struct.new : !struct.type<@Passthrough>
      struct.writef %self[@out] = %in : !struct.type<@Passthrough>, !felt.type
      function.return %self : !struct.type<@Passthrough>
    }

    function.def @constrain(%self: !struct.type<@Passthrough>, %in: !felt.type) {
      %out = struct.readf %self[@out] : !struct.type<@Passthrough>, !felt.type
      constrain.eq %in, %out : !felt.type
      function.return
    }
  }

  struct.def @EnsureIsZero {
    struct.field @p : !struct.type<@Passthrough>

    function.def @compute(%in: !felt.type) -> !struct.type<@EnsureIsZero> {
      %self = struct.new : !struct.type<@EnsureIsZero>
      %p_0 = function.call @Passthrough::@compute(%in) : (!felt.type) -> (!struct.type<@Passthrough>)
      struct.writef %self[@p] = %p_0 : !struct.type<@EnsureIsZero>, !struct.type<@Passthrough>
      function.return %self : !struct.type<@EnsureIsZero>
    }

    function.def @constrain(%self: !struct.type<@EnsureIsZero>, %in: !felt.type) {
      %zero = felt.const 0
      %p_0 = struct.readf %self[@p] : !struct.type<@EnsureIsZero>, !struct.type<@Passthrough>
      function.call @Passthrough::@constrain(%p_0, %zero) : (!struct.type<@Passthrough>, !felt.type) -> ()
      %out = struct.readf %p_0[@out] : !struct.type<@Passthrough>, !felt.type
      constrain.eq %in, %out : !felt.type
      function.return
    }
  }
}

// CHECK-LABEL: @Passthrough ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@out], %arg1 }
// CHECK-NEXT: }
// CHECK-NEXT: @EnsureIsZero ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@p][@out], %arg1 },
// CHECK-NEXT:     { %arg0[@p][@out], <felt.const: 0> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @ArrayCheck {
    function.def @constrain(%self: !struct.type<@ArrayCheck>, %in: !array.type<5 x !felt.type>) {
      %fval = felt.const 7
      %idx = arith.constant 3 : index
      %elem = array.read %in[%idx] : !array.type<5 x !felt.type>, !felt.type
      constrain.eq %elem, %fval : !felt.type
      function.return
    }

    function.def @compute(%in: !array.type<5 x !felt.type>) -> !struct.type<@ArrayCheck> {
      %self = struct.new : !struct.type<@ArrayCheck>
      function.return %self : !struct.type<@ArrayCheck>
    }
  }
}

// CHECK-LABEL: @ArrayCheck ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1[3], <felt.const: 7> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @ArrayForCheck {
    function.def @constrain(%self: !struct.type<@ArrayForCheck>, %in: !array.type<5 x !felt.type>) {
      %lb = arith.constant 0 : index
      %up = arith.constant 5 : index
      %step = arith.constant 1 : index
      %fval = felt.const 7
      scf.for %iv = %lb to %up step %step {
        %elem = array.read %in[%iv] : !array.type<5 x !felt.type>, !felt.type
        constrain.eq %elem, %fval : !felt.type
      }
      function.return
    }

    function.def @compute(%in: !array.type<5 x !felt.type>) -> !struct.type<@ArrayForCheck> {
      %self = struct.new : !struct.type<@ArrayForCheck>
      function.return %self : !struct.type<@ArrayForCheck>
    }
  }
}

// CHECK-LABEL: @ArrayForCheck ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1[0:5], <felt.const: 7> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {

  struct.def @ConstConstraints {
    function.def @compute(%a: !felt.type, %b: !felt.type) -> !struct.type<@ConstConstraints> {
      %self = struct.new : !struct.type<@ConstConstraints>
      function.return %self : !struct.type<@ConstConstraints>
    }

    function.def @constrain(%self: !struct.type<@ConstConstraints>, %a: !felt.type, %b: !felt.type) {
      %c = felt.const 1
      constrain.eq %a, %c : !felt.type
      constrain.eq %b, %c : !felt.type
      function.return
    }
  }
}

// CHECK-LABEL: @ConstConstraints ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1, <felt.const: 1> },
// CHECK-NEXT:     { %arg2, <felt.const: 1> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  // Constrains arr[0] === @A and arr[2] === @B, leaving arr[1] unconstrained
  struct.def @ArrayConstrain<[@A, @B]> {
    function.def @compute(%arr: !array.type<3 x !felt.type>) -> !struct.type<@ArrayConstrain<[@A, @B]>> {
      %self = struct.new : !struct.type<@ArrayConstrain<[@A, @B]>>
      function.return %self : !struct.type<@ArrayConstrain<[@A, @B]>>
    }

    function.def @constrain(%self: !struct.type<@ArrayConstrain<[@A, @B]>>, %arr: !array.type<3 x !felt.type>) {
      %const0 = poly.read_const @A : !felt.type
      %const2 = poly.read_const @B : !felt.type
      %0 = arith.constant 0 : index
      %2 = arith.constant 2 : index
      %elem0 = array.read %arr[%0] : !array.type<3 x !felt.type>, !felt.type
      %elem2 = array.read %arr[%2] : !array.type<3 x !felt.type>, !felt.type
      constrain.eq %elem0, %const0 : !felt.type
      constrain.eq %elem2, %const2 : !felt.type
      function.return
    }
  }

  struct.def @MatrixConstrain {
    struct.field @check0 : !struct.type<@ArrayConstrain<[7, 11]>>
    struct.field @check1 : !struct.type<@ArrayConstrain<[13, 17]>>

    function.def @compute(%mat: !array.type<2,3 x !felt.type>) -> !struct.type<@MatrixConstrain> {
      %self = struct.new : !struct.type<@MatrixConstrain>
      function.return %self : !struct.type<@MatrixConstrain>
    }

    function.def @constrain(%self: !struct.type<@MatrixConstrain>, %mat: !array.type<2,3 x !felt.type>) {
      // split into two arrays and constrain each
      %check0 = struct.readf %self[@check0] : !struct.type<@MatrixConstrain>, !struct.type<@ArrayConstrain<[7, 11]>>
      %0 = arith.constant 0 : index
      %arr0 = array.extract %mat[%0] : !array.type<2,3 x !felt.type>
      function.call @ArrayConstrain::@constrain(%check0, %arr0) : (!struct.type<@ArrayConstrain<[7, 11]>>, !array.type<3 x !felt.type>) -> ()

      %check1 = struct.readf %self[@check1] : !struct.type<@MatrixConstrain>, !struct.type<@ArrayConstrain<[13, 17]>>
      %1 = arith.constant 1 : index
      %arr1 = array.extract %mat[%1] : !array.type<2,3 x !felt.type>
      function.call @ArrayConstrain::@constrain(%check1, %arr1) : (!struct.type<@ArrayConstrain<[13, 17]>>, !array.type<3 x !felt.type>) -> ()
      function.return
    }
  }
}

// COM: Propagation of template constants is not currently implemented and
// COM: should likely be relegated to a specialized transformation pass.
// CHECK-LABEL: @ArrayConstrain ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1[0], @ArrayConstrain<[@A]> },
// CHECK-NEXT:     { %arg1[2], @ArrayConstrain<[@B]> }
// CHECK-NEXT: }
// CHECK-NEXT: @MatrixConstrain ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1[0][0], @ArrayConstrain<[@A]> },
// CHECK-NEXT:     { %arg1[0][2], @ArrayConstrain<[@B]> },
// CHECK-NEXT:     { %arg1[1][0], @ArrayConstrain<[@A]> },
// CHECK-NEXT:     { %arg1[1][2], @ArrayConstrain<[@B]> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  // Constrains arr[1] === 7, leaving other indices unconstrained
  struct.def @ArrayConstrain {
    function.def @compute(%arr: !array.type<3 x !felt.type>) -> !struct.type<@ArrayConstrain> {
      %self = struct.new : !struct.type<@ArrayConstrain>
      function.return %self : !struct.type<@ArrayConstrain>
    }

    function.def @constrain(%self: !struct.type<@ArrayConstrain>, %arr: !array.type<3 x !felt.type>) {
      %const = felt.const 7
      %1 = arith.constant 1 : index
      %elem = array.read %arr[%1] : !array.type<3 x !felt.type>, !felt.type
      constrain.eq %elem, %const : !felt.type
      function.return
    }
  }

  struct.def @MatrixConstrain {
    struct.field @check : !struct.type<@ArrayConstrain>

    struct.field @a : !felt.type
    struct.field @b : !felt.type
    struct.field @c : !felt.type
    struct.field @d : !felt.type
    struct.field @e : !felt.type
    struct.field @f : !felt.type

    function.def @compute() -> !struct.type<@MatrixConstrain> {
      %self = struct.new : !struct.type<@MatrixConstrain>
      function.return %self : !struct.type<@MatrixConstrain>
    }

    function.def @constrain(%self: !struct.type<@MatrixConstrain>) {
      %a = struct.readf %self[@a] : !struct.type<@MatrixConstrain>, !felt.type
      %b = struct.readf %self[@b] : !struct.type<@MatrixConstrain>, !felt.type
      %c = struct.readf %self[@c] : !struct.type<@MatrixConstrain>, !felt.type
      %d = struct.readf %self[@d] : !struct.type<@MatrixConstrain>, !felt.type
      %e = struct.readf %self[@e] : !struct.type<@MatrixConstrain>, !felt.type
      %f = struct.readf %self[@f] : !struct.type<@MatrixConstrain>, !felt.type

      %mat = array.new %a, %b, %c, %d, %e, %f : !array.type<2,3 x !felt.type>

      %check = struct.readf %self[@check] : !struct.type<@MatrixConstrain>, !struct.type<@ArrayConstrain>
      %0 = arith.constant 0 : index
      %arr = array.extract %mat[%0] : !array.type<2,3 x !felt.type>
      function.call @ArrayConstrain::@constrain(%check, %arr) : (!struct.type<@ArrayConstrain>, !array.type<3 x !felt.type>) -> ()

      function.return
    }
  }
}

// CHECK-LABEL: @ArrayConstrain ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1[1], <felt.const: 7> }
// CHECK-NEXT: }
// CHECK-NEXT: @MatrixConstrain ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@b], <felt.const: 7> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @UnknownArrayConstrain<[@N]> {
    function.def @compute(%arr: !array.type<@N x !felt.type>) -> !struct.type<@UnknownArrayConstrain<[@N]>> {
      %self = struct.new : !struct.type<@UnknownArrayConstrain<[@N]>>
      function.return %self : !struct.type<@UnknownArrayConstrain<[@N]>>
    }

    function.def @constrain(%self: !struct.type<@UnknownArrayConstrain<[@N]>>, %arr: !array.type<@N x !felt.type>) {
      %const = felt.const 7
      %1 = arith.constant 1 : index
      %elem = array.read %arr[%1] : !array.type<@N x !felt.type>, !felt.type
      constrain.eq %elem, %const : !felt.type
      function.return
    }
  }
}

// CHECK-LABEL: @UnknownArrayConstrain ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1[1], <felt.const: 7> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @UnknownArrayConstrain<[@N]> {
    function.def @compute(%arr: !array.type<@N x !felt.type>) -> !struct.type<@UnknownArrayConstrain<[@N]>> {
      %self = struct.new : !struct.type<@UnknownArrayConstrain<[@N]>>
      function.return %self : !struct.type<@UnknownArrayConstrain<[@N]>>
    }

    function.def @constrain(%self: !struct.type<@UnknownArrayConstrain<[@N]>>, %arr: !array.type<@N x !felt.type>) {
      %const = felt.const 7
      %1 = arith.constant 1 : index
      %elem = array.read %arr[%1] : !array.type<@N x !felt.type>, !felt.type
      constrain.eq %elem, %const : !felt.type
      function.return
    }
  }

  struct.def @UnknownMatrixConstrain<[@M, @N]> {
    struct.field @check : !struct.type<@UnknownArrayConstrain<[@N]>>

    function.def @compute(%mat: !array.type<@M,@N x !felt.type>) -> !struct.type<@UnknownMatrixConstrain<[@M, @N]>> {
      %self = struct.new : !struct.type<@UnknownMatrixConstrain<[@M, @N]>>
      function.return %self : !struct.type<@UnknownMatrixConstrain<[@M, @N]>>
    }

    function.def @constrain(%self: !struct.type<@UnknownMatrixConstrain<[@M, @N]>>, %mat: !array.type<@M,@N x !felt.type>) {
      %check = struct.readf %self[@check] : !struct.type<@UnknownMatrixConstrain<[@M, @N]>>, !struct.type<@UnknownArrayConstrain<[@N]>>
      %0 = arith.constant 0 : index
      %arr = array.extract %mat[%0] : !array.type<@M,@N x !felt.type>
      function.call @UnknownArrayConstrain::@constrain(%check, %arr) : (!struct.type<@UnknownArrayConstrain<[@N]>>, !array.type<@N x !felt.type>) -> ()
      function.return
    }
  }
}

// CHECK-LABEL: @UnknownArrayConstrain ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1[1], <felt.const: 7> }
// CHECK-NEXT: }
// CHECK-NEXT: @UnknownMatrixConstrain ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1[0][1], <felt.const: 7> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  include.from "Dialect/LLZK/zir_example_0.llzk" as @zir
}

// CHECK-LABEL: @zir::@risc0::@ValU32 ConstraintDependencyGraph { }
// CHECK-NEXT: @zir::@risc0::@Reg ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@reg], %arg1 }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@risc0::@Div ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@reciprocal], %arg0[@synthetic_return], %arg1, %arg2 },
// CHECK-NEXT:     { %arg0[@reciprocal], <felt.const: 1> },
// CHECK-NEXT:     { %arg2, <felt.const: 1> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  include.from "Dialect/LLZK/zir_example_1.llzk" as @zir
}

// CHECK-LABEL: @zir::@std::@risc0::@ValU32 ConstraintDependencyGraph { }
// CHECK-NEXT: @zir::@std::@risc0::@Reg ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@reg], %arg1 }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@std::@risc0::@Div ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@reciprocal], %arg0[@synthetic_return], %arg1, %arg2 },
// CHECK-NEXT:     { %arg0[@reciprocal], <felt.const: 1> },
// CHECK-NEXT:     { %arg2, <felt.const: 1> }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@C1 ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@z][@reg], %arg1, %arg2 }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@C2 ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@fc1][@z][@reg], %arg1[@low], %arg1[@high] },
// CHECK-NEXT:     { %arg0[@fc1][@z][@reg], <felt.const: 0> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  include.from "Dialect/LLZK/zir_example_2.llzk" as @zir
}

// CHECK-LABEL: @zir::@std::@risc0::@ValU32 ConstraintDependencyGraph { }
// CHECK-NEXT: @zir::@std::@risc0::@Reg ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@reg], %arg1 }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@std::@risc0::@Div ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@reciprocal], %arg0[@synthetic_return], %arg1, %arg2 },
// CHECK-NEXT:     { %arg0[@reciprocal], <felt.const: 1> },
// CHECK-NEXT:     { %arg2, <felt.const: 1> }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@AssertBit ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1, <felt.const: 0>, <felt.const: 1> }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@NondetBitReg ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@reg], %arg0[@synthetic_return] },
// CHECK-NEXT:     { %arg0[@reg], <felt.const: 0>, <felt.const: 1> }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@ArgU16 ConstraintDependencyGraph { }
// CHECK-NEXT: @zir::@NondetU16Reg ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@arg][@count], <felt.const: 1> },
// CHECK-NEXT:     { %arg0[@arg][@val], %arg0[@synthetic_return] }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@U16Reg ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@ret][@arg][@count], <felt.const: 1> },
// CHECK-NEXT:     { %arg0[@ret][@arg][@val], %arg0[@ret][@synthetic_return], %arg0[@synthetic_return], %arg1 }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@AddrDecomposeBits ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@low0][@reg], %arg0[@low0][@synthetic_return], %arg0[@low1][@reg], %arg0[@low1][@synthetic_return], %arg0[@low2], %arg0[@upperDiff][@ret][@arg][@val], %arg0[@upperDiff][@ret][@synthetic_return], %arg0[@upperDiff][@synthetic_return], %arg0[@med14][@arg][@val], %arg0[@med14][@synthetic_return], %arg0[@addr], %arg0[@synthetic_return], %arg1[@low], %arg1[@high], %arg2 },
// CHECK-NEXT:     { %arg0[@low0][@reg], <felt.const: 0>, <felt.const: 1> },
// CHECK-NEXT:     { %arg0[@low0][@synthetic_return], <felt.const: 0>, <felt.const: 1>, <felt.const: 2> },
// CHECK-NEXT:     { %arg0[@low1][@reg], <felt.const: 0>, <felt.const: 1> },
// CHECK-NEXT:     { %arg0[@low1][@synthetic_return], <felt.const: 0>, <felt.const: 1>, <felt.const: 2> },
// CHECK-NEXT:     { %arg0[@low2], <felt.const: 2>, <felt.const: 4> },
// CHECK-NEXT:     { %arg0[@upperDiff][@ret][@arg][@count], <felt.const: 1> },
// CHECK-NEXT:     { %arg0[@upperDiff][@ret][@arg][@val], <felt.const: 1>, <felt.const: 49151>, <felt.const: 65535> },
// CHECK-NEXT:     { %arg0[@upperDiff][@ret][@synthetic_return], <felt.const: 1>, <felt.const: 49151>, <felt.const: 65535> },
// CHECK-NEXT:     { %arg0[@upperDiff][@synthetic_return], <felt.const: 1>, <felt.const: 49151>, <felt.const: 65535> },
// CHECK-NEXT:     { %arg0[@med14][@arg][@count], <felt.const: 1> },
// CHECK-NEXT:     { %arg0[@med14][@synthetic_return], <felt.const: 4>, <felt.const: 16384> },
// CHECK-NEXT:     { %arg0[@addr], <felt.const: 16384> },
// CHECK-NEXT:     { %arg1[@low], <felt.const: 4> },
// CHECK-NEXT:     { %arg1[@high], <felt.const: 1>, <felt.const: 16384>, <felt.const: 49151>, <felt.const: 65535> },
// CHECK-NEXT:     { %arg2, <felt.const: 1>, <felt.const: 49151>, <felt.const: 65535> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  include.from "Dialect/LLZK/zir_example_3.llzk" as @zir
}

// COM: @zir::@B is empty since it uses an uninitialized array
// CHECK-LABEL: @zir::@Head ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@$super], %arg1[0] }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@A ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@$super][@$super], @A<[@N]> }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@B ConstraintDependencyGraph { }
// CHECK-NEXT: @zir::@Top ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@a][@$super][@$super], %arg0[@b][@$super][@$super][@$super][@$super] },
// CHECK-NEXT:     { %arg0[@a][@$super][@$super], @A<[@N]> }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@VoidComponent ConstraintDependencyGraph { }

// -----

// This check ensures that calling the same function from multiple different
// contexts will converge correctly.
module attributes {veridise.lang = "llzk"} {
  include.from "Inputs/bits.llzk" as @bits
}

// CHECK-LABEL: @bits::@Component ConstraintDependencyGraph { }
// CHECK-NEXT: @bits::@NondetReg ConstraintDependencyGraph { }
// CHECK-NEXT: @bits::@NondetExtReg ConstraintDependencyGraph { }
// CHECK-NEXT: @bits::@EqzExt ConstraintDependencyGraph { }
// CHECK-NEXT: @bits::@Reg ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@reg][@$super], %arg1 }
// CHECK-NEXT: }
// COM: ExtReg is unconstrained due to a front-end bug
// CHECK-NEXT: @bits::@ExtReg ConstraintDependencyGraph { }
// CHECK-NEXT: @bits::@Div ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@reciprocal], %arg2 },
// CHECK-NEXT:     { %arg0[@reciprocal], <felt.const: 1> },
// CHECK-NEXT:     { %arg2, <felt.const: 1> }
// CHECK-NEXT: }
// CHECK-NEXT: @bits::@Log ConstraintDependencyGraph { }
// CHECK-NEXT: @bits::@Abort ConstraintDependencyGraph { }
// CHECK-NEXT: @bits::@Assert ConstraintDependencyGraph { }
// CHECK-NEXT: @bits::@AssertBit ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1, <felt.const: 0>, <felt.const: 1> }
// CHECK-NEXT: }
// CHECK-NEXT: @bits::@NondetBitReg ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@reg][@$super], <felt.const: 0>, <felt.const: 1> }
// CHECK-NEXT: }
// CHECK-NEXT: @bits::@BitReg ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@reg][@$super][@$super], %arg1 },
// CHECK-NEXT:     { %arg0[@reg][@reg][@$super], <felt.const: 0>, <felt.const: 1> }
// CHECK-NEXT: }
// CHECK-NEXT: @bits::@AssertTwit ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1, <felt.const: 0>, <felt.const: 1>, <felt.const: 2>, <felt.const: 3> }
// CHECK-NEXT: }
// CHECK-NEXT: @bits::@BitAnd ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@$temp][@reg][@$super], %arg1, %arg2 }
// CHECK-NEXT: }
// CHECK-NEXT: @bits::@BitOr ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@$temp][@reg][@$super], %arg1, %arg2 },
// CHECK-NEXT:     { %arg0[@$temp][@reg][@$super], <felt.const: 1> },
// CHECK-NEXT:     { %arg1, <felt.const: 1> },
// CHECK-NEXT:     { %arg2, <felt.const: 1> }
// CHECK-NEXT: }
// CHECK-NEXT: @bits::@NondetTwitReg ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@reg][@$super], <felt.const: 0>, <felt.const: 1>, <felt.const: 2>, <felt.const: 3> }
// CHECK-NEXT: }
// CHECK-NEXT: @bits::@NondetFakeTwitReg ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@reg1][@reg][@$super], <felt.const: 0>, <felt.const: 1> },
// CHECK-NEXT:     { %arg0[@$temp_1][@reciprocal], <felt.const: 1>, <felt.const: 2> },
// CHECK-NEXT:     { %arg0[@$temp_0][@$temp][@reg][@$super], %arg0[@$temp][@$temp][@reg][@$super], %arg1 },
// CHECK-NEXT:     { %arg0[@$temp_0][@$temp][@reg][@$super], <felt.const: 2> },
// CHECK-NEXT:     { %arg0[@reg0][@reg][@$super], <felt.const: 0>, <felt.const: 1> },
// CHECK-NEXT:     { %arg0[@$temp][@$temp][@reg][@$super], <felt.const: 1> },
// CHECK-NEXT:     { %arg1, <felt.const: 1>, <felt.const: 2> }
// CHECK-NEXT: }
// CHECK-NEXT: @bits::@TwitReg ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@reg][@$super][@$super], %arg1 },
// CHECK-NEXT:     { %arg0[@reg][@reg][@$super], <felt.const: 0>, <felt.const: 1>, <felt.const: 2>, <felt.const: 3> }
// CHECK-NEXT: }
// CHECK-NEXT: @bits::@FakeTwitReg ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@reg][@$super], %arg0[@reg][@$temp_0][@$temp][@reg][@$super], %arg0[@reg][@$temp][@$temp][@reg][@$super], %arg1 },
// CHECK-NEXT:     { %arg0[@reg][@reg1][@reg][@$super], <felt.const: 0>, <felt.const: 1> },
// CHECK-NEXT:     { %arg0[@reg][@$temp_1][@reciprocal], <felt.const: 1>, <felt.const: 2> },
// CHECK-NEXT:     { %arg0[@reg][@$temp_0][@$temp][@reg][@$super], <felt.const: 1>, <felt.const: 2> },
// CHECK-NEXT:     { %arg0[@reg][@reg0][@reg][@$super], <felt.const: 0>, <felt.const: 1> },
// CHECK-NEXT:     { %arg0[@reg][@$temp][@$temp][@reg][@$super], <felt.const: 1>, <felt.const: 2> },
// CHECK-NEXT:     { %arg1, <felt.const: 1>, <felt.const: 2> }
// CHECK-NEXT: }

// -----

// Testing external calls

module attributes {veridise.lang = "llzk"} {

  function.def private @extern_add(%a: !felt.type, %b: !felt.type) -> !felt.type attributes {extern}

  struct.def @ExternAdder {
    struct.field @sum : !felt.type {llzk.pub}

    function.def @compute(%a: !felt.type, %b: !felt.type) -> !struct.type<@ExternAdder> {
      %self = struct.new : !struct.type<@ExternAdder>
      function.return %self : !struct.type<@ExternAdder>
    }

    function.def @constrain(%self: !struct.type<@ExternAdder>, %a: !felt.type, %b: !felt.type) {
      %sum = struct.readf %self[@sum] : !struct.type<@ExternAdder>, !felt.type
      %c = function.call @extern_add(%a, %b) : (!felt.type, !felt.type) -> (!felt.type)
      // We make no assumptions about what %c could be, so this constraint is
      // effectively `%sum === {}`, so the CDG will be empty.
      constrain.eq %sum, %c : !felt.type
      function.return
    }
  }
}

// CHECK-LABEL: @ExternAdder ConstraintDependencyGraph { }

// -----

module attributes {veridise.lang = "llzk"} {

  function.def @global_add(%a: !felt.type, %b: !felt.type) -> !felt.type {
    %c = felt.add %a, %b
    function.return %c : !felt.type
  }

  function.def private @irrelevant() attributes {extern}

  struct.def @Adder2 {
    struct.field @sum : !felt.type {llzk.pub}

    function.def @compute(%a: !felt.type, %b: !felt.type) -> !struct.type<@Adder2> {
      %self = struct.new : !struct.type<@Adder2>
      %sum = function.call @global_add(%a, %b) : (!felt.type, !felt.type) -> (!felt.type)
      struct.writef %self[@sum] = %sum : !struct.type<@Adder2>, !felt.type
      function.return %self : !struct.type<@Adder2>
    }

    function.def @constrain(%self: !struct.type<@Adder2>, %a: !felt.type, %b: !felt.type) {
      %sum = struct.readf %self[@sum] : !struct.type<@Adder2>, !felt.type
      %c = function.call @global_add(%a, %b) : (!felt.type, !felt.type) -> (!felt.type)
      %d = felt.add %c, %c
      function.call @irrelevant() : () -> () // testing to see that this doesn't erase the prior values
      constrain.eq %sum, %d : !felt.type
      function.return
    }
  }
}

// CHECK-LABEL: @Adder2 ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@sum], %arg1, %arg2 }
// CHECK-NEXT: }

// -----

// Test that allowing Signals to constrain.eq doesn't break the constraint analysis
!Signal = !struct.type<@Signal>
module attributes {veridise.lang = "llzk"} {
  // pre-defined
  struct.def @Signal {
    struct.field @reg : !felt.type {llzk.pub}

    function.def @compute(%v: !felt.type) -> !struct.type<@Signal> {
      %self = struct.new : !struct.type<@Signal>
      struct.writef %self[@reg] = %v : !struct.type<@Signal>, !felt.type
      function.return %self : !struct.type<@Signal>
    }

    function.def @constrain(%self: !struct.type<@Signal>, %v: !felt.type) {
      function.return
    }
  }

  struct.def @Component00 {
    struct.field @f : !Signal

    function.def @compute(%0: !Signal) -> !struct.type<@Component00> {
      %self = struct.new : !struct.type<@Component00>
      struct.writef %self[@f] = %0 : !struct.type<@Component00>, !Signal
      function.return %self : !struct.type<@Component00>
    }
    function.def @constrain(%self: !struct.type<@Component00>, %0: !Signal) {
      %b = struct.readf %self[@f] : !struct.type<@Component00>, !Signal
      // Signal is the only struct allowed for emit equal
      constrain.eq %b, %0 : !Signal
      function.return
    }
  }

  struct.def @Component01 {
    struct.field @f : !array.type<2 x !Signal>

    function.def @compute(%0: !array.type<2 x !Signal>) -> !struct.type<@Component01> {
      %self = struct.new : !struct.type<@Component01>
      struct.writef %self[@f] = %0 : !struct.type<@Component01>, !array.type<2 x !Signal>
      function.return %self : !struct.type<@Component01>
    }
    function.def @constrain(%self: !struct.type<@Component01>, %0: !array.type<2 x !Signal>) {
      %b = struct.readf %self[@f] : !struct.type<@Component01>, !array.type<2 x !Signal>
      // Signal is the only struct allowed for emit equal
      constrain.eq %b, %0 : !array.type<2 x !Signal>
      function.return
    }
  }
}

// CHECK-LABEL: @Signal ConstraintDependencyGraph { }
// CHECK-NEXT:  @Component00 ConstraintDependencyGraph {
// CHECK-NEXT:      { %arg0[@f], %arg1 }
// CHECK-NEXT:  }
// CHECK-NEXT:  @Component01 ConstraintDependencyGraph {
// CHECK-NEXT:      { %arg0[@f], %arg1 }
// CHECK-NEXT:  }
