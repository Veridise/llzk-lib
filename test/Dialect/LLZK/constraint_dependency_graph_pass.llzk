// RUN: llzk-opt -I %S -split-input-file -llzk-inline-includes -llzk-print-constraint-dependency-graphs %s 2>&1 | FileCheck %s

module attributes {veridise.lang = "llzk"} {
  llzk.struct @NoConstraints {
    func @compute(%a: !llzk.felt) -> !llzk.struct<@NoConstraints> {
      %self = new_struct : !llzk.struct<@NoConstraints>
      return %self : !llzk.struct<@NoConstraints>
    }

    func @constrain(%self: !llzk.struct<@NoConstraints>, %a: !llzk.felt) {
      return
    }
  }
}

// CHECK: @NoConstraints ConstraintDependencyGraph { }

// -----

module attributes {veridise.lang = "llzk"} {

  llzk.func @global_add(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.felt {
    %c = add %a, %b
    return %c : !llzk.felt
  }

  llzk.struct @Adder {
    field @sum : !llzk.felt {llzk.pub}

    func @compute(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.struct<@Adder> {
      %self = new_struct : !llzk.struct<@Adder>
      %sum = call @global_add(%a, %b) : (!llzk.felt, !llzk.felt) -> (!llzk.felt)
      writef %self[@sum] = %sum : !llzk.struct<@Adder>, !llzk.felt
      return %self : !llzk.struct<@Adder>
    }

    func @constrain(%self: !llzk.struct<@Adder>, %a: !llzk.felt, %b: !llzk.felt) {
      %sum = readf %self[@sum] : !llzk.struct<@Adder>, !llzk.felt
      %c = call @global_add(%a, %b) : (!llzk.felt, !llzk.felt) -> (!llzk.felt)
      emit_eq %sum, %c : !llzk.felt
      return
    }
  }
}

// CHECK: @Adder ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@sum], %arg1, %arg2 }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {

  llzk.func @global_add(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.felt {
    %c = add %a, %b
    return %c : !llzk.felt
  }

  llzk.struct @Adder2 {
    field @sum : !llzk.felt {llzk.pub}

    func @compute(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.struct<@Adder2> {
      %self = new_struct : !llzk.struct<@Adder2>
      %sum = call @global_add(%a, %b) : (!llzk.felt, !llzk.felt) -> (!llzk.felt)
      writef %self[@sum] = %sum : !llzk.struct<@Adder2>, !llzk.felt
      return %self : !llzk.struct<@Adder2>
    }

    func @constrain(%self: !llzk.struct<@Adder2>, %a: !llzk.felt, %b: !llzk.felt) {
      %sum = readf %self[@sum] : !llzk.struct<@Adder2>, !llzk.felt
      %c = call @global_add(%a, %b) : (!llzk.felt, !llzk.felt) -> (!llzk.felt)
      %d = add %c, %c
      emit_eq %sum, %d : !llzk.felt
      return
    }
  }
}

// CHECK: @Adder2 ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@sum], %arg1, %arg2 }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  llzk.include "zir_example_1.llzk" as @zir
}

// CHECK: @zir::@std::@risc0::@ValU32 ConstraintDependencyGraph { }
// CHECK-NEXT: @zir::@std::@risc0::@Reg ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@reg], %arg1 }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@std::@risc0::@Div ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@reciprocal], %arg0[@synthetic_return], %arg1, %arg2 },
// CHECK-NEXT:     { %arg0[@reciprocal], <constfelt: 1> },
// CHECK-NEXT:     { %arg2, <constfelt: 1> }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@C1 ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@z][@reg], %arg1, %arg2 }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@C2 ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@fc1][@z][@reg], %arg1[@low], %arg1[@high] },
// CHECK-NEXT:     { %arg0[@fc1][@z][@reg], <constfelt: 0> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentB {
    func @constrain(%self: !llzk.struct<@ComponentB>, %a: !llzk.felt, %b: !llzk.array<5 x !llzk.felt>) {
      llzk.emit_in %b, %a : !llzk.array<5 x !llzk.felt>
      return
    }

    func @compute(%a: !llzk.felt, %b: !llzk.array<5 x !llzk.felt>) -> !llzk.struct<@ComponentB> {
      %self = new_struct : !llzk.struct<@ComponentB>
      return %self : !llzk.struct<@ComponentB>
    }
  }
}

// CHECK: @ComponentB ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1, %arg2 }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {

  llzk.struct @EnsureZero {
    func @compute(%a: !llzk.felt) -> !llzk.struct<@EnsureZero> {
      %self = new_struct : !llzk.struct<@EnsureZero>
      return %self : !llzk.struct<@EnsureZero>
    }

    func @constrain(%self: !llzk.struct<@EnsureZero>, %a: !llzk.felt) {
      %zero = llzk.constfelt 0
      emit_eq %a, %zero : !llzk.felt
      return
    }
  }

  llzk.struct @EnsureBothZero {
    func @compute(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.struct<@EnsureBothZero> {
      %self = new_struct : !llzk.struct<@EnsureBothZero>
      return %self : !llzk.struct<@EnsureBothZero>
    }

    // NOTE: This test case demonstrates where this analysis is currently overly conservative,
    // as it does not determine that %a and %b must be precisely equal to 0.
    func @constrain(%self: !llzk.struct<@EnsureBothZero>, %a: !llzk.felt, %b: !llzk.felt) {
      %zero = llzk.constfelt 0
      emit_eq %a, %b : !llzk.felt
      emit_eq %a, %zero : !llzk.felt
      return
    }
  }
}

// CHECK: @EnsureZero ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1, <constfelt: 0> }
// CHECK-NEXT: }
// CHECK-NEXT: @EnsureBothZero ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1, %arg2 },
// CHECK-NEXT:     { %arg1, <constfelt: 0> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {

  llzk.struct @Passthrough {
    field @out : !llzk.felt {llzk.pub}

    func @compute(%in: !llzk.felt) -> !llzk.struct<@Passthrough> {
      %self = new_struct : !llzk.struct<@Passthrough>
      writef %self[@out] = %in : !llzk.struct<@Passthrough>, !llzk.felt
      return %self : !llzk.struct<@Passthrough>
    }

    func @constrain(%self: !llzk.struct<@Passthrough>, %in: !llzk.felt) {
      %out = readf %self[@out] : !llzk.struct<@Passthrough>, !llzk.felt
      emit_eq %in, %out : !llzk.felt
      return
    }
  }

  llzk.struct @EnsureIsZero {
    field @p : !llzk.struct<@Passthrough>

    func @compute(%in: !llzk.felt) -> !llzk.struct<@EnsureIsZero> {
      %self = new_struct : !llzk.struct<@EnsureIsZero>
      %p_0 = call @Passthrough::@compute(%in) : (!llzk.felt) -> (!llzk.struct<@Passthrough>)
      writef %self[@p] = %p_0 : !llzk.struct<@EnsureIsZero>, !llzk.struct<@Passthrough>
      return %self : !llzk.struct<@EnsureIsZero>
    }

    func @constrain(%self: !llzk.struct<@EnsureIsZero>, %in: !llzk.felt) {
      %zero = llzk.constfelt 0
      %p_0 = readf %self[@p] : !llzk.struct<@EnsureIsZero>, !llzk.struct<@Passthrough>
      call @Passthrough::@constrain(%p_0, %zero) : (!llzk.struct<@Passthrough>, !llzk.felt) -> ()
      %out = readf %p_0[@out] : !llzk.struct<@Passthrough>, !llzk.felt
      emit_eq %in, %out : !llzk.felt
      return
    }
  }
}

// CHECK: @Passthrough ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@out], %arg1 }
// CHECK-NEXT: }
// CHECK-NEXT: @EnsureIsZero ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@p][@out], %arg1 },
// CHECK-NEXT:     { %arg0[@p][@out], <constfelt: 0> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ArrayCheck {
    func @constrain(%self: !llzk.struct<@ArrayCheck>, %in: !llzk.array<5 x !llzk.felt>) {
      %fval = llzk.constfelt 7
      %idx = index.constant 3
      %elem = llzk.readarr %in[%idx] : !llzk.array<5 x !llzk.felt>, !llzk.felt
      llzk.emit_eq %elem, %fval : !llzk.felt
      return
    }

    func @compute(%in: !llzk.array<5 x !llzk.felt>) -> !llzk.struct<@ArrayCheck> {
      %self = new_struct : !llzk.struct<@ArrayCheck>
      return %self : !llzk.struct<@ArrayCheck>
    }
  }
}

// CHECK: @ArrayCheck ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1[3], <constfelt: 7> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ArrayForCheck {
    func @constrain(%self: !llzk.struct<@ArrayForCheck>, %in: !llzk.array<5 x !llzk.felt>) {
      %lb = index.constant 0
      %up = index.constant 5
      %step = index.constant 1
      %fval = llzk.constfelt 7
      scf.for %iv = %lb to %up step %step {
        %elem = llzk.readarr %in[%iv] : !llzk.array<5 x !llzk.felt>, !llzk.felt
        llzk.emit_eq %elem, %fval : !llzk.felt
      }
      return
    }

    func @compute(%in: !llzk.array<5 x !llzk.felt>) -> !llzk.struct<@ArrayForCheck> {
      %self = new_struct : !llzk.struct<@ArrayForCheck>
      return %self : !llzk.struct<@ArrayForCheck>
    }
  }
}

// CHECK: @ArrayForCheck ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1[0:5], <constfelt: 7> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {

  llzk.struct @ConstConstraints {
    func @compute(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.struct<@ConstConstraints> {
      %self = new_struct : !llzk.struct<@ConstConstraints>
      return %self : !llzk.struct<@ConstConstraints>
    }

    func @constrain(%self: !llzk.struct<@ConstConstraints>, %a: !llzk.felt, %b: !llzk.felt) {
      %c = llzk.constfelt 1
      emit_eq %a, %c : !llzk.felt
      emit_eq %b, %c : !llzk.felt
      return
    }
  }
}

// CHECK: @ConstConstraints ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1, <constfelt: 1> },
// CHECK-NEXT:     { %arg2, <constfelt: 1> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  llzk.include "zir_example_3.llzk" as @zir
}

// COM: @zir::@B is empty since it uses an uninitialized array
// CHECK: @zir::@Head ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@$super], %arg1[0] }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@A ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@$super][@$super], @A<[@N]> }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@B ConstraintDependencyGraph { }
// CHECK-NEXT: @zir::@Top ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@a][@$super][@$super], %arg0[@b][@$super][@$super][@$super][@$super] },
// CHECK-NEXT:     { %arg0[@a][@$super][@$super], @A<[@N]> }
// CHECK-NEXT: }
// CHECK-NEXT: @zir::@VoidComponent ConstraintDependencyGraph { }

// -----

module attributes {veridise.lang = "llzk"} {
  // Constrains arr[0] === @A and arr[2] === @B, leaving arr[1] unconstrained
  llzk.struct @ArrayConstrain<[@A, @B]> {
    func @compute(%arr: !llzk.array<3 x !llzk.felt>) -> !llzk.struct<@ArrayConstrain<[@A, @B]>> {
      %self = new_struct : !llzk.struct<@ArrayConstrain<[@A, @B]>>
      return %self : !llzk.struct<@ArrayConstrain<[@A, @B]>>
    }

    func @constrain(%self: !llzk.struct<@ArrayConstrain<[@A, @B]>>, %arr: !llzk.array<3 x !llzk.felt>) {
      %const0 = read_const @A : !llzk.felt
      %const2 = read_const @B : !llzk.felt
      %0 = index.constant 0
      %2 = index.constant 2
      %elem0 = readarr %arr[%0] : !llzk.array<3 x !llzk.felt>, !llzk.felt
      %elem2 = readarr %arr[%2] : !llzk.array<3 x !llzk.felt>, !llzk.felt
      emit_eq %elem0, %const0 : !llzk.felt
      emit_eq %elem2, %const2 : !llzk.felt
      return
    }
  }

  llzk.struct @MatrixConstrain {
    field @check0 : !llzk.struct<@ArrayConstrain<[7, 11]>>
    field @check1 : !llzk.struct<@ArrayConstrain<[13, 17]>>

    func @compute(%mat: !llzk.array<2,3 x !llzk.felt>) -> !llzk.struct<@MatrixConstrain> {
      %self = new_struct : !llzk.struct<@MatrixConstrain>
      return %self : !llzk.struct<@MatrixConstrain>
    }

    func @constrain(%self: !llzk.struct<@MatrixConstrain>, %mat: !llzk.array<2,3 x !llzk.felt>) {
      // split into two arrays and constrain each
      %check0 = readf %self[@check0] : !llzk.struct<@MatrixConstrain>, !llzk.struct<@ArrayConstrain<[7, 11]>>
      %0 = index.constant 0
      %arr0 = extractarr %mat[%0] : !llzk.array<2,3 x !llzk.felt>
      call @ArrayConstrain::@constrain(%check0, %arr0) : (!llzk.struct<@ArrayConstrain<[7, 11]>>, !llzk.array<3 x !llzk.felt>) -> ()

      %check1 = readf %self[@check1] : !llzk.struct<@MatrixConstrain>, !llzk.struct<@ArrayConstrain<[13, 17]>>
      %1 = index.constant 1
      %arr1 = extractarr %mat[%1] : !llzk.array<2,3 x !llzk.felt>
      call @ArrayConstrain::@constrain(%check1, %arr1) : (!llzk.struct<@ArrayConstrain<[13, 17]>>, !llzk.array<3 x !llzk.felt>) -> ()
      return
    }
  }
}

// COM: Propagation of template constants is not currently implemented and
// COM: should likely be relegated to a specialized transformation pass.
// CHECK: @ArrayConstrain ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1[0], @ArrayConstrain<[@A]> },
// CHECK-NEXT:     { %arg1[2], @ArrayConstrain<[@B]> }
// CHECK-NEXT: }
// CHECK-NEXT: @MatrixConstrain ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1[0][0], @ArrayConstrain<[@A]> },
// CHECK-NEXT:     { %arg1[0][2], @ArrayConstrain<[@B]> },
// CHECK-NEXT:     { %arg1[1][0], @ArrayConstrain<[@A]> },
// CHECK-NEXT:     { %arg1[1][2], @ArrayConstrain<[@B]> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  // Constrains arr[1] === 7, leaving other indices unconstrained
  llzk.struct @ArrayConstrain {
    func @compute(%arr: !llzk.array<3 x !llzk.felt>) -> !llzk.struct<@ArrayConstrain> {
      %self = new_struct : !llzk.struct<@ArrayConstrain>
      return %self : !llzk.struct<@ArrayConstrain>
    }

    func @constrain(%self: !llzk.struct<@ArrayConstrain>, %arr: !llzk.array<3 x !llzk.felt>) {
      %const = constfelt 7
      %1 = index.constant 1
      %elem = readarr %arr[%1] : !llzk.array<3 x !llzk.felt>, !llzk.felt
      emit_eq %elem, %const : !llzk.felt
      return
    }
  }

  llzk.struct @MatrixConstrain {
    field @check : !llzk.struct<@ArrayConstrain>

    field @a : !llzk.felt
    field @b : !llzk.felt
    field @c : !llzk.felt
    field @d : !llzk.felt
    field @e : !llzk.felt
    field @f : !llzk.felt

    func @compute() -> !llzk.struct<@MatrixConstrain> {
      %self = new_struct : !llzk.struct<@MatrixConstrain>
      return %self : !llzk.struct<@MatrixConstrain>
    }

    func @constrain(%self: !llzk.struct<@MatrixConstrain>) {
      %a = readf %self[@a] : !llzk.struct<@MatrixConstrain>, !llzk.felt
      %b = readf %self[@b] : !llzk.struct<@MatrixConstrain>, !llzk.felt
      %c = readf %self[@c] : !llzk.struct<@MatrixConstrain>, !llzk.felt
      %d = readf %self[@d] : !llzk.struct<@MatrixConstrain>, !llzk.felt
      %e = readf %self[@e] : !llzk.struct<@MatrixConstrain>, !llzk.felt
      %f = readf %self[@f] : !llzk.struct<@MatrixConstrain>, !llzk.felt

      %mat = new_array %a, %b, %c, %d, %e, %f : !llzk.array<2,3 x !llzk.felt>

      %check = readf %self[@check] : !llzk.struct<@MatrixConstrain>, !llzk.struct<@ArrayConstrain>
      %0 = index.constant 0
      %arr = extractarr %mat[%0] : !llzk.array<2,3 x !llzk.felt>
      call @ArrayConstrain::@constrain(%check, %arr) : (!llzk.struct<@ArrayConstrain>, !llzk.array<3 x !llzk.felt>) -> ()

      return
    }
  }
}

// CHECK: @ArrayConstrain ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg1[1], <constfelt: 7> }
// CHECK-NEXT: }
// CHECK-NEXT: @MatrixConstrain ConstraintDependencyGraph {
// CHECK-NEXT:     { %arg0[@b], <constfelt: 7> }
// CHECK-NEXT: }