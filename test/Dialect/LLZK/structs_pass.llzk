// RUN: llzk-opt -split-input-file %s 2>&1 | FileCheck --enable-var-scope %s

module attributes {veridise.lang = "llzk"} {
  llzk.struct @Main {
    function.def @compute() -> !llzk.struct<@Main> {
      %self = llzk.new_struct : !llzk.struct<@Main>
      function.return %self : !llzk.struct<@Main>
    }
    function.def @constrain(%self: !llzk.struct<@Main>)  {
      function.return
    }
  }
}
//CHECK-LABEL: llzk.struct @Main {
//CHECK-NEXT:    function.def @compute() -> !llzk.struct<@Main> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@Main>
//CHECK-NEXT:      function.return %[[SELF:[0-9a-zA-Z_\.]+]] : !llzk.struct<@Main>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[A0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@Main>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @Main<[]> {
    function.def @compute() -> !llzk.struct<@Main<[]>> {
      %self = llzk.new_struct : !llzk.struct<@Main<[]>>
      function.return %self : !llzk.struct<@Main<[]>>
    }
    function.def @constrain(%self: !llzk.struct<@Main<[]>>)  {
      function.return
    }
  }
}
//CHECK-LABEL: llzk.struct @Main<[]> {
//CHECK-NEXT:    function.def @compute() -> !llzk.struct<@Main<[]>> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@Main<[]>>
//CHECK-NEXT:      function.return %[[SELF:[0-9a-zA-Z_\.]+]] : !llzk.struct<@Main<[]>>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[A0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@Main<[]>>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentA {
    function.def @compute(%a: !felt.felt) -> !llzk.struct<@ComponentA> {
      %self = llzk.new_struct : !llzk.struct<@ComponentA>
      function.return %self : !llzk.struct<@ComponentA>
    }

    function.def @constrain(%self: !llzk.struct<@ComponentA>, %a: !felt.felt) {
      function.return
    }
  }
}
//CHECK-LABEL:  llzk.struct @ComponentA {
//CHECK-NEXT:     function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !llzk.struct<@ComponentA> attributes {function.allow_witness} {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@ComponentA>
//CHECK-NEXT:       function.return %[[SELF]] : !llzk.struct<@ComponentA>
//CHECK-NEXT:     }
//CHECK-NEXT:     function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA>, %[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt) attributes {function.allow_constraint} {
//CHECK-NEXT:       function.return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentB<[]> {
    function.def @compute(%a: index) -> !llzk.struct<@ComponentB<[]>> {
      %self = llzk.new_struct : !llzk.struct<@ComponentB<[]>>
      function.return %self : !llzk.struct<@ComponentB<[]>>
    }

    function.def @constrain(%self: !llzk.struct<@ComponentB<[]>>, %a: index) {
      function.return
    }
  }
}
//CHECK-LABEL:  llzk.struct @ComponentB<[]> {
//CHECK-NEXT:     function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: index) -> !llzk.struct<@ComponentB<[]>> attributes {function.allow_witness} {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@ComponentB<[]>>
//CHECK-NEXT:       function.return %[[SELF]] : !llzk.struct<@ComponentB<[]>>
//CHECK-NEXT:     }
//CHECK-NEXT:     function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentB<[]>>, %[[A0:[0-9a-zA-Z_\.]+]]: index) attributes {function.allow_constraint} {
//CHECK-NEXT:       function.return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentC<[@A]> {
    function.def @constrain(%self: !llzk.struct<@ComponentC<[@A]>>, %a: !felt.felt, %b: !felt.felt) { function.return }
    function.def @compute(%a: !felt.felt, %b: !felt.felt) -> !llzk.struct<@ComponentC<[@A]>> {
      %self = llzk.new_struct : !llzk.struct<@ComponentC<[@A]>>
      function.return %self : !llzk.struct<@ComponentC<[@A]>>
    }
  }
}
//CHECK-LABEL:  llzk.struct @ComponentC<[@A]> {
//CHECK-NEXT:     function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentC<[@A]>>,
//CHECK-SAME:     %[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !felt.felt) attributes {function.allow_constraint} {
//CHECK-NEXT:       function.return
//CHECK-NEXT:     }
//CHECK-NEXT:     function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !llzk.struct<@ComponentC<[@A]>> attributes {function.allow_witness} {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@ComponentC<[@A]>>
//CHECK-NEXT:       function.return %[[SELF]] : !llzk.struct<@ComponentC<[@A]>>
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentD<[@B, @D, @C]> {
    function.def @constrain(%self: !llzk.struct<@ComponentD<[@B, @D, @C]>>, %a: !felt.felt, %b: !felt.felt) {
      function.return
    }

    function.def @compute(%a: !felt.felt, %b: !felt.felt) -> !llzk.struct<@ComponentD<[@B, @D, @C]>> {
      %self = llzk.new_struct : !llzk.struct<@ComponentD<[@B, @D, @C]>>
      function.return %self : !llzk.struct<@ComponentD<[@B, @D, @C]>>
    }
  }
}
//CHECK-LABEL:  llzk.struct @ComponentD<[@B, @D, @C]> {
//CHECK-NEXT:     function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentD<[@B, @D, @C]>>,
//CHECK-SAME:     %[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !felt.felt) attributes {function.allow_constraint} {
//CHECK-NEXT:       function.return
//CHECK-NEXT:     }
//CHECK-NEXT:     function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !llzk.struct<@ComponentD<[@B, @D, @C]>> attributes {function.allow_witness} {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@ComponentD<[@B, @D, @C]>>
//CHECK-NEXT:       function.return %[[SELF]] : !llzk.struct<@ComponentD<[@B, @D, @C]>>
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentE<[@B, @D, @C]> {
    llzk.field @f1 : !felt.felt
    llzk.field @f2 : !felt.felt {llzk.pub}

    function.def @compute(%a: !felt.felt, %b: !felt.felt) -> !llzk.struct<@ComponentE<[@B, @D, @C]>> {
      %self = llzk.new_struct : !llzk.struct<@ComponentE<[@B, @D, @C]>>
      function.return %self : !llzk.struct<@ComponentE<[@B, @D, @C]>>
    }

    function.def @constrain(%self: !llzk.struct<@ComponentE<[@B, @D, @C]>>, %a: !felt.felt, %b: !felt.felt) {
      function.return
    }
  }
}
//CHECK-LABEL:  llzk.struct @ComponentE<[@B, @D, @C]> {
//CHECK-NEXT:     llzk.field @f1 : !felt.felt
//CHECK-NEXT:     llzk.field @f2 : !felt.felt {llzk.pub}
//CHECK-NEXT:     function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !llzk.struct<@ComponentE<[@B, @D, @C]>> attributes {function.allow_witness} {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@ComponentE<[@B, @D, @C]>>
//CHECK-NEXT:       function.return %[[SELF]] : !llzk.struct<@ComponentE<[@B, @D, @C]>>
//CHECK-NEXT:     }
//CHECK-NEXT:     function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentE<[@B, @D, @C]>>,
//CHECK-SAME:     %[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !felt.felt) attributes {function.allow_constraint} {
//CHECK-NEXT:       function.return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentG1 {
    function.def @compute(%a: !felt.felt) -> !llzk.struct<@ComponentG1> {
      %self = llzk.new_struct : !llzk.struct<@ComponentG1>
      function.return %self : !llzk.struct<@ComponentG1>
    }
    function.def @constrain(%self: !llzk.struct<@ComponentG1>, %a: !felt.felt) { function.return }
  }

  llzk.struct @ComponentG2 {
    llzk.field @f2 : !llzk.struct<@ComponentG1>

    function.def @compute() -> !llzk.struct<@ComponentG2> {
      %self = llzk.new_struct : !llzk.struct<@ComponentG2>
      function.return %self : !llzk.struct<@ComponentG2>
    }

    function.def @constrain(%self: !llzk.struct<@ComponentG2>) {
      %b = felt.nondet
      function.return
    }
  }
}
//CHECK-LABEL:  llzk.struct @ComponentG1 {
//CHECK-NEXT:     function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !llzk.struct<@ComponentG1> attributes {function.allow_witness} {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@ComponentG1>
//CHECK-NEXT:       function.return %[[SELF]] : !llzk.struct<@ComponentG1>
//CHECK-NEXT:     }
//CHECK-NEXT:     function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentG1>, %[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt) attributes {function.allow_constraint} {
//CHECK-NEXT:       function.return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
//CHECK-LABEL:  llzk.struct @ComponentG2 {
//CHECK-NEXT:     llzk.field @f2 : !llzk.struct<@ComponentG1>
//CHECK-NEXT:     function.def @compute() -> !llzk.struct<@ComponentG2> attributes {function.allow_witness} {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@ComponentG2>
//CHECK-NEXT:       function.return %[[SELF]] : !llzk.struct<@ComponentG2>
//CHECK-NEXT:     }
//CHECK-NEXT:     function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentG2>) attributes {function.allow_constraint} {
//CHECK-NEXT:       %felt_nondet = felt.nondet
//CHECK-NEXT:       function.return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentH {
    function.def @compute() -> !llzk.struct<@ComponentH> {
      %self = llzk.new_struct : !llzk.struct<@ComponentH>
      function.return %self : !llzk.struct<@ComponentH>
    }

    function.def @constrain(%self: !llzk.struct<@ComponentH>) {
      function.call @ComponentH::@constrain(%self) : (!llzk.struct<@ComponentH>) -> ()
      function.return
    }
  }
}
//CHECK-LABEL:  llzk.struct @ComponentH {
//CHECK-NEXT:     function.def @compute() -> !llzk.struct<@ComponentH> attributes {function.allow_witness} {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@ComponentH>
//CHECK-NEXT:       function.return %[[SELF]] : !llzk.struct<@ComponentH>
//CHECK-NEXT:     }
//CHECK-NEXT:     function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentH>) attributes {function.allow_constraint} {
//CHECK-NEXT:       function.call @ComponentH::@constrain(%[[SELF]]) : (!llzk.struct<@ComponentH>) -> ()
//CHECK-NEXT:       function.return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentJ1 {
    llzk.field @f1 : !felt.felt

    function.def @compute(%p: !felt.felt) -> !llzk.struct<@ComponentJ1> {
      %self = llzk.new_struct : !llzk.struct<@ComponentJ1>
      function.return %self : !llzk.struct<@ComponentJ1>
    }
    function.def @constrain(%self: !llzk.struct<@ComponentJ1>, %p: !felt.felt) { function.return }
  }

  llzk.struct @ComponentJ2 {
    llzk.field @f2 : !felt.felt
    llzk.field @f3 : !llzk.struct<@ComponentJ1>

    function.def @compute() -> !llzk.struct<@ComponentJ2> {
      %self = llzk.new_struct : !llzk.struct<@ComponentJ2>
      function.return %self : !llzk.struct<@ComponentJ2>
    }

    function.def @constrain(%self: !llzk.struct<@ComponentJ2>) {
      %a = llzk.readf %self[@f2] : !llzk.struct<@ComponentJ2>, !felt.felt
      %b = llzk.readf %self[@f3] : !llzk.struct<@ComponentJ2>, !llzk.struct<@ComponentJ1>
      function.call @ComponentJ1::@constrain(%b, %a) : (!llzk.struct<@ComponentJ1>, !felt.felt) -> ()
      function.return
    }
  }
}
//CHECK-LABEL:  llzk.struct @ComponentJ1 {
//CHECK-NEXT:     llzk.field @f1 : !felt.felt
//CHECK-NEXT:     function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !llzk.struct<@ComponentJ1> attributes {function.allow_witness} {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@ComponentJ1>
//CHECK-NEXT:       function.return %[[SELF]] : !llzk.struct<@ComponentJ1>
//CHECK-NEXT:     }
//CHECK-NEXT:     function.def @constrain(%[[A0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentJ1>, %[[A1:[0-9a-zA-Z_\.]+]]: !felt.felt) attributes {function.allow_constraint} {
//CHECK-NEXT:       function.return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
//CHECK-LABEL:  llzk.struct @ComponentJ2 {
//CHECK-NEXT:     llzk.field @f2 : !felt.felt
//CHECK-NEXT:     llzk.field @f3 : !llzk.struct<@ComponentJ1>
//CHECK-NEXT:     function.def @compute() -> !llzk.struct<@ComponentJ2> attributes {function.allow_witness} {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@ComponentJ2>
//CHECK-NEXT:       function.return %[[SELF]] : !llzk.struct<@ComponentJ2>
//CHECK-NEXT:     }
//CHECK-NEXT:     function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentJ2>) attributes {function.allow_constraint} {
//CHECK-NEXT:       %0 = llzk.readf %[[SELF]][@f2] : <@ComponentJ2>, !felt.felt
//CHECK-NEXT:       %1 = llzk.readf %[[SELF]][@f3] : <@ComponentJ2>, !llzk.struct<@ComponentJ1>
//CHECK-NEXT:       function.call @ComponentJ1::@constrain(%1, %0) : (!llzk.struct<@ComponentJ1>, !felt.felt) -> ()
//CHECK-NEXT:       function.return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "llzk"} {
  function.def @identity(%x: !felt.felt) -> !felt.felt {
    function.return %x: !felt.felt
  }

  llzk.struct @ComponentK {
    function.def @compute(%a: !felt.felt) -> !llzk.struct<@ComponentK> {
      %self = llzk.new_struct : !llzk.struct<@ComponentK>
      function.return %self : !llzk.struct<@ComponentK>
    }

    function.def @constrain(%self: !llzk.struct<@ComponentK>, %a: !felt.felt) {
      function.call @identity(%a) : (!felt.felt) -> (!felt.felt)
      function.return
    }
  }
}
//CHECK-LABEL:  function.def @identity
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !felt.felt {
//CHECK-NEXT:     function.return %[[A0:[0-9a-zA-Z_\.]+]] : !felt.felt
//CHECK-NEXT:   }
//CHECK-LABEL:  llzk.struct @ComponentK {
//CHECK-NEXT:     function.def @compute(%[[A1:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !llzk.struct<@ComponentK> attributes {function.allow_witness} {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@ComponentK>
//CHECK-NEXT:       function.return %[[SELF]] : !llzk.struct<@ComponentK>
//CHECK-NEXT:     }
//CHECK-NEXT:     function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentK>, %[[A1:[0-9a-zA-Z_\.]+]]: !felt.felt) attributes {function.allow_constraint} {
//CHECK-NEXT:       %0 = function.call @identity(%[[A1:[0-9a-zA-Z_\.]+]]) : (!felt.felt) -> !felt.felt
//CHECK-NEXT:       function.return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentM {
    function.def @compute(%p: !felt.felt) -> !llzk.struct<@ComponentM> {
      %self = llzk.new_struct : !llzk.struct<@ComponentM>
      // initialize all fields of `%self` here
      function.return %self : !llzk.struct<@ComponentM>
    }
    function.def @constrain(%self: !llzk.struct<@ComponentM>, %p: !felt.felt) { function.return }
  }
}
//CHECK-LABEL:   llzk.struct @ComponentM {
//CHECK-NEXT:      function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !llzk.struct<@ComponentM> attributes {function.allow_witness} {
//CHECK-NEXT:        %[[SELF:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@ComponentM>
//CHECK-NEXT:        function.return %[[SELF]] : !llzk.struct<@ComponentM>
//CHECK-NEXT:      }
//CHECK-NEXT:      function.def @constrain(%[[A0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentM>, %arg1: !felt.felt) attributes {function.allow_constraint} {
//CHECK-NEXT:        function.return
//CHECK-NEXT:      }
//CHECK-NEXT:    }
// -----

module attributes {veridise.lang = "llzk"} {
  module @mod1 {
    llzk.struct @ComponentP1 {
      function.def @compute() -> !llzk.struct<@mod1::@ComponentP1> {
        %self = llzk.new_struct : !llzk.struct<@mod1::@ComponentP1>
        function.return %self : !llzk.struct<@mod1::@ComponentP1>
      }
      function.def @constrain(%self: !llzk.struct<@mod1::@ComponentP1>) { function.return }
    }
    module @mod2 {
      llzk.struct @ComponentP2 {
        function.def @compute() -> !llzk.struct<@mod1::@mod2::@ComponentP2> {
          %self = llzk.new_struct : !llzk.struct<@mod1::@mod2::@ComponentP2>
          function.return %self : !llzk.struct<@mod1::@mod2::@ComponentP2>
        }
        function.def @constrain(%self: !llzk.struct<@mod1::@mod2::@ComponentP2>) { function.return }
      }
    }
  }
  llzk.struct @ComponentP3 {
    llzk.field @f1 : !llzk.struct<@mod1::@ComponentP1>
    llzk.field @f2 : !llzk.struct<@mod1::@mod2::@ComponentP2>
    llzk.field @f3 : !array.array<27,3,2,1,1,7 x !llzk.struct<@mod1::@ComponentP1>>
    llzk.field @f4 : !array.array<2 x !llzk.struct<@mod1::@mod2::@ComponentP2>>

    function.def @compute() -> !llzk.struct<@ComponentP3> {
      %self = llzk.new_struct : !llzk.struct<@ComponentP3>
      function.return %self : !llzk.struct<@ComponentP3>
    }
    function.def @constrain(%self: !llzk.struct<@ComponentP3>) { function.return }
  }
}
//CHECK-LABEL:  module @mod1 {
//CHECK-LABEL:    llzk.struct @ComponentP1 {
//CHECK-NEXT:       function.def @compute() -> !llzk.struct<@mod1::@ComponentP1> attributes {function.allow_witness} {
//CHECK-NEXT:         %[[SELF:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@mod1::@ComponentP1>
//CHECK-NEXT:         function.return %[[SELF]] : !llzk.struct<@mod1::@ComponentP1>
//CHECK-NEXT:       }
//CHECK-NEXT:       function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@mod1::@ComponentP1>) attributes {function.allow_constraint} {
//CHECK-NEXT:         function.return
//CHECK-NEXT:       }
//CHECK-NEXT:     }
//CHECK-LABEL:    module @mod2 {
//CHECK-LABEL:      llzk.struct @ComponentP2 {
//CHECK-NEXT:         function.def @compute() -> !llzk.struct<@mod1::@mod2::@ComponentP2> attributes {function.allow_witness} {
//CHECK-NEXT:           %[[SELF:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@mod1::@mod2::@ComponentP2>
//CHECK-NEXT:           function.return %[[SELF]] : !llzk.struct<@mod1::@mod2::@ComponentP2>
//CHECK-NEXT:         }
//CHECK-NEXT:         function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@mod1::@mod2::@ComponentP2>) attributes {function.allow_constraint} {
//CHECK-NEXT:           function.return
//CHECK-NEXT:         }
//CHECK-NEXT:       }
//CHECK-NEXT:     }
//CHECK-NEXT:   }
//CHECK-LABEL:  llzk.struct @ComponentP3 {
//CHECK-NEXT:     llzk.field @f1 : !llzk.struct<@mod1::@ComponentP1>
//CHECK-NEXT:     llzk.field @f2 : !llzk.struct<@mod1::@mod2::@ComponentP2>
//CHECK-NEXT:     llzk.field @f3 : !array.array<27,3,2,1,1,7 x !llzk.struct<@mod1::@ComponentP1>>
//CHECK-NEXT:     llzk.field @f4 : !array.array<2 x !llzk.struct<@mod1::@mod2::@ComponentP2>>
//CHECK-NEXT:     function.def @compute() -> !llzk.struct<@ComponentP3> attributes {function.allow_witness} {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = llzk.new_struct : <@ComponentP3>
//CHECK-NEXT:       function.return %[[SELF]] : !llzk.struct<@ComponentP3>
//CHECK-NEXT:     }
//CHECK-NEXT:     function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentP3>) attributes {function.allow_constraint} {
//CHECK-NEXT:       function.return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentP1 {
    function.def @compute() -> !llzk.struct<@ComponentP1> {
      %self = llzk.new_struct : !llzk.struct<@ComponentP1>
      function.return %self : !llzk.struct<@ComponentP1>
    }
    function.def @constrain(%self: !llzk.struct<@ComponentP1>) { function.return }
  }
  module @mod2 {
    llzk.struct @ComponentP2 {
      function.def @compute() -> !llzk.struct<@mod2::@ComponentP2> {
        %self = llzk.new_struct : !llzk.struct<@mod2::@ComponentP2>
        function.return %self : !llzk.struct<@mod2::@ComponentP2>
      }
      function.def @constrain(%self: !llzk.struct<@mod2::@ComponentP2>) { function.return }
    }
  }
  module @mod1 {
    llzk.struct @ComponentP3 {
      llzk.field @f1 : !llzk.struct<@ComponentP1>
      llzk.field @f2 : !llzk.struct<@mod2::@ComponentP2>
      llzk.field @f3 : !array.array<27,3,2,1,1,7 x !llzk.struct<@ComponentP1>>
      llzk.field @f4 : !array.array<2 x !llzk.struct<@mod2::@ComponentP2>>

      function.def @compute() -> !llzk.struct<@mod1::@ComponentP3> {
        %self = llzk.new_struct : !llzk.struct<@mod1::@ComponentP3>
        function.return %self : !llzk.struct<@mod1::@ComponentP3>
      }
      function.def @constrain(%self: !llzk.struct<@mod1::@ComponentP3>) { function.return }
    }
  }
}
//CHECK-LABEL:  llzk.struct @ComponentP1 {
//CHECK-NEXT:     function.def @compute() -> !llzk.struct<@ComponentP1> attributes {function.allow_witness} {
//CHECK-NEXT:       %self = llzk.new_struct : <@ComponentP1>
//CHECK-NEXT:       function.return %self : !llzk.struct<@ComponentP1>
//CHECK-NEXT:     }
//CHECK-NEXT:     function.def @constrain(%arg0: !llzk.struct<@ComponentP1>) attributes {function.allow_constraint} {
//CHECK-NEXT:       function.return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
//CHECK-LABEL:  module @mod2 {
//CHECK-LABEL:    llzk.struct @ComponentP2 {
//CHECK-NEXT:       function.def @compute() -> !llzk.struct<@mod2::@ComponentP2> attributes {function.allow_witness} {
//CHECK-NEXT:         %self = llzk.new_struct : <@mod2::@ComponentP2>
//CHECK-NEXT:         function.return %self : !llzk.struct<@mod2::@ComponentP2>
//CHECK-NEXT:       }
//CHECK-NEXT:       function.def @constrain(%arg0: !llzk.struct<@mod2::@ComponentP2>) attributes {function.allow_constraint} {
//CHECK-NEXT:         function.return
//CHECK-NEXT:       }
//CHECK-NEXT:     }
//CHECK-NEXT:   }
//CHECK-LABEL:  module @mod1 {
//CHECK-LABEL:    llzk.struct @ComponentP3 {
//CHECK-NEXT:       llzk.field @f1 : !llzk.struct<@ComponentP1>
//CHECK-NEXT:       llzk.field @f2 : !llzk.struct<@mod2::@ComponentP2>
//CHECK-NEXT:       llzk.field @f3 : !array.array<27,3,2,1,1,7 x !llzk.struct<@ComponentP1>>
//CHECK-NEXT:       llzk.field @f4 : !array.array<2 x !llzk.struct<@mod2::@ComponentP2>>
//CHECK-NEXT:       function.def @compute() -> !llzk.struct<@mod1::@ComponentP3> attributes {function.allow_witness} {
//CHECK-NEXT:         %self = llzk.new_struct : <@mod1::@ComponentP3>
//CHECK-NEXT:         function.return %self : !llzk.struct<@mod1::@ComponentP3>
//CHECK-NEXT:       }
//CHECK-NEXT:       function.def @constrain(%arg0: !llzk.struct<@mod1::@ComponentP3>) attributes {function.allow_constraint} {
//CHECK-NEXT:         function.return
//CHECK-NEXT:       }
//CHECK-NEXT:     }
//CHECK-NEXT:   }
