// RUN: llzk-opt -split-input-file -verify-diagnostics %s


module attributes {veridise.lang = "llzk"} {
  function.def private @a()
  // expected-error@+1 {{ref "@a" in type '!llzk.array<@a x !llzk.felt>' refers to a 'function.def' which is not allowed}}
  function.def private @b(%x: !llzk.array<@a x !llzk.felt>)
}
// -----

module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{'function.def' op references unknown symbol "@B"}}
  function.def private @c1(%x: !llzk.array<5,@B x index>)
}
// -----

module attributes {veridise.lang = "llzk"} {
  // expected-error@+2 {{'function.def' op references unknown symbol "@A"}}
  // expected-error@+1 {{'function.def' op references unknown symbol "@C"}}
  function.def private @c2(%x: !llzk.array<@A,3,@C x index>)
}
// -----

// expected-error@+1 {{Array dimension must be one of ['builtin.integer', 'builtin.symbol_ref', 'builtin.affine_map'] but found 'builtin.type'}}
function.def private @d(%x: !llzk.array<index x i256>)
// -----

// expected-error@+3 {{Array dimension must be one of ['builtin.integer', 'builtin.symbol_ref', 'builtin.affine_map'] but found 'builtin.type'}}
// expected-error@+2 {{Array dimension must be one of ['builtin.integer', 'builtin.symbol_ref', 'builtin.affine_map'] but found 'builtin.string'}}
// expected-error@+1 {{Array dimension must be one of ['builtin.integer', 'builtin.symbol_ref', 'builtin.affine_map'] but found 'builtin.array'}}
function.def private @e(%x: !llzk.array<index,"string",[] x !llzk.felt>)
// -----

// expected-error@+1 {{expected a valid LLZK type but found 'i256'}}
function.def private @f(%x: !llzk.array<5 x i256>)
// -----

// expected-error@+2 {{'llzk.array' element type cannot be 'llzk.array'}}
// expected-error@+1 {{failed to parse LLZK_ArrayType parameter 'elementType' which is to be a `::mlir::Type`}}
function.def private @g(%x: !llzk.array<2 x !llzk.array<3 x !llzk.array<2 x i1>>>)
// -----

// expected-error@+1 {{Array dimension must be one of ['builtin.integer', 'builtin.symbol_ref', 'builtin.affine_map'] but found 'builtin.type'}}
function.def private @h(%x: !llzk.array<!llzk.felt>)
// -----

// expected-error@+2 {{expected attribute value}}
// expected-error@+1 {{failed to parse array dimensions}}
function.def private @i(%x: !llzk.array<,, x !llzk.felt>)
// -----

// expected-error@+2 {{expected attribute value}}
// expected-error@+1 {{failed to parse array dimensions}}
function.def private @j(%x: !llzk.array< x !llzk.felt>)
// -----

// expected-error@+2 {{expected attribute value}}
// expected-error@+1 {{failed to parse array dimensions}}
function.def private @k(%x: !llzk.array<1,private, x !llzk.felt>)
// -----

// expected-error@+2 {{expected attribute value}}
// expected-error@+1 {{failed to parse array dimensions}}
function.def private @l(%x: !llzk.array<1,3, x !llzk.felt>)
// -----

// expected-error@+1 {{Array dimension must be one of ['builtin.integer', 'builtin.symbol_ref', 'builtin.affine_map'] but found 'builtin.string'}}
function.def private @m(%x: !llzk.array<1,"string",3 x !llzk.felt>)
// -----

// expected-error@+1 {{'llzk.array' element type cannot be 'llzk.array'}}
function.def private @n(%x: !llzk.array<1,3 x !llzk.array<2 x !llzk.felt>>)
// -----

// expected-error@+1 {{Array dimension must be one of ['builtin.integer', 'builtin.symbol_ref', 'builtin.affine_map'] but found 'builtin.array'}}
function.def private @o(%x: !llzk.array<[] x !llzk.felt>)
// -----

// expected-error@+1 {{AffineMapAttr must yield a single result, but found 0 results}}
function.def private @p(%x: !llzk.array<affine_map<(i) -> ()> x !llzk.felt>)

// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @q {
    // expected-error@+1 {{AffineMapAttr must yield a single result, but found 3 results}}
    field @foo : !llzk.array<affine_map<(i) -> (1, 2, i)> x !llzk.felt>
    function.def @compute() -> !llzk.struct<@q> {
      %self = new_struct : !llzk.struct<@q>
      function.return %self : !llzk.struct<@q>
    }
    function.def @constrain(%self : !llzk.struct<@q>) {
      function.return
    }
  }
}
