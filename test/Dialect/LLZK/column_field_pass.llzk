// RUN: llzk-opt -split-input-file %s 2>&1 | FileCheck --enable-var-scope %s

module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentA1 {
    struct.field @f1 : !felt.felt {column}

    function.def @constrain(%self: !struct.struct<@ComponentA1>) { function.return }
    function.def @compute() -> !struct.struct<@ComponentA1> {
      %self = struct.new : !struct.struct<@ComponentA1>
      function.return %self : !struct.struct<@ComponentA1>
    }
  }

  struct.def @ComponentA2 {
    function.def @compute(%p: !struct.struct<@ComponentA1>) -> !struct.struct<@ComponentA2> {
      %self = struct.new : !struct.struct<@ComponentA2>
      %r = struct.readf %p[@f1] : !struct.struct<@ComponentA1>, !felt.felt {tableOffset = -1 : index}
      function.return %self : !struct.struct<@ComponentA2>
    }

    function.def @constrain(%self: !struct.struct<@ComponentA2>, %p: !struct.struct<@ComponentA1>) {
      function.return
    }
  }
}
//CHECK-LABEL: struct.def @ComponentA1 {
//CHECK-NEXT:    struct.field @f1 : !felt.felt {column}
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentA1>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @compute() -> !struct.struct<@ComponentA1> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA1>
//CHECK-NEXT:      function.return %[[SELF]] : !struct.struct<@ComponentA1>
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: struct.def @ComponentA2 {
//CHECK-NEXT:    function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentA1>) -> !struct.struct<@ComponentA2> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA2>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = struct.readf %[[A0]][@f1] : <@ComponentA1>, !felt.felt {tableOffset = -1 : index}
//CHECK-NEXT:      function.return %[[SELF]] : !struct.struct<@ComponentA2>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentA2>, %[[A0:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentA1>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentA2 {
    struct.field @f1 : !felt.felt {column}
    function.def @compute() -> !struct.struct<@ComponentA2> {
      %self = struct.new : !struct.struct<@ComponentA2>
      %r = struct.readf %self[@f1] : !struct.struct<@ComponentA2>, !felt.felt {tableOffset = -1 : index}
      function.return %self : !struct.struct<@ComponentA2>
    }

    function.def @constrain(%self: !struct.struct<@ComponentA2>) {
      function.return
    }
  }
}
//CHECK-LABEL: struct.def @ComponentA2 {
//CHECK-NEXT:    struct.field @f1 : !felt.felt {column}
//CHECK-NEXT:    function.def @compute() -> !struct.struct<@ComponentA2> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA2>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = struct.readf %[[SELF]][@f1] : <@ComponentA2>, !felt.felt {tableOffset = -1 : index}
//CHECK-NEXT:      function.return %[[SELF]] : !struct.struct<@ComponentA2>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentA2>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentA2 {
    struct.field @f1 : !array.array<3 x !felt.felt> {column}
    function.def @compute() -> !struct.struct<@ComponentA2> {
      %self = struct.new : !struct.struct<@ComponentA2>
      %r = struct.readf %self[@f1] : !struct.struct<@ComponentA2>, !array.array<3 x !felt.felt> {tableOffset = -1 : index}
      function.return %self : !struct.struct<@ComponentA2>
    }

    function.def @constrain(%self: !struct.struct<@ComponentA2>) {
      function.return
    }
  }
}
//CHECK-LABEL: struct.def @ComponentA2 {
//CHECK-NEXT:    struct.field @f1 : !array.array<3 x !felt.felt> {column}
//CHECK-NEXT:    function.def @compute() -> !struct.struct<@ComponentA2> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA2>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = struct.readf %[[SELF]][@f1] : <@ComponentA2>, !array.array<3 x !felt.felt> {tableOffset = -1 : index}
//CHECK-NEXT:      function.return %[[SELF]] : !struct.struct<@ComponentA2>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentA2>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentA1 {
    struct.field @f1 : !felt.felt {column}

    function.def @constrain(%self: !struct.struct<@ComponentA1>) { function.return }
    function.def @compute() -> !struct.struct<@ComponentA1> {
      %self = struct.new : !struct.struct<@ComponentA1>
      function.return %self : !struct.struct<@ComponentA1>
    }
  }
  struct.def @ComponentA2 {
    struct.field @c1 : !struct.struct<@ComponentA1> {column}
    function.def @compute() -> !struct.struct<@ComponentA2> {
      %self = struct.new : !struct.struct<@ComponentA2>
      %r = struct.readf %self[@c1] : !struct.struct<@ComponentA2>, !struct.struct<@ComponentA1> {tableOffset = -2 : index}
      function.return %self : !struct.struct<@ComponentA2>
    }

    function.def @constrain(%self: !struct.struct<@ComponentA2>) {
      function.return
    }
  }
}
//CHECK-LABEL: struct.def @ComponentA1 {
//CHECK-NEXT:    struct.field @f1 : !felt.felt {column}
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentA1>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @compute() -> !struct.struct<@ComponentA1> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA1>
//CHECK-NEXT:      function.return %[[SELF]] : !struct.struct<@ComponentA1>
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: struct.def @ComponentA2 {
//CHECK-NEXT:    struct.field @c1 : !struct.struct<@ComponentA1> {column}
//CHECK-NEXT:    function.def @compute() -> !struct.struct<@ComponentA2> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA2>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = struct.readf %[[SELF]][@c1] : <@ComponentA2>, !struct.struct<@ComponentA1> {tableOffset = -2 : index}
//CHECK-NEXT:      function.return %[[SELF]] : !struct.struct<@ComponentA2>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentA2>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
// -----
module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentA1 {
    struct.field @f1 : !felt.felt {column}

    function.def @constrain(%self: !struct.struct<@ComponentA1>) { function.return }
    function.def @compute() -> !struct.struct<@ComponentA1> {
      %self = struct.new : !struct.struct<@ComponentA1>
      function.return %self : !struct.struct<@ComponentA1>
    }
  }
  struct.def @ComponentA2 {
    struct.field @c1 : !array.array<2 x !struct.struct<@ComponentA1>> {column}
    function.def @compute() -> !struct.struct<@ComponentA2> {
      %self = struct.new : !struct.struct<@ComponentA2>
      %r = struct.readf %self[@c1] : !struct.struct<@ComponentA2>, !array.array<2 x !struct.struct<@ComponentA1>> {tableOffset = -2 : index}
      function.return %self : !struct.struct<@ComponentA2>
    }

    function.def @constrain(%self: !struct.struct<@ComponentA2>) {
      function.return
    }
  }
}
//CHECK-LABEL: struct.def @ComponentA1 {
//CHECK-NEXT:    struct.field @f1 : !felt.felt {column}
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentA1>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @compute() -> !struct.struct<@ComponentA1> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA1>
//CHECK-NEXT:      function.return %[[SELF]] : !struct.struct<@ComponentA1>
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: struct.def @ComponentA2 {
//CHECK-NEXT:    struct.field @c1 : !array.array<2 x !struct.struct<@ComponentA1>> {column}
//CHECK-NEXT:    function.def @compute() -> !struct.struct<@ComponentA2> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA2>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = struct.readf %[[SELF]][@c1] : <@ComponentA2>, !array.array<2 x !struct.struct<@ComponentA1>> {tableOffset = -2 : index}
//CHECK-NEXT:      function.return %[[SELF]] : !struct.struct<@ComponentA2>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentA2>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentA1<[@T]> {
    struct.field @f1 : !llzk.tvar<@T> {column}

    function.def @constrain(%self: !struct.struct<@ComponentA1<[@T]>>) { function.return }
    function.def @compute() -> !struct.struct<@ComponentA1<[@T]>> {
      %self = struct.new : !struct.struct<@ComponentA1<[@T]>>
      function.return %self : !struct.struct<@ComponentA1<[@T]>>
    }
  }
}
//CHECK-LABEL: struct.def @ComponentA1<[@T]> {
//CHECK-NEXT:    struct.field @f1 : !llzk.tvar<@T> {column}
//CHECK-NEXT:    function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentA1<[@T]>>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @compute() -> !struct.struct<@ComponentA1<[@T]>> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA1<[@T]>>
//CHECK-NEXT:      function.return %[[SELF]] : !struct.struct<@ComponentA1<[@T]>>
//CHECK-NEXT:    }
//CHECK-NEXT:  }

