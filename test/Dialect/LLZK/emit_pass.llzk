// RUN: llzk-opt -split-input-file %s 2>&1 | FileCheck --enable-var-scope %s

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentA {
    func @constrain(%self: !llzk.struct<@ComponentA>, %a: !llzk.felt, %b: !llzk.felt) {
      llzk.emit_eq %a, %b : !llzk.felt
      return
    }

    func @compute(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.struct<@ComponentA> {
      %self = new_struct : !llzk.struct<@ComponentA>
      return %self : !llzk.struct<@ComponentA>
    }
  }
}
//CHECK-LABEL:  llzk.struct @ComponentA {
//CHECK-NEXT:     func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA>,
//CHECK-SAME:         %[[A0:[0-9a-zA-Z_\.]+]]: !llzk.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !llzk.felt) {
//CHECK-NEXT:       emit_eq %[[A0]], %[[A1]] : !llzk.felt, !llzk.felt
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !llzk.felt,
//CHECK-SAME:         %[[A1:[0-9a-zA-Z_\.]+]]: !llzk.felt) -> !llzk.struct<@ComponentA> {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentA>
//CHECK-NEXT:       return %[[SELF]] : !llzk.struct<@ComponentA>
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentB {
    func @constrain(%self: !llzk.struct<@ComponentB>, %a: !llzk.felt, %b: !llzk.array<5 x !llzk.felt>) {
      llzk.emit_in %b, %a : !llzk.array<5 x !llzk.felt>
      return
    }

    func @compute(%a: !llzk.felt, %b: !llzk.array<5 x !llzk.felt>) -> !llzk.struct<@ComponentB> {
      %self = new_struct : !llzk.struct<@ComponentB>
      return %self : !llzk.struct<@ComponentB>
    }
  }
}
//CHECK-LABEL:  llzk.struct @ComponentB {
//CHECK-NEXT:     func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentB>,
//CHECK-SAME:         %[[A0:[0-9a-zA-Z_\.]+]]: !llzk.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !llzk.array<5 x !llzk.felt>) {
//CHECK-NEXT:       emit_in %[[A1]], %[[A0]] : <5 x !llzk.felt>, !llzk.felt
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !llzk.felt,
//CHECK-SAME:         %[[A1:[0-9a-zA-Z_\.]+]]: !llzk.array<5 x !llzk.felt>) -> !llzk.struct<@ComponentB> {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentB>
//CHECK-NEXT:       return %[[SELF]] : !llzk.struct<@ComponentB>
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentC {
    func @constrain(%self: !llzk.struct<@ComponentC>, %a: index, %b: !llzk.array<89 x index>) {
      llzk.emit_in %b, %a : !llzk.array<89 x index>
      return
    }

    func @compute(%a: index, %b: !llzk.array<89 x index>) -> !llzk.struct<@ComponentC> {
      %self = new_struct : !llzk.struct<@ComponentC>
      return %self : !llzk.struct<@ComponentC>
    }
  }
}
//CHECK-LABEL:  llzk.struct @ComponentC {
//CHECK-NEXT:     func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentC>,
//CHECK-SAME:         %[[A0:[0-9a-zA-Z_\.]+]]: index, %[[A1:[0-9a-zA-Z_\.]+]]: !llzk.array<89 x index>) {
//CHECK-NEXT:       emit_in %[[A1]], %[[A0]] : <89 x index>, index
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @compute(%[[A0:[0-9a-zA-Z_\.]+]]: index,
//CHECK-SAME:         %[[A1:[0-9a-zA-Z_\.]+]]: !llzk.array<89 x index>) -> !llzk.struct<@ComponentC> {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentC>
//CHECK-NEXT:       return %[[SELF]] : !llzk.struct<@ComponentC>
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----


module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentD {
    func @constrain(%self: !llzk.struct<@ComponentD>, %b: !llzk.array<89 x !llzk.struct<@ComponentD>>) {
      llzk.emit_in %b, %self : !llzk.array<89 x !llzk.struct<@ComponentD>>
      return
    }

    func @compute(%b: !llzk.array<89 x !llzk.struct<@ComponentD>>) -> !llzk.struct<@ComponentD> {
      %self = new_struct : !llzk.struct<@ComponentD>
      return %self : !llzk.struct<@ComponentD>
    }
  }
}
//CHECK-LABEL:  llzk.struct @ComponentD {
//CHECK-NEXT:     func @constrain(%[[A0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentD>,
//CHECK-SAME:         %[[A1:[0-9a-zA-Z_\.]+]]: !llzk.array<89 x !llzk.struct<@ComponentD>>) {
//CHECK-NEXT:       emit_in %[[A1]], %[[A0]] : <89 x !llzk.struct<@ComponentD>>, !llzk.struct<@ComponentD>
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @compute(%[[A1:[0-9a-zA-Z_\.]+]]: !llzk.array<89 x !llzk.struct<@ComponentD>>) -> !llzk.struct<@ComponentD> {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentD>
//CHECK-NEXT:       return %[[SELF]] : !llzk.struct<@ComponentD>
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentE {
    func @constrain(%self: !llzk.struct<@ComponentE>, %a: index, %b: !llzk.array<89,2 x index>) {
      llzk.emit_in %b, %a : !llzk.array<89,2 x index>
      return
    }

    func @compute(%a: index, %b: !llzk.array<89,2 x index>) -> !llzk.struct<@ComponentE> {
      %self = new_struct : !llzk.struct<@ComponentE>
      return %self : !llzk.struct<@ComponentE>
    }
  }
}
//CHECK-LABEL:  llzk.struct @ComponentE {
//CHECK-NEXT:     func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentE>,
//CHECK-SAME:         %[[A0:[0-9a-zA-Z_\.]+]]: index, %[[A1:[0-9a-zA-Z_\.]+]]: !llzk.array<89,2 x index>) {
//CHECK-NEXT:       emit_in %[[A1]], %[[A0]] : <89,2 x index>, index
//CHECK-NEXT:       return
//CHECK-NEXT:     }
//CHECK-NEXT:     func @compute(%[[A0:[0-9a-zA-Z_\.]+]]: index,
//CHECK-SAME:         %[[A1:[0-9a-zA-Z_\.]+]]: !llzk.array<89,2 x index>) -> !llzk.struct<@ComponentE> {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentE>
//CHECK-NEXT:       return %[[SELF]] : !llzk.struct<@ComponentE>
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----
