// RUN: llzk-opt -split-input-file %s 2>&1 | FileCheck %s

llzk.func @arr_constant_index() -> !llzk.array<3 x index> {
  %a = index.constant 45
  %b = index.constant 214
  %c = index.constant 2
  %r = llzk.new_array %a, %b, %c : !llzk.array<3 x index>
  return %r: !llzk.array<3 x index>
}
//CHECK-LABEL:  llzk.func @arr_constant_index() -> !llzk.array<3 x index> {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = index.constant 45
//CHECK-NEXT:     %[[T2:[0-9a-zA-Z_\.]+]] = index.constant 214
//CHECK-NEXT:     %[[T3:[0-9a-zA-Z_\.]+]] = index.constant 2
//CHECK-NEXT:     %[[T4:[0-9a-zA-Z_\.]+]] = new_array %[[T1]], %[[T2]], %[[T3]] : <3 x index>
//CHECK-NEXT:     return %[[T4]] : !llzk.array<3 x index>
//CHECK-NEXT:   }
// -----

llzk.func @arr_mix_index(%a: index, %b: index) -> !llzk.array<4 x index> {
  %c = index.constant 324
  %d = index.constant 999
  %r = llzk.new_array %a, %b, %c, %d: !llzk.array<4 x index>
  return %r: !llzk.array<4 x index>
}
//CHECK-LABEL:  llzk.func @arr_mix_index
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: index, %[[A1:[0-9a-zA-Z_\.]+]]: index) -> !llzk.array<4 x index> {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = index.constant 324
//CHECK-NEXT:     %[[T2:[0-9a-zA-Z_\.]+]] = index.constant 999
//CHECK-NEXT:     %[[T3:[0-9a-zA-Z_\.]+]] = new_array %[[A0]], %[[A1]], %[[T1]], %[[T2]] : <4 x index>
//CHECK-NEXT:     return %[[T3]] : !llzk.array<4 x index>
//CHECK-NEXT:   }
// -----

llzk.func @arr_mix_index(%a: index, %b: index) -> !llzk.array<2,2 x index> {
  %c = index.constant 324
  %d = index.constant 999
  %r = llzk.new_array %a, %b, %c, %d: !llzk.array<2,2 x index>
  return %r: !llzk.array<2,2 x index>
}
//CHECK-LABEL:  llzk.func @arr_mix_index
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: index, %[[A1:[0-9a-zA-Z_\.]+]]: index) -> !llzk.array<2,2 x index> {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = index.constant 324
//CHECK-NEXT:     %[[T2:[0-9a-zA-Z_\.]+]] = index.constant 999
//CHECK-NEXT:     %[[T3:[0-9a-zA-Z_\.]+]] = new_array %[[A0]], %[[A1]], %[[T1]], %[[T2]] : <2,2 x index>
//CHECK-NEXT:     return %[[T3]] : !llzk.array<2,2 x index>
//CHECK-NEXT:   }
// -----

llzk.func @arr_3D(%0: index, %1: index, %2: index, %3: index, %4: index, %5: index, %6: index, %7: index) -> !llzk.array<2,2,2 x index> {
  %r = llzk.new_array %0, %1, %2, %3, %4, %5, %6, %7: !llzk.array<2,2,2 x index>
  return %r: !llzk.array<2,2,2 x index>
}
//CHECK-LABEL:  llzk.func @arr_3D
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: index, %[[A1:[0-9a-zA-Z_\.]+]]: index,
//CHECK-SAME:    %[[A2:[0-9a-zA-Z_\.]+]]: index, %[[A3:[0-9a-zA-Z_\.]+]]: index,
//CHECK-SAME:    %[[A4:[0-9a-zA-Z_\.]+]]: index, %[[A5:[0-9a-zA-Z_\.]+]]: index,
//CHECK-SAME:    %[[A6:[0-9a-zA-Z_\.]+]]: index, %[[A7:[0-9a-zA-Z_\.]+]]: index)
//CHECK-SAME:   -> !llzk.array<2,2,2 x index> {
//CHECK-NEXT:     %[[T3:[0-9a-zA-Z_\.]+]] = new_array %[[A0]], %[[A1]], %[[A2]], %[[A3]], %[[A4]], %[[A5]], %[[A6]], %[[A7]] : <2,2,2 x index>
//CHECK-NEXT:     return %[[T3]] : !llzk.array<2,2,2 x index>
//CHECK-NEXT:   }
// -----

llzk.func @arr_arr_mix_index(%a: index, %b: index) -> !llzk.array<2 , 2 x index> {
  %c = index.constant 343245
  %d = index.constant 345
  %r = llzk.new_array %a, %b, %c, %d: !llzk.array<2 , 2 x index>
  return %r: !llzk.array<2 , 2 x index>
}
//CHECK-LABEL:  llzk.func @arr_arr_mix_index
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: index, %[[A1:[0-9a-zA-Z_\.]+]]: index) -> !llzk.array<2,2 x index> {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = index.constant 343245
//CHECK-NEXT:     %[[T2:[0-9a-zA-Z_\.]+]] = index.constant 345
//CHECK-NEXT:     %[[T3:[0-9a-zA-Z_\.]+]] = new_array %[[A0]], %[[A1]], %[[T1]], %[[T2]] : <2,2 x index>
//CHECK-NEXT:     return %[[T3]] : !llzk.array<2,2 x index>
//CHECK-NEXT:   }
// -----

llzk.func @arr_constant_felt() -> !llzk.array<2 x !llzk.felt> {
  %a = llzk.constfelt 6744573456376
  %b = llzk.constfelt 381928390103509
  %r = llzk.new_array %a, %b : !llzk.array<2 x !llzk.felt>
  return %r: !llzk.array<2 x !llzk.felt>
}
//CHECK-LABEL:  llzk.func @arr_constant_felt() -> !llzk.array<2 x !llzk.felt> {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = constfelt  6744573456376
//CHECK-NEXT:     %[[T2:[0-9a-zA-Z_\.]+]] = constfelt  381928390103509
//CHECK-NEXT:     %[[T3:[0-9a-zA-Z_\.]+]] = new_array %[[T1]], %[[T2]] : <2 x !llzk.felt>
//CHECK-NEXT:     return %[[T3]] : !llzk.array<2 x !llzk.felt>
//CHECK-NEXT:   }
// -----

llzk.func @arr_params_felt(%a: !llzk.felt, %b: !llzk.felt, %c: !llzk.felt, %d: !llzk.felt) -> !llzk.array<4 x !llzk.felt> {
  %r = llzk.new_array %a, %b, %c, %d: !llzk.array<4 x !llzk.felt>
  return %r: !llzk.array<4 x !llzk.felt>
}
//CHECK-LABEL:  llzk.func @arr_params_felt
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: !llzk.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !llzk.felt,
//CHECK-SAME:    %[[A2:[0-9a-zA-Z_\.]+]]: !llzk.felt, %[[A3:[0-9a-zA-Z_\.]+]]: !llzk.felt) -> !llzk.array<4 x !llzk.felt> {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = new_array %[[A0]], %[[A1]], %[[A2]], %[[A3]] : <4 x !llzk.felt>
//CHECK-NEXT:     return %[[T1]] : !llzk.array<4 x !llzk.felt>
//CHECK-NEXT:   }
// -----

llzk.func @arr_uninitialized() -> !llzk.array<3 x index> {
  %r = llzk.new_array : !llzk.array<3 x index>
  return %r: !llzk.array<3 x index>
}
//CHECK-LABEL:  llzk.func @arr_uninitialized() -> !llzk.array<3 x index> {
//CHECK-NEXT:     %[[T4:[0-9a-zA-Z_\.]+]] = new_array : <3 x index>
//CHECK-NEXT:     return %[[T4]] : !llzk.array<3 x index>
//CHECK-NEXT:   }
// -----

llzk.func @arr_uninitialized_multi() -> !llzk.array<3,4,5 x index> {
  %r = llzk.new_array : !llzk.array<3,4,5 x index>
  return %r: !llzk.array<3,4,5 x index>
}
//CHECK-LABEL:  llzk.func @arr_uninitialized_multi() -> !llzk.array<3,4,5 x index> {
//CHECK-NEXT:     %[[T4:[0-9a-zA-Z_\.]+]] = new_array : <3,4,5 x index>
//CHECK-NEXT:     return %[[T4]] : !llzk.array<3,4,5 x index>
//CHECK-NEXT:   }
// -----

llzk.func @arr_size_0() -> !llzk.array<0 x index> {
  %r = llzk.new_array : !llzk.array<0 x index>
  return %r: !llzk.array<0 x index>
}
//CHECK-LABEL:  llzk.func @arr_size_0() -> !llzk.array<0 x index> {
//CHECK-NEXT:     %array = new_array  : <0 x index>
//CHECK-NEXT:     return %array : !llzk.array<0 x index>
//CHECK-NEXT:   }

// -----
!at = !llzk.array<affine_map<(i)[k] -> (5*i+k)>, affine_map<()[c] -> (c)>, affine_map<(j) -> (j+2)> x !llzk.felt>
llzk.func @test_all_forms_of_affine_map_instantiation() -> !at {
  %a = index.constant 2
  %b = index.constant 4
  %c = index.constant 6
  %d = index.constant 1
  // The `operandSegmentSizes` attribute lists the sizes [ elements.size, mapOperands.size, ... ]
  //  but doesn't have to be specified explicitly.
  %r = llzk.new_array { (%a)[%b], ()[%c], (%d) } : !at  // { operandSegmentSizes = array<i32: 0, 4> }
  return %r: !at
}
// CHECK-LABEL: llzk.func @test_all_forms_of_affine_map_instantiation() -> !llzk.array<affine_map<(d0)[s0] -> (d0 * 5 + s0)>,affine_map<()[s0] -> (s0)>,affine_map<(d0) -> (d0 + 2)> x !llzk.felt> {
// CHECK-NEXT:    %[[V_0:[0-9a-zA-Z_\.]+]] = index.constant 2
// CHECK-NEXT:    %[[V_1:[0-9a-zA-Z_\.]+]] = index.constant 4
// CHECK-NEXT:    %[[V_2:[0-9a-zA-Z_\.]+]] = index.constant 6
// CHECK-NEXT:    %[[V_3:[0-9a-zA-Z_\.]+]] = index.constant 1
// CHECK-NEXT:    %[[V_4:[0-9a-zA-Z_\.]+]] = new_array{(%[[V_0]]){{\[}}%[[V_1]]], (){{\[}}%[[V_2]]], (%[[V_3]])} : <affine_map<(d0)[s0] -> (d0 * 5 + s0)>,affine_map<()[s0] -> (s0)>,affine_map<(d0) -> (d0 + 2)> x !llzk.felt>
// CHECK-NEXT:    return %[[V_4]] : !llzk.array<affine_map<(d0)[s0] -> (d0 * 5 + s0)>,affine_map<()[s0] -> (s0)>,affine_map<(d0) -> (d0 + 2)> x !llzk.felt>
// CHECK-NEXT:  }
