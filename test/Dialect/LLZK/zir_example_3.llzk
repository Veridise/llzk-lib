// RUN: llzk-opt -split-input-file %s 2>&1 | FileCheck --enable-var-scope %s

// component Head<T: Type, N: Val>(arr: Array<T, N>) {
//   arr[0]
// }
//
// component A<N: Val>() {
//   Head<Val, 3>([N,N+1,N+2])
// }
//
// component B() {
//   Head<A<1>, 2>([A<1>(), A<1>()])
// }
//
// component Top() {
//   a := A<1>();
//   b := B();
//   a = b;
// }
module attributes {veridise.lang = "llzk"} {
  struct.def @Head<[@T, @N]> {
    struct.field @"$super" : !poly.tvar<@T>

    function.def @compute(%arr: !array.type<@N x !poly.tvar<@T>>) -> !struct.type<@Head<[@T, @N]>> {
      %self = struct.new : !struct.type<@Head<[@T, @N]>>
      %1 = arith.constant 0 : index
      %2 = array.read %arr[%1] : !array.type<@N x !poly.tvar<@T>>, !poly.tvar<@T>
      struct.writef %self[@"$super"] = %2 : !struct.type<@Head<[@T, @N]>>, !poly.tvar<@T>
      function.return %self : !struct.type<@Head<[@T, @N]>>
    }

    function.def @constrain(%self: !struct.type<@Head<[@T, @N]>>, %arr: !array.type<@N x !poly.tvar<@T>>) {
      %1 = arith.constant 0 : index
      %2 = array.read %arr[%1] : !array.type<@N x !poly.tvar<@T>>, !poly.tvar<@T>
      %3 = struct.readf %self[@"$super"] : !struct.type<@Head<[@T, @N]>>, !poly.tvar<@T>
      constrain.eq %2, %3 : !poly.tvar<@T>
      function.return
    }
  }

  struct.def @A<[@N]> {
    struct.field @"$super" : !struct.type<@Head<[!felt.felt, 3]>>

    function.def @compute() -> !struct.type<@A<[@N]>> {
      %self = struct.new : !struct.type<@A<[@N]>>
      %1 = poly.read_const @N : !felt.felt
      %2 = felt.const 1
      %3 = felt.const 2
      %4 = felt.add %1, %2
      %5 = felt.add %1, %3
      %6 = array.new %1, %4, %5 : !array.type<3 x !felt.felt>
      %7 = function.call @Head::@compute(%6) : (!array.type<3 x !felt.felt>) -> !struct.type<@Head<[!felt.felt, 3]>>
      struct.writef %self[@"$super"] = %7 : !struct.type<@A<[@N]>>, !struct.type<@Head<[!felt.felt, 3]>>
      function.return %self : !struct.type<@A<[@N]>>
    }

    function.def @constrain(%self: !struct.type<@A<[@N]>>) {
      %0 = struct.readf %self[@"$super"] : !struct.type<@A<[@N]>>, !struct.type<@Head<[!felt.felt, 3]>>
      %1 = poly.read_const @N : !felt.felt
      %2 = felt.const 1
      %3 = felt.const 2
      %4 = felt.add %1, %2
      %5 = felt.add %1, %3
      %arr = array.new %1, %4, %5 : !array.type<3 x !felt.felt>
      function.call @Head::@constrain(%0, %arr) : (!struct.type<@Head<[!felt.felt, 3]>>, !array.type<3 x !felt.felt>) -> ()
      function.return
    }
  }

  struct.def @B {
    struct.field @"$super" : !struct.type<@Head<[!struct.type<@A<[1]>>, 2]>>

    function.def @compute() -> !struct.type<@B> {
      %self = struct.new : !struct.type<@B>
      %1 = function.call @A::@compute() : () -> !struct.type<@A<[1]>>
      %2 = function.call @A::@compute() : () -> !struct.type<@A<[1]>>
      %3 = array.new %1, %2 : !array.type<2 x !struct.type<@A<[1]>>>
      %4 = function.call @Head::@compute(%3) : (!array.type<2 x !struct.type<@A<[1]>>>) -> !struct.type<@Head<[!struct.type<@A<[1]>>, 2]>>
      struct.writef %self[@"$super"] = %4 : !struct.type<@B>, !struct.type<@Head<[!struct.type<@A<[1]>>, 2]>>
      function.return %self : !struct.type<@B>
    }

    function.def @constrain(%self: !struct.type<@B>) {
      %0 = struct.readf %self[@"$super"] : !struct.type<@B>, !struct.type<@Head<[!struct.type<@A<[1]>>, 2]>>
      %arr = array.new : !array.type<2 x !struct.type<@A<[1]>>>
      function.call @Head::@constrain(%0, %arr) : (!struct.type<@Head<[!struct.type<@A<[1]>>, 2]>>, !array.type<2 x !struct.type<@A<[1]>>>) -> ()
      function.return
    }
  }

  struct.def @Top {
    struct.field @"$super" : !struct.type<@VoidComponent>
    struct.field @a : !struct.type<@A<[1]>>
    struct.field @b : !struct.type<@B>

    function.def @compute() -> !struct.type<@Top> {
      %self = struct.new : !struct.type<@Top>
      %1 = function.call @A::@compute() : () -> !struct.type<@A<[1]>>
      struct.writef %self[@a] = %1 : !struct.type<@Top>, !struct.type<@A<[1]>>
      %2 = function.call @B::@compute() : () -> !struct.type<@B>
      struct.writef %self[@b] = %2 : !struct.type<@Top>, !struct.type<@B>
      %3 = function.call @VoidComponent::@compute() : () -> !struct.type<@VoidComponent>
      struct.writef %self[@"$super"] = %3 : !struct.type<@Top>, !struct.type<@VoidComponent>
      function.return %self : !struct.type<@Top>
    }

    function.def @constrain(%self: !struct.type<@Top>) {
      %0 = struct.readf %self[@a] : !struct.type<@Top>, !struct.type<@A<[1]>>
      function.call @A::@constrain(%0) : (!struct.type<@A<[1]>>) -> ()
      %1 = struct.readf %self[@b] : !struct.type<@Top>, !struct.type<@B>
      function.call @B::@constrain(%1) : (!struct.type<@B>) -> ()
      %2 = struct.readf %0[@"$super"] : !struct.type<@A<[1]>>, !struct.type<@Head<[!felt.felt, 3]>>
      %3 = struct.readf %2[@"$super"] : !struct.type<@Head<[!felt.felt, 3]>>, !felt.felt
      %4 = struct.readf %1[@"$super"] : !struct.type<@B>, !struct.type<@Head<[!struct.type<@A<[1]>>, 2]>>
      %5 = struct.readf %4[@"$super"] : !struct.type<@Head<[!struct.type<@A<[1]>>, 2]>>, !struct.type<@A<[1]>>
      %6 = struct.readf %5[@"$super"] : !struct.type<@A<[1]>>, !struct.type<@Head<[!felt.felt, 3]>>
      %7 = struct.readf %6[@"$super"] : !struct.type<@Head<[!felt.felt, 3]>>, !felt.felt
      constrain.eq %3, %7 : !felt.felt
      %8 = struct.readf %self[@"$super"]: !struct.type<@Top>, !struct.type<@VoidComponent>
      function.call @VoidComponent::@constrain(%8) : (!struct.type<@VoidComponent>) -> ()
      function.return
    }
  }

  struct.def @VoidComponent {
    function.def @compute() -> !struct.type<@VoidComponent> {
      %self = struct.new : !struct.type<@VoidComponent>
      function.return %self : !struct.type<@VoidComponent>
    }

    function.def @constrain(%self: !struct.type<@VoidComponent>) { function.return }
  }
}

//CHECK-LABEL: module attributes {veridise.lang = "llzk"} {
//CHECK-LABEL: struct.def @Head<[@T, @N]> {
//CHECK-NEXT:    struct.field @"$super" : !poly.tvar<@T>
//CHECK-NEXT:    function.def @compute(%arg0: !array.type<@N x !poly.tvar<@T>>) -> !struct.type<@Head<[@T, @N]>> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@Head<[@T, @N]>>
//CHECK-NEXT:      %[[C1:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = array.read %arg0[%[[C1]]] : <@N x !poly.tvar<@T>>, !poly.tvar<@T>
//CHECK-NEXT:      struct.writef %[[SELF]][@"$super"] = %[[T0]] : <@Head<[@T, @N]>>, !poly.tvar<@T>
//CHECK-NEXT:      function.return %[[SELF]] : !struct.type<@Head<[@T, @N]>>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%arg0: !struct.type<@Head<[@T, @N]>>, %arg1: !array.type<@N x !poly.tvar<@T>>) attributes {function.allow_constraint} {
//CHECK-NEXT:      %[[C2:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = array.read %arg1[%[[C2]]] : <@N x !poly.tvar<@T>>, !poly.tvar<@T>
//CHECK-NEXT:      %[[T1:[0-9a-zA-Z_\.]+]] = struct.readf %arg0[@"$super"] : <@Head<[@T, @N]>>, !poly.tvar<@T>
//CHECK-NEXT:      constrain.eq %[[T0]], %[[T1]] : !poly.tvar<@T>, !poly.tvar<@T>
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: struct.def @A<[@N]> {
//CHECK-NEXT:    struct.field @"$super" : !struct.type<@Head<[!felt.felt, 3]>>
//CHECK-NEXT:    function.def @compute() -> !struct.type<@A<[@N]>> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@A<[@N]>>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = poly.read_const @N : !felt.felt
//CHECK-NEXT:      %[[C1:[0-9a-zA-Z_\.]+]] = felt.const 1
//CHECK-NEXT:      %[[C2:[0-9a-zA-Z_\.]+]] = felt.const 2
//CHECK-NEXT:      %[[T1:[0-9a-zA-Z_\.]+]] = felt.add %[[T0]], %[[C1]] : !felt.felt, !felt.felt
//CHECK-NEXT:      %[[T2:[0-9a-zA-Z_\.]+]] = felt.add %[[T0]], %[[C2]] : !felt.felt, !felt.felt
//CHECK-NEXT:      %[[ARRAY:[0-9a-zA-Z_\.]+]] = array.new %[[T0]], %[[T1]], %[[T2]] : <3 x !felt.felt>
//CHECK-NEXT:      %[[T3:[0-9a-zA-Z_\.]+]] = function.call @Head::@compute(%[[ARRAY]]) : (!array.type<3 x !felt.felt>) -> !struct.type<@Head<[!felt.felt, 3]>>
//CHECK-NEXT:      struct.writef %[[SELF]][@"$super"] = %[[T3]] : <@A<[@N]>>, !struct.type<@Head<[!felt.felt, 3]>>
//CHECK-NEXT:      function.return %[[SELF]] : !struct.type<@A<[@N]>>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%arg0: !struct.type<@A<[@N]>>) attributes {function.allow_constraint} {
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = struct.readf %arg0[@"$super"] : <@A<[@N]>>, !struct.type<@Head<[!felt.felt, 3]>>
//CHECK-NEXT:      %[[T1:[0-9a-zA-Z_\.]+]] = poly.read_const @N : !felt.felt
//CHECK-NEXT:      %[[C3:[0-9a-zA-Z_\.]+]] = felt.const 1
//CHECK-NEXT:      %[[C4:[0-9a-zA-Z_\.]+]] = felt.const 2
//CHECK-NEXT:      %[[T2:[0-9a-zA-Z_\.]+]] = felt.add %[[T1]], %[[C3]] : !felt.felt, !felt.felt
//CHECK-NEXT:      %[[T3:[0-9a-zA-Z_\.]+]] = felt.add %[[T1]], %[[C4]] : !felt.felt, !felt.felt
//CHECK-NEXT:      %[[ARRAY:[0-9a-zA-Z_\.]+]] = array.new %[[T1]], %[[T2]], %[[T3]] : <3 x !felt.felt>
//CHECK-NEXT:      function.call @Head::@constrain(%[[T0]], %[[ARRAY]]) : (!struct.type<@Head<[!felt.felt, 3]>>, !array.type<3 x !felt.felt>) -> ()
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: struct.def @B {
//CHECK-NEXT:    struct.field @"$super" : !struct.type<@Head<[!struct.type<@A<[1]>>, 2]>>
//CHECK-NEXT:    function.def @compute() -> !struct.type<@B> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@B>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = function.call @A::@compute() : () -> !struct.type<@A<[1]>>
//CHECK-NEXT:      %[[T1:[0-9a-zA-Z_\.]+]] = function.call @A::@compute() : () -> !struct.type<@A<[1]>>
//CHECK-NEXT:      %[[ARRAY:[0-9a-zA-Z_\.]+]] = array.new %[[T0]], %[[T1]] : <2 x !struct.type<@A<[1]>>>
//CHECK-NEXT:      %[[T2:[0-9a-zA-Z_\.]+]] = function.call @Head::@compute(%[[ARRAY]]) : (!array.type<2 x !struct.type<@A<[1]>>>) -> !struct.type<@Head<[!struct.type<@A<[1]>>, 2]>>
//CHECK-NEXT:      struct.writef %[[SELF]][@"$super"] = %[[T2]] : <@B>, !struct.type<@Head<[!struct.type<@A<[1]>>, 2]>>
//CHECK-NEXT:      function.return %[[SELF]] : !struct.type<@B>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%arg0: !struct.type<@B>) attributes {function.allow_constraint} {
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = struct.readf %arg0[@"$super"] : <@B>, !struct.type<@Head<[!struct.type<@A<[1]>>, 2]>>
//CHECK-NEXT:      %[[ARRAY:[0-9a-zA-Z_\.]+]] = array.new  : <2 x !struct.type<@A<[1]>>>
//CHECK-NEXT:      function.call @Head::@constrain(%[[T0]], %[[ARRAY]]) : (!struct.type<@Head<[!struct.type<@A<[1]>>, 2]>>, !array.type<2 x !struct.type<@A<[1]>>>) -> ()
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: struct.def @Top {
//CHECK-NEXT:    struct.field @"$super" : !struct.type<@VoidComponent>
//CHECK-NEXT:    struct.field @a : !struct.type<@A<[1]>>
//CHECK-NEXT:    struct.field @b : !struct.type<@B>
//CHECK-NEXT:    function.def @compute() -> !struct.type<@Top> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@Top>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = function.call @A::@compute() : () -> !struct.type<@A<[1]>>
//CHECK-NEXT:      struct.writef %[[SELF]][@a] = %[[T0]] : <@Top>, !struct.type<@A<[1]>>
//CHECK-NEXT:      %[[T1:[0-9a-zA-Z_\.]+]] = function.call @B::@compute() : () -> !struct.type<@B>
//CHECK-NEXT:      struct.writef %[[SELF]][@b] = %[[T1]] : <@Top>, !struct.type<@B>
//CHECK-NEXT:      %[[T2:[0-9a-zA-Z_\.]+]] = function.call @VoidComponent::@compute() : () -> !struct.type<@VoidComponent>
//CHECK-NEXT:      struct.writef %[[SELF]][@"$super"] = %[[T2]] : <@Top>, !struct.type<@VoidComponent>
//CHECK-NEXT:      function.return %[[SELF]] : !struct.type<@Top>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%arg0: !struct.type<@Top>) attributes {function.allow_constraint} {
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = struct.readf %arg0[@a] : <@Top>, !struct.type<@A<[1]>>
//CHECK-NEXT:      function.call @A::@constrain(%[[T0]]) : (!struct.type<@A<[1]>>) -> ()
//CHECK-NEXT:      %[[T1:[0-9a-zA-Z_\.]+]] = struct.readf %arg0[@b] : <@Top>, !struct.type<@B>
//CHECK-NEXT:      function.call @B::@constrain(%[[T1]]) : (!struct.type<@B>) -> ()
//CHECK-NEXT:      %[[T2:[0-9a-zA-Z_\.]+]] = struct.readf %[[T0]][@"$super"] : <@A<[1]>>, !struct.type<@Head<[!felt.felt, 3]>>
//CHECK-NEXT:      %[[T3:[0-9a-zA-Z_\.]+]] = struct.readf %[[T2]][@"$super"] : <@Head<[!felt.felt, 3]>>, !felt.felt
//CHECK-NEXT:      %[[T4:[0-9a-zA-Z_\.]+]] = struct.readf %[[T1]][@"$super"] : <@B>, !struct.type<@Head<[!struct.type<@A<[1]>>, 2]>>
//CHECK-NEXT:      %[[T5:[0-9a-zA-Z_\.]+]] = struct.readf %[[T4]][@"$super"] : <@Head<[!struct.type<@A<[1]>>, 2]>>, !struct.type<@A<[1]>>
//CHECK-NEXT:      %[[T6:[0-9a-zA-Z_\.]+]] = struct.readf %[[T5]][@"$super"] : <@A<[1]>>, !struct.type<@Head<[!felt.felt, 3]>>
//CHECK-NEXT:      %[[T7:[0-9a-zA-Z_\.]+]] = struct.readf %[[T6]][@"$super"] : <@Head<[!felt.felt, 3]>>, !felt.felt
//CHECK-NEXT:      constrain.eq %[[T3]], %[[T7]] : !felt.felt, !felt.felt
//CHECK-NEXT:      %[[T8:[0-9a-zA-Z_\.]+]] = struct.readf %arg0[@"$super"] : <@Top>, !struct.type<@VoidComponent>
//CHECK-NEXT:      function.call @VoidComponent::@constrain(%[[T8]]) : (!struct.type<@VoidComponent>) -> ()
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: struct.def @VoidComponent {
//CHECK-NEXT:    function.def @compute() -> !struct.type<@VoidComponent> attributes {function.allow_witness} {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = struct.new : <@VoidComponent>
//CHECK-NEXT:      function.return %[[SELF]] : !struct.type<@VoidComponent>
//CHECK-NEXT:    }
//CHECK-NEXT:    function.def @constrain(%arg0: !struct.type<@VoidComponent>) attributes {function.allow_constraint} {
//CHECK-NEXT:      function.return
//CHECK-NEXT:    }
//CHECK-NEXT:  }
