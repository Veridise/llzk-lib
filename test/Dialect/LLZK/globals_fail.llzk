// RUN: llzk-opt -split-input-file -verify-diagnostics %s

// TESTS: invalid type for a global
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{'llzk.global' op attribute 'type' failed to satisfy constraint: type attribute of any LLZK type except struct and non-constant types}}
  llzk.global const @g : !llzk.struct<@Hello>
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{'llzk.global' op attribute 'type' failed to satisfy constraint: type attribute of any LLZK type except struct and non-constant types}}
  llzk.global const @g : !llzk.tvar<@X>
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{'llzk.global' op attribute 'type' failed to satisfy constraint: type attribute of any LLZK type except struct and non-constant types}}
  llzk.global const @g : i64
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{'llzk.global' op attribute 'type' failed to satisfy constraint: type attribute of any LLZK type except struct and non-constant types}}
  llzk.global const @g : !llzk.array<@b x i1>
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{'llzk.global' op attribute 'type' failed to satisfy constraint: type attribute of any LLZK type except struct and non-constant types}}
  llzk.global const @g : !llzk.array<affine_map<(i)->(i)> x i1>
}
// -----

// TEST: 'felt' type global initialized with unparsable attribute
module attributes {veridise.lang = "llzk"} {
  // expected-error@+2 {{custom op 'llzk.global' expected integer value}}
  // expected-error@+1 {{custom op 'llzk.global' failed to parse LLZK_FeltConstAttr parameter 'value' which is to be a `::llvm::APInt`}}
  llzk.global const @g : !llzk.felt = unparseable
}
// -----

// TEST: any other type global initialized with unparsable attribute
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{expected attribute value}}
  llzk.global const @g : index = unparseable
}
// -----

// TEST: 'felt' type global initialized with incorrect attribute kind
module attributes {veridise.lang = "llzk"} {
  // expected-error@+2 {{custom op 'llzk.global' expected integer value}}
  // expected-error@+1 {{custom op 'llzk.global' failed to parse LLZK_FeltConstAttr parameter 'value' which is to be a `::llvm::APInt`}}
  llzk.global const @g : !llzk.felt = "Hello"
}
// -----

// TESTS: any other type global initialized with incorrect attribute kind
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{integer constant out of range for attribute}}
  llzk.global const @g : i1 = 123
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{integer constant out of range for attribute}}
  llzk.global const @g : i1 = -2
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{'llzk.global' op with type 'i1' expected builtin.bool or builtin.integer attribute value but found builtin.array}}
  llzk.global const @g : i1 = [7,8,0]
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{'llzk.global' op with type 'index' expected builtin.index attribute value but found builtin.bool}}
  llzk.global const @g : index = false
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{'llzk.global' op with type 'index' expected builtin.index attribute value but found builtin.string}}
  llzk.global const @g : index = "hello"
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{integer literal not valid for specified type}}
  llzk.global const @g : !llzk.string = 65723456
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{'llzk.global' op with type '!llzk.array<2 x !llzk.string>' expected builtin.array attribute value but found builtin.string}}
  llzk.global const @g : !llzk.array<2 x !llzk.string> = "a string and something else"
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{'llzk.global' op with type '!llzk.array<2 x !llzk.string>' expected builtin.array attribute value to contain 2 elements but found 0}}
  llzk.global const @g : !llzk.array<2 x !llzk.string> = []
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{'llzk.global' op with type '!llzk.array<2 x !llzk.string>' expected builtin.string array element but found builtin.integer}}
  llzk.global const @g : !llzk.array<2 x !llzk.string> = [7, 8]
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{'llzk.global' op with type '!llzk.array<2 x !llzk.string>' expected builtin.array attribute value to contain 2 elements but found 3}}
  llzk.global const @g : !llzk.array<2 x !llzk.string> = ["too", "many", "strings"]
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+2 {{'llzk.global' op with type '!llzk.array<4 x !llzk.string>' expected builtin.string array element but found builtin.integer}}
  // expected-error@+1 {{'llzk.global' op with type '!llzk.array<4 x !llzk.string>' expected builtin.string array element but found builtin.affine_map}}
  llzk.global const @g : !llzk.array<4 x !llzk.string> = ["a string and something else", false, affine_map<(i)->(i)>, -100]
}
// -----
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{'llzk.global' op with type '!llzk.array<2,2,1,2 x !llzk.felt>' expected builtin.array attribute value to contain 8 elements but found 4}}
  llzk.global const @g : !llzk.array<2,2,1,2 x !llzk.felt> = [6, 12134, 45523, 15623]
}
// -----

// TEST: 'felt' type global initialized with incorrect attribute kind
module attributes {veridise.lang = "llzk"} {
  // expected-error@+2 {{custom op 'llzk.global' expected integer value}}
  // expected-error@+1 {{custom op 'llzk.global' failed to parse LLZK_FeltConstAttr parameter 'value' which is to be a `::llvm::APInt`}}
  llzk.global const @g : !llzk.felt = "Hello"
}
// -----

// TEST: global with "const" not initialized
module attributes {veridise.lang = "llzk"} {
  // expected-error@+1 {{'llzk.global' op marked as 'const' must be assigned a value}}
  llzk.global const @g : !llzk.string
}
