// RUN: llzk-opt -split-input-file -llzk-duplicate-read-write-elimination -llzk-duplicate-op-elimination %s 2>&1 | FileCheck %s

module attributes {veridise.lang = "llzk"} {
  llzk.struct @Component {
    field @matrix : !llzk.array<7,3 x !llzk.felt>

    func @compute(%inputArr : !llzk.array<3 x !llzk.felt>) -> !llzk.struct<@Component> {
      %self = new_struct : !llzk.struct<@Component>
      %mat = readf %self[@matrix] : !llzk.struct<@Component>, !llzk.array<7,3 x !llzk.felt>
      %idx1 = arith.constant 1 : index
      %idx4 = arith.constant 4 : index
      insertarr %mat[%idx1] = %inputArr : !llzk.array<7,3 x !llzk.felt>, !llzk.array<3 x !llzk.felt>
      %arr1 = extractarr %mat[%idx1] : !llzk.array<7,3 x !llzk.felt> // redundant, replace with %inputArr
      insertarr %mat[%idx4] = %arr1 : !llzk.array<7,3 x !llzk.felt>, !llzk.array<3 x !llzk.felt> // replace %arr1 with %inputArr
      insertarr %mat[%idx1] = %arr1 : !llzk.array<7,3 x !llzk.felt>, !llzk.array<3 x !llzk.felt> // redundant
      return %self : !llzk.struct<@Component>
    }
    func @constrain(%self: !llzk.struct<@Component>, %inputArr : !llzk.array<3 x !llzk.felt>) {
      %mat = readf %self[@matrix] : !llzk.struct<@Component>, !llzk.array<7,3 x !llzk.felt>
      %i = arith.constant 2 : index
      %j = arith.constant 3 : index
      %k = arith.constant 3 : index // redundant constant
      %arr_i = extractarr %mat[%i] : !llzk.array<7,3 x !llzk.felt>
      %arr_j = extractarr %mat[%j] : !llzk.array<7,3 x !llzk.felt>
      %arr_k = extractarr %mat[%k] : !llzk.array<7,3 x !llzk.felt> // redundant extract
      emit_eq %arr_i, %arr_j : !llzk.array<3 x !llzk.felt>
      emit_eq %arr_j, %arr_k : !llzk.array<3 x !llzk.felt> // this constraint is redundant, but will not be removed in this pass
      emit_eq %arr_k, %arr_i : !llzk.array<3 x !llzk.felt> // same with above
      return
    }
  }
}

// CHECK-LABEL: module attributes {veridise.lang = "llzk"} {
// CHECK-NEXT:   llzk.struct @Component {
// CHECK-NEXT:     field @matrix : !llzk.array<7,3 x !llzk.felt>
// CHECK-NEXT:     func @compute(%arg0: !llzk.array<3 x !llzk.felt>) -> !llzk.struct<@Component> {
// CHECK-NEXT:       %self = new_struct : <@Component>
// CHECK-NEXT:       %0 = readf %self[@matrix] : <@Component>, !llzk.array<7,3 x !llzk.felt>
// CHECK-NEXT:       %c1 = arith.constant 1 : index
// CHECK-NEXT:       %c4 = arith.constant 4 : index
// CHECK-NEXT:       insertarr %0[%c1] = %arg0 : <7,3 x !llzk.felt>, <3 x !llzk.felt>
// CHECK-NEXT:       insertarr %0[%c4] = %arg0 : <7,3 x !llzk.felt>, <3 x !llzk.felt>
// CHECK-NEXT:       return %self : !llzk.struct<@Component>
// CHECK-NEXT:     }
// CHECK-NEXT:     func @constrain(%arg0: !llzk.struct<@Component>, %arg1: !llzk.array<3 x !llzk.felt>) {
// CHECK-NEXT:       %0 = readf %arg0[@matrix] : <@Component>, !llzk.array<7,3 x !llzk.felt>
// CHECK-NEXT:       %c2 = arith.constant 2 : index
// CHECK-NEXT:       %c3 = arith.constant 3 : index
// CHECK-NEXT:       %1 = extractarr %0[%c2] : <7,3 x !llzk.felt>
// CHECK-NEXT:       %2 = extractarr %0[%c3] : <7,3 x !llzk.felt>
// CHECK-NEXT:       emit_eq %1, %2 : !llzk.array<3 x !llzk.felt>, !llzk.array<3 x !llzk.felt>
// CHECK-NEXT:       return
// CHECK-NEXT:     }
// CHECK-NEXT:   }
// CHECK-NEXT: }
