// RUN: llzk-opt -I %S -split-input-file -llzk-inline-includes -llzk-print-interval-analysis %s 2>&1 | FileCheck %s

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ConstantConstraint {
    function.def @compute(%a: !llzk.felt) -> !llzk.struct<@ConstantConstraint> {
      %self = new_struct : !llzk.struct<@ConstantConstraint>
      function.return %self : !llzk.struct<@ConstantConstraint>
    }

    function.def @constrain(%self: !llzk.struct<@ConstantConstraint>, %const: !llzk.felt) {
      %a = constfelt 1
      %b = constfelt 2
      %c = add %a, %b
      emit_eq %const, %c : !llzk.felt
      function.return
    }
  }
}

// CHECK-LABEL: @ConstantConstraint StructIntervals {
// CHECK-NEXT:     %arg1 in Degenerate(3)
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @CmpConstraint {
    function.def @compute(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.struct<@CmpConstraint> {
      %self = new_struct : !llzk.struct<@CmpConstraint>
      function.return %self : !llzk.struct<@CmpConstraint>
    }

    function.def @constrain(%self: !llzk.struct<@CmpConstraint>, %a: !llzk.felt, %b: !llzk.felt) {
      %x = constfelt 1
      %y = constfelt 2
      %cmpA = cmp gt(%a, %x)
      assert %cmpA
      %cmpB = cmp le(%b, %y)
      assert %cmpB
      function.return
    }
  }
}

// CHECK-LABEL: @CmpConstraint StructIntervals {
// CHECK-NEXT:     %arg1 in TypeC:[ 2, 21888242871839275222246405745257275088696311157297823662689037894645226208582 ]
// CHECK-NEXT:     %arg2 in TypeA:[ 0, 2 ]
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @FieldRangeConstraint {

    llzk.field @foo : !llzk.felt
    llzk.field @bar : !llzk.felt

    function.def @compute(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.struct<@FieldRangeConstraint> {
      %self = new_struct : !llzk.struct<@FieldRangeConstraint>
      function.return %self : !llzk.struct<@FieldRangeConstraint>
    }

    function.def @constrain(%self: !llzk.struct<@FieldRangeConstraint>, %a: !llzk.felt, %b: !llzk.felt) {
      %x = constfelt 1
      %y = constfelt 2
      %cmpA = cmp gt(%a, %x)
      assert %cmpA
      %cmpB = cmp le(%b, %y)
      assert %cmpB
      %foo = readf %self[@foo] : !llzk.struct<@FieldRangeConstraint>, !llzk.felt
      emit_eq %foo, %x : !llzk.felt
      %bar = readf %self[@bar] : !llzk.struct<@FieldRangeConstraint>, !llzk.felt
      emit_eq %bar, %b : !llzk.felt
      function.return
    }
  }
}

// CHECK-LABEL: @FieldRangeConstraint StructIntervals {
// CHECK-NEXT:     %arg0[@foo] in Degenerate(1)
// CHECK-NEXT:     %arg0[@bar] in TypeA:[ 0, 2 ]
// CHECK-NEXT:     %arg1 in TypeC:[ 2, 21888242871839275222246405745257275088696311157297823662689037894645226208582 ]
// CHECK-NEXT:     %arg2 in TypeA:[ 0, 2 ]
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ArithConstraint {

    function.def @compute(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.struct<@ArithConstraint> {
      %self = new_struct : !llzk.struct<@ArithConstraint>
      function.return %self : !llzk.struct<@ArithConstraint>
    }

    function.def @constrain(%self: !llzk.struct<@ArithConstraint>, %a: !llzk.felt, %b: !llzk.felt) {
      %5 = constfelt 5
      %7 = constfelt 7
      %11 = constfelt 11
      %cmp1 = cmp ge(%a, %5)
      assert %cmp1
      %cmp2 = cmp le(%a, %7)
      assert %cmp2
      %cmp3 = cmp gt(%b, %7)
      assert %cmp3
      %cmp4 = cmp le(%b, %11)
      assert %cmp4

      %mul = mul %a, %5
      %sub = sub %mul, %5
      %1 = div %11, %11
      %mod = mod %sub, %b
      %neg = neg %mod
      %final = add %mul, %neg

      %0 = constfelt 0
      %notzero = cmp ne(%final, %0)
      assert %notzero

      function.return
    }
  }
}

// CHECK-LABEL: @ArithConstraint StructIntervals {
// CHECK-NEXT:     %arg1 in TypeA:[ 5, 7 ]
// CHECK-NEXT:     %arg2 in TypeA:[ 8, 11 ]
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ArrayConstraint {

    llzk.field @arr : !llzk.array<3 x !llzk.felt>

    function.def @compute() -> !llzk.struct<@ArrayConstraint> {
      %self = new_struct : !llzk.struct<@ArrayConstraint>
      function.return %self : !llzk.struct<@ArrayConstraint>
    }

    function.def @constrain(%self: !llzk.struct<@ArrayConstraint>) {
      %5 = constfelt 5
      %7 = constfelt 7
      %11 = constfelt 11
      %arr = readf %self[@arr] : !llzk.struct<@ArrayConstraint>, !llzk.array<3 x !llzk.felt>
      %i0 = arith.constant 0 : index
      %i1 = arith.constant 1 : index
      %i2 = arith.constant 2 : index
      %a = array.read %arr[%i0] : !llzk.array<3 x !llzk.felt>, !llzk.felt
      %b = array.read %arr[%i1] : !llzk.array<3 x !llzk.felt>, !llzk.felt
      %c = array.read %arr[%i2] : !llzk.array<3 x !llzk.felt>, !llzk.felt
      %cmp1 = cmp ge(%a, %5)
      assert %cmp1
      %cmp2 = cmp le(%a, %7)
      assert %cmp2
      %cmp3 = cmp ge(%b, %7)
      assert %cmp3
      %cmp4 = cmp le(%b, %11)
      assert %cmp4

      emit_eq %c, %a : !llzk.felt

      function.return
    }
  }
}

// CHECK-LABEL: @ArrayConstraint StructIntervals {
// CHECK-NEXT:     %arg0[@arr][0] in TypeA:[ 5, 7 ]
// CHECK-NEXT:     %arg0[@arr][1] in TypeA:[ 7, 11 ]
// CHECK-NEXT:     %arg0[@arr][2] in TypeA:[ 5, 7 ]
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @Div<[]> {
    field @"$super" : !llzk.felt
    field @reciprocal : !llzk.felt
    function.def @compute(%arg0: !llzk.felt, %arg1: !llzk.felt) -> !llzk.struct<@Div<[]>> {
      %self = new_struct : <@Div<[]>>
      %0 = inv %arg1 : !llzk.felt
      writef %self[@reciprocal] = %0 : <@Div<[]>>, !llzk.felt
      %1 = readf %self[@reciprocal] : <@Div<[]>>, !llzk.felt
      %2 = mul %1, %arg1 : !llzk.felt, !llzk.felt
      %felt_const_1 = constfelt  1
      %3 = mul %1, %arg0 : !llzk.felt, !llzk.felt
      writef %self[@"$super"] = %3 : <@Div<[]>>, !llzk.felt
      function.return %self : !llzk.struct<@Div<[]>>
    }
    function.def @constrain(%arg0: !llzk.struct<@Div<[]>>, %arg1: !llzk.felt, %arg2: !llzk.felt) {
      %0 = readf %arg0[@reciprocal] : <@Div<[]>>, !llzk.felt
      %1 = mul %0, %arg2 : !llzk.felt, !llzk.felt
      %felt_const_1 = constfelt  1
      // Since reciprocal * arg2 === 1, reciprocal nor arg2 can be 0
      emit_eq %1, %felt_const_1 : !llzk.felt, !llzk.felt
      function.return
    }
  }
}

// CHECK-LABEL: @Div StructIntervals {
// CHECK-NEXT:     %arg0[@$super] in Entire
// CHECK-NEXT:     %arg0[@reciprocal] in TypeC:[ 1, 21888242871839275222246405745257275088696311157297823662689037894645226208582 ]
// CHECK-NEXT:     %arg1 in Entire
// CHECK-NEXT:     %arg2 in TypeC:[ 1, 21888242871839275222246405745257275088696311157297823662689037894645226208582 ]
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  // A correctly constrained byte decomposition checker for a 16 bit val.
  llzk.struct @ByteDecompCorrect {
    field @b1 : !llzk.felt
    field @b0 : !llzk.felt

    function.def @compute(%u16 : !llzk.felt) -> !llzk.struct<@ByteDecompCorrect> {
      %self = new_struct : !llzk.struct<@ByteDecompCorrect>
      function.return %self : !llzk.struct<@ByteDecompCorrect>
    }

    function.def @constrain(%self : !llzk.struct<@ByteDecompCorrect>, %u16 : !llzk.felt) {
      %b0 = readf %self[@b0] : !llzk.struct<@ByteDecompCorrect>, !llzk.felt
      %b1 = readf %self[@b1] : !llzk.struct<@ByteDecompCorrect>, !llzk.felt
      %256 = constfelt 256
      %b0_is_byte = cmp lt(%b0, %256)
      %b1_is_byte = cmp lt(%b1, %256)
      assert %b0_is_byte
      assert %b1_is_byte
      %b1_mul = mul %b1, %256
      %reconstructed = add %b1_mul, %b0
      emit_eq %reconstructed, %u16 : !llzk.felt
      function.return
    }
  }

  // An incorrectly constrained byte decomposition checker for a 16 bit val.
  llzk.struct @ByteDecompIncorrect {
    field @b1 : !llzk.felt
    field @b0 : !llzk.felt

    function.def @compute(%u16 : !llzk.felt) -> !llzk.struct<@ByteDecompIncorrect> {
      %self = new_struct : !llzk.struct<@ByteDecompIncorrect>
      function.return %self : !llzk.struct<@ByteDecompIncorrect>
    }

    function.def @constrain(%self : !llzk.struct<@ByteDecompIncorrect>, %u16 : !llzk.felt) {
      %b0 = readf %self[@b0] : !llzk.struct<@ByteDecompIncorrect>, !llzk.felt
      %b1 = readf %self[@b1] : !llzk.struct<@ByteDecompIncorrect>, !llzk.felt
      %256 = constfelt 256
      %b1_mul = mul %b1, %256
      %reconstructed = add %b1_mul, %b0
      // b0 and b1 are not constrained to be a byte, so these values could be anything
      emit_eq %reconstructed, %u16 : !llzk.felt
      function.return
    }
  }

  // Another improperly constrained byte decomposition checker for a 16 bit val.
  llzk.struct @ByteDecompPartial {
    field @b1 : !llzk.felt
    field @b0 : !llzk.felt

    function.def @compute(%u16 : !llzk.felt) -> !llzk.struct<@ByteDecompPartial> {
      %self = new_struct : !llzk.struct<@ByteDecompPartial>
      function.return %self : !llzk.struct<@ByteDecompPartial>
    }

    function.def @constrain(%self : !llzk.struct<@ByteDecompPartial>, %u16 : !llzk.felt) {
      %b0 = readf %self[@b0] : !llzk.struct<@ByteDecompPartial>, !llzk.felt
      %b1 = readf %self[@b1] : !llzk.struct<@ByteDecompPartial>, !llzk.felt
      %256 = constfelt 256
      %u16upper = mul %256, %256
      %is_u16 = cmp lt(%u16, %u16upper)
      assert %is_u16
      %b1_mul = mul %b1, %256
      %reconstructed = add %b1_mul, %b0
      // u16 is constrained to be 16 bites, but b0 and b1 aren't guaranteed to
      // by bytes, so they could be any value (even above 16-bits, if b0 and b1)
      // are carefully selected to overflow into 16 bits).
      emit_eq %reconstructed, %u16 : !llzk.felt
      function.return
    }
  }
}

// CHECK-LABEL: @ByteDecompCorrect StructIntervals {
// CHECK-NEXT:     %arg0[@b1] in TypeA:[ 0, 255 ]
// CHECK-NEXT:     %arg0[@b0] in TypeA:[ 0, 255 ]
// CHECK-NEXT:     %arg1 in TypeA:[ 0, 65535 ]
// CHECK-NEXT: }
// CHECK-NEXT: @ByteDecompIncorrect StructIntervals {
// CHECK-NEXT:     %arg0[@b1] in Entire
// CHECK-NEXT:     %arg0[@b0] in Entire
// CHECK-NEXT:     %arg1 in Entire
// CHECK-NEXT: }
// CHECK-NEXT: @ByteDecompPartial StructIntervals {
// CHECK-NEXT:     %arg0[@b1] in Entire
// CHECK-NEXT:     %arg0[@b0] in Entire
// CHECK-NEXT:     %arg1 in TypeA:[ 0, 65535 ]
// CHECK-NEXT: }

// -----

// Ensure constraints on Signals or on the Signal's internal reg propagate.
!Signal = !llzk.struct<@Signal>
module attributes {veridise.lang = "llzk"} {
  // pre-defined
  llzk.struct @Signal {
    field @reg : !llzk.felt {llzk.pub}

    function.def @compute(%v: !llzk.felt) -> !llzk.struct<@Signal> {
      %self = new_struct : !llzk.struct<@Signal>
      writef %self[@reg] = %v : !llzk.struct<@Signal>, !llzk.felt
      function.return %self : !llzk.struct<@Signal>
    }

    function.def @constrain(%self: !llzk.struct<@Signal>, %v: !llzk.felt) {
      function.return
    }
  }

  llzk.struct @Component00 {
    field @f : !Signal

    function.def @compute(%0: !Signal) -> !llzk.struct<@Component00> {
      %self = new_struct : !llzk.struct<@Component00>
      writef %self[@f] = %0 : !llzk.struct<@Component00>, !Signal
      function.return %self : !llzk.struct<@Component00>
    }
    function.def @constrain(%self: !llzk.struct<@Component00>, %0: !Signal) {
      %b = readf %self[@f] : !llzk.struct<@Component00>, !Signal
      emit_eq %b, %0 : !Signal
      %reg = readf %0[@reg] : !Signal, !llzk.felt
      %c0 = constfelt 0
      emit_eq %reg, %c0 : !llzk.felt
      function.return
    }
  }
}

// CHECK-LABEL: @Component00 StructIntervals {
// CHECK-NEXT:     %arg0[@f] in Degenerate(0)
// CHECK-NEXT:     %arg1 in Degenerate(0)
// CHECK-NEXT: }
