// RUN: llzk-opt -split-input-file -verify-diagnostics %s

module attributes {veridise.lang = "llzk"} {
  llzk.struct @emiteq_in_compute {
    func @compute(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.struct<@emiteq_in_compute> {
      // expected-error@+1 {{'llzk.emit_eq' op only valid within a 'llzk.func' named "@constrain" within a 'llzk.struct' definition}}
      llzk.emit_eq %a, %b : !llzk.felt
      %self = new_struct : !llzk.struct<@emiteq_in_compute>
      return %self : !llzk.struct<@emiteq_in_compute>
    }

    func @constrain(%self: !llzk.struct<@emiteq_in_compute>, %a: !llzk.felt, %b: !llzk.felt) { return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @emiteq_in_compute_in_loop {
    func @compute(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.struct<@emiteq_in_compute_in_loop> {
      %lb = index.constant 0
      %up = index.constant 4
      %step = index.constant 1
      scf.for %iv = %lb to %up step %step {
        // expected-error@+1 {{'llzk.emit_eq' op only valid within a 'llzk.func' named "@constrain" within a 'llzk.struct' definition}}
        llzk.emit_eq %a, %b : !llzk.felt
      }
      %self = new_struct : !llzk.struct<@emiteq_in_compute_in_loop>
      return %self : !llzk.struct<@emiteq_in_compute_in_loop>
    }

    func @constrain(%self: !llzk.struct<@emiteq_in_compute_in_loop>, %a: !llzk.felt, %b: !llzk.felt) { return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @emiteq_in_compute_in_deep_branches {
    func @compute(%a: i1, %b: i1, %c: i1, %x: !llzk.felt, %y: !llzk.felt) -> !llzk.struct<@emiteq_in_compute_in_deep_branches> {
      scf.if %a {
        scf.if %b {
          scf.if %c {
            // expected-error@+1 {{'llzk.emit_eq' op only valid within a 'llzk.func' named "@constrain" within a 'llzk.struct' definition}}
            llzk.emit_eq %x, %y : !llzk.felt
          }
        }
      }
      %self = new_struct : !llzk.struct<@emiteq_in_compute_in_deep_branches>
      return %self : !llzk.struct<@emiteq_in_compute_in_deep_branches>
    }

    func @constrain(%self: !llzk.struct<@emiteq_in_compute_in_deep_branches>, %a: i1, %b: i1, %c: i1, %x: !llzk.felt, %y: !llzk.felt) { return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @emitin_in_compute {
    func @compute(%a: !llzk.felt, %b: !llzk.array<5 x !llzk.felt>) -> !llzk.struct<@emitin_in_compute> {
      // expected-error@+1 {{'llzk.emit_in' op only valid within a 'llzk.func' named "@constrain" within a 'llzk.struct' definition}}
      llzk.emit_in %a, %b : !llzk.array<5 x !llzk.felt>
      %self = new_struct : !llzk.struct<@emitin_in_compute>
      return %self : !llzk.struct<@emitin_in_compute>
    }

    func @constrain(%self: !llzk.struct<@emitin_in_compute>, %a: !llzk.felt, %b: !llzk.array<5 x !llzk.felt>) { return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @emitin_in_compute_in_loop {
    func @compute(%a: !llzk.felt, %b: !llzk.array<5 x !llzk.felt>) -> !llzk.struct<@emitin_in_compute_in_loop> {
      %lb = index.constant 0
      %up = index.constant 4
      %step = index.constant 1
      scf.for %iv = %lb to %up step %step {
        // expected-error@+1 {{'llzk.emit_in' op only valid within a 'llzk.func' named "@constrain" within a 'llzk.struct' definition}}
        llzk.emit_in %a, %b : !llzk.array<5 x !llzk.felt>
      }
      %self = new_struct : !llzk.struct<@emitin_in_compute_in_loop>
      return %self : !llzk.struct<@emitin_in_compute_in_loop>
    }

    func @constrain(%self: !llzk.struct<@emitin_in_compute_in_loop>, %a: !llzk.felt, %b: !llzk.array<5 x !llzk.felt>) { return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @emitin_in_compute_in_deep_branches {
    func @compute(%a: i1, %b: i1, %c: i1, %x: index, %y: !llzk.array<5 x index>) -> !llzk.struct<@emitin_in_compute_in_deep_branches> {
      scf.if %a {
        scf.if %b {
          scf.if %c {
            // expected-error@+1 {{'llzk.emit_in' op only valid within a 'llzk.func' named "@constrain" within a 'llzk.struct' definition}}
            llzk.emit_in %x, %y : !llzk.array<5 x index>
          }
        }
      }
      %self = new_struct : !llzk.struct<@emitin_in_compute_in_deep_branches>
      return %self : !llzk.struct<@emitin_in_compute_in_deep_branches>
    }

    func @constrain(%self: !llzk.struct<@emitin_in_compute_in_deep_branches>, %a: i1, %b: i1, %c: i1, %x: index, %y: !llzk.array<5 x index>) { return }
  }
}
// -----
llzk.func @constrain(%a: !llzk.felt, %b: !llzk.felt) {
  // expected-error@+1 {{'llzk.emit_eq' op only valid within a 'llzk.func' named "@constrain" within a 'llzk.struct' definition}}
  llzk.emit_eq %a, %b : !llzk.felt
  return
}
// -----
llzk.func @constrain(%x: index, %y: !llzk.array<5 x index>) {
  // expected-error@+1 {{'llzk.emit_in' op only valid within a 'llzk.func' named "@constrain" within a 'llzk.struct' definition}}
  llzk.emit_in %x, %y : !llzk.array<5 x index>
  return
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @constrain_calls_compute {
    func @compute() -> !llzk.struct<@constrain_calls_compute> {
      %self = new_struct : !llzk.struct<@constrain_calls_compute>
      return %self : !llzk.struct<@constrain_calls_compute>
    }

    func @constrain(%self: !llzk.struct<@constrain_calls_compute>) {
      // expected-error@+1 {{'llzk.call' op targeting "@compute" only valid within a 'llzk.func' named "@compute" within a 'llzk.struct' definition}}
      call @constrain_calls_compute::@compute() : () -> !llzk.struct<@constrain_calls_compute>
      return
    }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @compute_calls_constrain {
    func @compute() -> !llzk.struct<@compute_calls_constrain> {
      %self = new_struct : !llzk.struct<@compute_calls_constrain>
      // expected-error@+1 {{'llzk.call' op targeting "@constrain" only valid within a 'llzk.func' named "@constrain" within a 'llzk.struct' definition}}
      call @compute_calls_constrain::@constrain(%self) : (!llzk.struct<@compute_calls_constrain>) -> ()
      return %self : !llzk.struct<@compute_calls_constrain>
    }

    func @constrain(%self: !llzk.struct<@compute_calls_constrain>) {
      return
    }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.func @globalFunc() {
    // expected-error@+1 {{'llzk.call' op targeting "@compute" only valid within a 'llzk.func' named "@compute" within a 'llzk.struct' definition}}
    call @global_calls_compute::@compute() : () -> !llzk.struct<@global_calls_compute>
    return
  }
  llzk.struct @global_calls_compute {
    func @compute() -> !llzk.struct<@global_calls_compute> {
      %self = new_struct : !llzk.struct<@global_calls_compute>
      return %self : !llzk.struct<@global_calls_compute>
    }

    func @constrain(%self: !llzk.struct<@global_calls_compute>) {
      return
    }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.func @globalFunc(%0: !llzk.struct<@global_calls_constrain>) {
    // expected-error@+1 {{'llzk.call' op targeting "@constrain" only valid within a 'llzk.func' named "@constrain" within a 'llzk.struct' definition}}
    call @global_calls_constrain::@constrain(%0) : (!llzk.struct<@global_calls_constrain>) -> ()
    return
  }
  llzk.struct @global_calls_constrain {
    func @compute() -> !llzk.struct<@global_calls_constrain> {
      %self = new_struct : !llzk.struct<@global_calls_constrain>
      return %self : !llzk.struct<@global_calls_constrain>
    }

    func @constrain(%self: !llzk.struct<@global_calls_constrain>) {
      return
    }
  }
}
// -----
llzk.struct @inv_in_constrain {
  func @compute(%a: !llzk.felt) -> !llzk.struct<@inv_in_constrain> {
    %self = new_struct : !llzk.struct<@inv_in_constrain>
    return %self : !llzk.struct<@inv_in_constrain>
  }

  func @constrain(%self: !llzk.struct<@inv_in_constrain>, %a: !llzk.felt) {
    // expected-error@+1 {{'llzk.inv' op is ComputeOnly so it cannot be used within a 'llzk.func' named "@constrain" within a 'llzk.struct' definition}}
    %c = llzk.inv %a
    return
  }
}
// -----
llzk.struct @inv_in_constrain {
  func @compute(%a: !llzk.felt) -> !llzk.struct<@inv_in_constrain> {
    %self = new_struct : !llzk.struct<@inv_in_constrain>
    return %self : !llzk.struct<@inv_in_constrain>
  }

  func @constrain(%self: !llzk.struct<@inv_in_constrain>, %a: !llzk.felt) {
    // expected-error@+1 {{'llzk.inv' op is ComputeOnly so it cannot be used within a 'llzk.func' named "@constrain" within a 'llzk.struct' definition}}
    %c = llzk.inv %a
    return
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @compute_no_ret {
    // expected-error@+1 {{'llzk.func' op "@compute" must have exactly one return type}}
    func @compute() {
      return
    }

    func @constrain(%self: !llzk.struct<@compute_no_ret>) {
      return
    }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @compute_multiple_ret {
    // expected-error@+1 {{'llzk.func' op "@compute" must have exactly one return type}}
    func @compute(%a: i1) -> (!llzk.struct<@compute_multiple_ret>, i1) {
      %self = new_struct : !llzk.struct<@compute_multiple_ret>
      return %self, %a : !llzk.struct<@compute_multiple_ret>, i1
    }

    func @constrain(%self: !llzk.struct<@compute_multiple_ret>, %a: i1) {
      return
    }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @constrain_with_ret {
    func @compute() -> !llzk.struct<@constrain_with_ret> {
      %self = new_struct : !llzk.struct<@constrain_with_ret>
      return %self : !llzk.struct<@constrain_with_ret>
    }

    // expected-error@+1 {{'llzk.func' op "@constrain" must have no return type}}
    func @constrain(%self: !llzk.struct<@constrain_with_ret>, %a: i1) -> i1 {
      return %a : i1
    }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @compute_with_wrong_ret {
    // expected-error@+1 {{'llzk.func' op "@compute" must use type of its parent 'llzk.struct' "@compute_with_wrong_ret" as return type}}
    func @compute() -> index {
      %b = index.constant 2
      return %b : index
    }

    func @constrain(%self: !llzk.struct<@compute_with_wrong_ret>) {
      return
    }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @good { // expected-note {{uses this type instead}}
    func @compute() -> !llzk.struct<@good> {
      %self = new_struct : !llzk.struct<@good>
      return %self : !llzk.struct<@good>
    }
    func @constrain(%self: !llzk.struct<@good>) {
      return
    }
  }

  llzk.struct @compute_with_wrong_ret {
    // expected-error@+1 {{'llzk.func' op "@compute" must use type of its parent 'llzk.struct' "@compute_with_wrong_ret" as return type}}
    func @compute() -> !llzk.struct<@good> {
      %self = new_struct : !llzk.struct<@good>
      return %self : !llzk.struct<@good>
    }

    func @constrain(%self: !llzk.struct<@compute_with_wrong_ret>) {
      return
    }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  module @one {
    llzk.struct @good { // expected-note {{uses this type instead}}
      func @compute() -> !llzk.struct<@one::@good> {
        %self = new_struct : !llzk.struct<@one::@good>
        return %self : !llzk.struct<@one::@good>
      }
      func @constrain(%self: !llzk.struct<@one::@good>) {
        return
      }
    }
  }
  module @two {
    llzk.struct @good {
      // expected-error@+1 {{'llzk.func' op "@compute" must use type of its parent 'llzk.struct' "@two::@good" as return type}}
      func @compute() -> !llzk.struct<@one::@good> {
        %self = new_struct : !llzk.struct<@one::@good>
        return %self : !llzk.struct<@one::@good>
      }
      func @constrain(%self: !llzk.struct<@one::@good>) {
        return
      }
    }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  module { // expected-note {{unnamed 'builtin.module' here}}
    module @one {
      llzk.struct @good {
        // expected-error@+2 {{'llzk.func' op has ancestor 'builtin.module' without "veridise.lang" attribute or a name}}
        // expected-error@+1 {{could not find 'llzk.struct' named "@one::@good"}}
        func @compute() -> !llzk.struct<@one::@good> {
          %self = new_struct : !llzk.struct<@one::@good>
          return %self : !llzk.struct<@one::@good>
        }
        func @constrain(%self: !llzk.struct<@one::@good>) {
          return
        }
      }
    }
  }
}
// -----
module { // expected-note {{unnamed 'builtin.module' here}}
  // expected-error@+1 {{'llzk.struct' op has ancestor 'builtin.module' without "veridise.lang" attribute or a name}}
  llzk.struct @compute_with_wrong_ret {
    // expected-error@+1 {{'llzk.func' op "@compute" must use type of its parent 'llzk.struct' "@compute_with_wrong_ret" as return type}}
    func @compute() -> index {
      %b = index.constant 2
      return %b : index
    }

    func @constrain(%self: !llzk.struct<@compute_with_wrong_ret>) {
      return
    }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @constrain_without_args {
    func @compute() -> !llzk.struct<@constrain_without_args> {
      %self = new_struct : !llzk.struct<@constrain_without_args>
      return %self : !llzk.struct<@constrain_without_args>
    }
    // expected-error@+1 {{'llzk.func' op "@constrain" must have at least one input type}}
    func @constrain() { return }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @constrain_without_self_non_struct {
    func @compute(%a: !llzk.felt) -> !llzk.struct<@constrain_without_self_non_struct> {
      %self = new_struct : !llzk.struct<@constrain_without_self_non_struct>
      return %self : !llzk.struct<@constrain_without_self_non_struct>
    }
    // expected-error@+1 {{'llzk.func' op "@constrain" must use type of its parent 'llzk.struct' "@constrain_without_self_non_struct" as first input type}}
    func @constrain(%self: !llzk.felt) {
      return
    }
  }
}
// -----
module attributes {veridise.lang = "llzk"} {
  llzk.struct @other_type { // expected-note {{uses this type instead}}
    func @compute() -> !llzk.struct<@other_type> {
      %self = new_struct : !llzk.struct<@other_type>
      return %self : !llzk.struct<@other_type>
    }
    func @constrain(%self: !llzk.struct<@other_type>) {
      return
    }
  }
  llzk.struct @constrain_without_self_wrong_struct {
    func @compute() -> !llzk.struct<@constrain_without_self_wrong_struct> {
      %self = new_struct : !llzk.struct<@constrain_without_self_wrong_struct>
      return %self : !llzk.struct<@constrain_without_self_wrong_struct>
    }
    // expected-error@+1 {{'llzk.func' op "@constrain" must use type of its parent 'llzk.struct' "@constrain_without_self_wrong_struct" as first input type}}
    func @constrain(%self: !llzk.struct<@other_type>) {
      return
    }
  }
}
