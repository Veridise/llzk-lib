// RUN: llzk-opt %s -split-input-file -verify-diagnostics

function.def @string_to_index(
    %a: !string.string // expected-note {{prior use here}}
  ) -> index {
  // expected-error@+1 {{use of value '%a' expects different type than prior uses: '!felt.type' vs '!string.string'}}
  %b = cast.toindex %a
  function.return %b: index
}
// -----

function.def @array_to_index(
    %a: !array.type<2 x !felt.type> // expected-note {{prior use here}}
  ) -> index {
  // expected-error@+1 {{use of value '%a' expects different type than prior uses: '!felt.type' vs '!array.type<2 x !felt.type>'}}
  %b = cast.toindex %a
  function.return %b: index
}
// -----

function.def @index_to_index(
    %a: index // expected-note {{prior use here}}
  ) -> index {
  // expected-error@+1 {{use of value '%a' expects different type than prior uses: '!felt.type' vs 'index'}}
  %b = cast.toindex %a
  function.return %b: index
}
// -----

function.def @i1_to_index(
    %a: i1 // expected-note {{prior use here}}
  ) -> index {
  // expected-error@+1 {{use of value '%a' expects different type than prior uses: '!felt.type' vs 'i1'}}
  %b = cast.toindex %a
  function.return %b: index
}
// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @C1 {
    function.def @compute() -> !struct.type<@C1> {
      %self = struct.new : !struct.type<@C1>
      function.return %self : !struct.type<@C1>
    }
    function.def @constrain(%self: !struct.type<@C1>) { function.return }
  }
  function.def @struct_to_index(
        %a: !struct.type<@C1> // expected-note {{prior use here}}
    ) -> index {
    // expected-error@+1 {{use of value '%a' expects different type than prior uses: '!felt.type' vs '!struct.type<@C1>'}}
    %b = cast.toindex %a
    function.return %b: index
  }
}
// -----

function.def @string_to_felt(%a: !string.string) -> !felt.type {
  // expected-error@+1 {{'cast.tofelt' op operand #0 must be 1-bit signless integer or index, but got '!string.string'}}
  %b = cast.tofelt %a : !string.string
  function.return %b: !felt.type
}
// -----

function.def @array_to_felt(%a: !array.type<7 x i1>) -> !felt.type {
  // expected-error@+1 {{'cast.tofelt' op operand #0 must be 1-bit signless integer or index, but got '!array.type<7 x i1>'}}
  %b = cast.tofelt %a : !array.type<7 x i1>
  function.return %b: !felt.type
}
// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @C2 {
    function.def @compute() -> !struct.type<@C2> {
      %self = struct.new : !struct.type<@C2>
      function.return %self : !struct.type<@C2>
    }
    function.def @constrain(%self: !struct.type<@C2>) { function.return }
  }
  function.def @struct_to_felt(%a: !struct.type<@C2>) -> !felt.type {
    // expected-error@+1 {{'cast.tofelt' op operand #0 must be 1-bit signless integer or index, but got '!struct.type<@C2>'}}
    %b = cast.tofelt %a : !struct.type<@C2>
    function.return %b: !felt.type
  }
}
// -----

function.def @check_type_restriction_on_pram(
    %a: i1 // expected-note {{prior use here}}
  ) -> !felt.type {
  // expected-error@+1 {{use of value '%a' expects different type than prior uses: 'index' vs 'i1'}}
  %b = cast.tofelt %a : index
  function.return %b: !felt.type
}
