// RUN: llzk-opt -I %input_dir -llzk-inline-includes %s 2>&1 | FileCheck --enable-var-scope %s

module attributes {veridise.lang = "llzk"} {
  include.from "Dialect/LLZK/zir_example_0.llzk" as @std

  function.def private @LookupDelta(%table: !felt.felt, %index: !felt.felt, %count: !felt.felt)

  // Since Zir functions can generate constraints but LLZK functions cannot,
  //  the AssertBit function must be translated as a struct.
  llzk.struct @AssertBit {
    function.def @compute(%val: !felt.felt) -> !llzk.struct<@AssertBit> {
      %self = new_struct : !llzk.struct<@AssertBit>
      function.return %self: !llzk.struct<@AssertBit>
    }

    function.def @constrain(%self: !llzk.struct<@AssertBit>, %val: !felt.felt) {
      %const_1 = felt.const 1
      %t02 = felt.sub %const_1, %val
      %t03 = felt.mul %t02, %val
      %const_0 = felt.const 0
      emit_eq %t03, %const_0 : !felt.felt
      function.return
    }
  }

  llzk.struct @NondetBitReg {
    field @ab: !llzk.struct<@AssertBit>
    field @reg: !felt.felt
    // The `synthetic_return` is added here for clarity and a more strictly one-to-one
    // translation but it would also be valid to just put the `pub` modifier on `addr`.
    // ZIR frontend should mark function.return value with `pub`
    field @synthetic_return: !felt.felt {llzk.pub}

    function.def @compute(%val: !felt.felt) -> !llzk.struct<@NondetBitReg> {
      %self = new_struct : !llzk.struct<@NondetBitReg>
      writef %self[@reg] = %val : !llzk.struct<@NondetBitReg>, !felt.felt
      %t02 = function.call @AssertBit::@compute(%val) : (!felt.felt) -> (!llzk.struct<@AssertBit>)
      writef %self[@ab] = %t02 : !llzk.struct<@NondetBitReg>, !llzk.struct<@AssertBit>
      writef %self[@synthetic_return] = %val : !llzk.struct<@NondetBitReg>, !felt.felt
      function.return %self: !llzk.struct<@NondetBitReg>
    }

    function.def @constrain(%self: !llzk.struct<@NondetBitReg>, %val: !felt.felt) {
      %t02 = readf %self[@ab] : !llzk.struct<@NondetBitReg>, !llzk.struct<@AssertBit>
      %t03 = readf %self[@reg] : !llzk.struct<@NondetBitReg>, !felt.felt
      function.call @AssertBit::@constrain(%t02, %t03) : (!llzk.struct<@AssertBit>, !felt.felt) -> ()
      // Must always constrain the synthetic function.return value in case
      // it's used in a constraint by an outer component.
      %t04 = readf %self[@synthetic_return] : !llzk.struct<@NondetBitReg>, !felt.felt
      emit_eq %t04, %t03 : !felt.felt
      function.return
    }
  }

  llzk.struct @ArgU16 {
    field @count: !felt.felt
    field @val: !felt.felt

    function.def @compute(%count: !felt.felt, %val: !felt.felt) -> !llzk.struct<@ArgU16> {
      %self = new_struct : !llzk.struct<@ArgU16>
      writef %self[@count] = %count : !llzk.struct<@ArgU16>, !felt.felt
      writef %self[@val] = %val : !llzk.struct<@ArgU16>, !felt.felt
      %const_16 = felt.const 16
      function.call @LookupDelta(%const_16, %val, %count) : (!felt.felt, !felt.felt, !felt.felt) -> ()
      function.return %self: !llzk.struct<@ArgU16>
    }

    function.def @constrain(%self: !llzk.struct<@ArgU16>, %count: !felt.felt, %val: !felt.felt) {
      function.return
    }
  }

  llzk.struct @NondetU16Reg {
    field @arg: !llzk.struct<@ArgU16>
    // ZIR frontend should mark function.return value with `pub`
    field @synthetic_return : !felt.felt {llzk.pub}

    function.def @compute(%val: !felt.felt) -> !llzk.struct<@NondetU16Reg> {
      %self = new_struct : !llzk.struct<@NondetU16Reg>
      %const_1 = felt.const 1
      %t02 = function.call @ArgU16::@compute(%const_1, %val) : (!felt.felt, !felt.felt) ->(!llzk.struct<@ArgU16>)
      writef %self[@arg] = %t02 : !llzk.struct<@NondetU16Reg>, !llzk.struct<@ArgU16>
      %t03 = readf %t02[@val] : !llzk.struct<@ArgU16>, !felt.felt
      writef %self[@synthetic_return] = %t03 : !llzk.struct<@NondetU16Reg>, !felt.felt
      function.return %self: !llzk.struct<@NondetU16Reg>
    }

    function.def @constrain(%self: !llzk.struct<@NondetU16Reg>, %val: !felt.felt) {
      %const_1 = felt.const 1
      %t02 = readf %self[@arg] : !llzk.struct<@NondetU16Reg>, !llzk.struct<@ArgU16>
      function.call @ArgU16::@constrain(%t02, %const_1, %val) : (!llzk.struct<@ArgU16>, !felt.felt, !felt.felt) ->()
      %t03 = readf %t02[@count] : !llzk.struct<@ArgU16>, !felt.felt
      emit_eq %const_1, %t03 : !felt.felt
      // Must always constrain the synthetic function.return value in case
      // it's used in a constraint by an outer component.
      %t04 = readf %t02[@val] : !llzk.struct<@ArgU16>, !felt.felt
      %t05 = readf %self[@synthetic_return] : !llzk.struct<@NondetU16Reg>, !felt.felt
      emit_eq %t05, %t04 : !felt.felt
      function.return
    }
  }

  llzk.struct @U16Reg {
    field @ret: !llzk.struct<@NondetU16Reg>
    // ZIR frontend should mark function.return value with `pub`
    field @synthetic_return : !felt.felt {llzk.pub}

    function.def @compute(%val: !felt.felt) -> !llzk.struct<@U16Reg> {
      %self = new_struct : !llzk.struct<@U16Reg>
      %ret = function.call @NondetU16Reg::@compute(%val) : (!felt.felt) -> (!llzk.struct<@NondetU16Reg>)
      writef %self[@ret] = %ret : !llzk.struct<@U16Reg>, !llzk.struct<@NondetU16Reg>
      writef %self[@synthetic_return] = %val : !llzk.struct<@U16Reg>, !felt.felt
      function.return %self: !llzk.struct<@U16Reg>
    }

    function.def @constrain(%self: !llzk.struct<@U16Reg>, %val: !felt.felt) {
      %ret = readf %self[@ret] : !llzk.struct<@U16Reg>, !llzk.struct<@NondetU16Reg>
      function.call @NondetU16Reg::@constrain(%ret, %val) : (!llzk.struct<@NondetU16Reg>, !felt.felt) -> ()
      %t02 = readf %ret[@synthetic_return] : !llzk.struct<@NondetU16Reg>, !felt.felt
      emit_eq %t02, %val : !felt.felt
      // Must always constrain the synthetic function.return value in case
      // it's used in a constraint by an outer component.
      %t03 = readf %self[@synthetic_return] : !llzk.struct<@U16Reg>, !felt.felt
      emit_eq %t03, %val : !felt.felt
      function.return
    }
  }

  llzk.struct @AddrDecomposeBits {
    field @low0: !llzk.struct<@NondetBitReg>
    field @low1: !llzk.struct<@NondetBitReg>
    field @low2: !felt.felt
    field @upperDiff: !llzk.struct<@U16Reg>
    field @med14: !llzk.struct<@NondetU16Reg>
    field @addr: !felt.felt
    // The `synthetic_return` is added here for clarity and a more strictly one-to-one
    // translation but it would also be valid to just put the `pub` modifier on `addr`.
    // ZIR frontend should mark function.return value with `pub`
    field @synthetic_return: !felt.felt {llzk.pub}

    function.def @compute(%x: !llzk.struct<@std::@risc0::@ValU32>, %mode: !felt.felt) -> !llzk.struct<@AddrDecomposeBits> {
      %self = new_struct : !llzk.struct<@AddrDecomposeBits>
      // low0 := NondetBitReg.compute(x.low & 0x1);
      %t01 = readf %x[@low] : !llzk.struct<@std::@risc0::@ValU32>, !felt.felt
      %const_0x1 = felt.const 0x1
      %t02 = felt.bit_and %t01, %const_0x1
      %low0 = function.call @NondetBitReg::@compute(%t02) : (!felt.felt) -> !llzk.struct<@NondetBitReg>
      writef %self[@low0] = %low0 : !llzk.struct<@AddrDecomposeBits>, !llzk.struct<@NondetBitReg>
      // low1 := NondetBitReg.compute((x.low & 0x2) / 2);
      %t03 = readf %x[@low] : !llzk.struct<@std::@risc0::@ValU32>, !felt.felt
      %const_0x2 = felt.const 0x2
      %t04 = felt.bit_and %t03, %const_0x2
      %const_2 = felt.const 2
      %t05 = felt.div %t04, %const_2
      %low1 = function.call @NondetBitReg::@compute(%t05) : (!felt.felt) -> !llzk.struct<@NondetBitReg>
      writef %self[@low1] = %low1 : !llzk.struct<@AddrDecomposeBits>, !llzk.struct<@NondetBitReg>
      // low2 := low1.synthetic_return * 2 + low0.synthetic_return;
      %t06 = readf %low1[@synthetic_return] : !llzk.struct<@NondetBitReg>, !felt.felt
      %t07 = felt.mul %t06, %const_2
      %t08 = readf %low0[@synthetic_return] : !llzk.struct<@NondetBitReg>, !felt.felt
      %low2 = felt.add %t07, %t08
      writef %self[@low2] = %low2 : !llzk.struct<@AddrDecomposeBits>, !felt.felt
      // upperDiff := U16Reg.compute(mode * 0xffff + (1 - mode) * 0xbfff - x.high);
      %const_0xffff = felt.const 0xffff
      %t09 = felt.mul %mode, %const_0xffff   // mode * 0xffff
      %const_1 = felt.const 1
      %t10 = felt.sub %const_1, %mode        // (1 - mode)
      %const_0xbfff = felt.const 0xbfff
      %t11 = felt.mul %t10, %const_0xbfff    // (1 - mode) * 0xbfff
      %t12 = felt.add %t11, %t09             // mode * 0xffff + (1 - mode) * 0xbfff
      %t13 = readf %x[@high] : !llzk.struct<@std::@risc0::@ValU32>, !felt.felt
      %t14 = felt.sub %t12, %t13             // mode * 0xffff + (1 - mode) * 0xbfff - x.high
      %upperDiff = function.call @U16Reg::@compute(%t14) : (!felt.felt) -> !llzk.struct<@U16Reg>
      writef %self[@upperDiff] = %upperDiff : !llzk.struct<@AddrDecomposeBits>, !llzk.struct<@U16Reg>
      // med14 := NondetU16Reg.compute((x.low - low2) / 4);
      %t15 = readf %x[@low] : !llzk.struct<@std::@risc0::@ValU32>, !felt.felt
      %t16 = felt.sub %t15, %low2            // (x.low - low2)
      %const_4 = felt.const 4
      %t17 = felt.div %t16, %const_4         // (x.low - low2) / 4
      %med14 = function.call @NondetU16Reg::@compute(%t17) : (!felt.felt) -> !llzk.struct<@NondetU16Reg>
      writef %self[@med14] = %med14 : !llzk.struct<@AddrDecomposeBits>, !llzk.struct<@NondetU16Reg>
      // addr := 0x4000 * x.high + med14.synthetic_return;
      %const_0x4000 = felt.const 0x4000
      %t18 = readf %x[@high] : !llzk.struct<@std::@risc0::@ValU32>, !felt.felt
      %t19 = felt.mul %const_0x4000, %t18    // 0x4000 * x.high
      %t20 = readf %med14[@synthetic_return] : !llzk.struct<@NondetU16Reg>, !felt.felt
      %addr = felt.add %t19, %t20            // 0x4000 * x.high + med14.synthetic_return
      writef %self[@addr] = %addr : !llzk.struct<@AddrDecomposeBits>, !felt.felt
      // synthetic_return := addr;
      writef %self[@synthetic_return] = %addr : !llzk.struct<@AddrDecomposeBits>, !felt.felt
      //
      function.return %self: !llzk.struct<@AddrDecomposeBits>
    }

    function.def @constrain(%self: !llzk.struct<@AddrDecomposeBits>, %x: !llzk.struct<@std::@risc0::@ValU32>, %mode: !felt.felt) {
      // low0.constrain(nondetFelt());
      %t01 = felt.nondet
      %low0 = readf %self[@low0] : !llzk.struct<@AddrDecomposeBits>, !llzk.struct<@NondetBitReg>
      function.call @NondetBitReg::@constrain(%low0, %t01) : (!llzk.struct<@NondetBitReg>, !felt.felt) -> ()
      // low1.constrain(nondetFelt());
      %t03 = felt.nondet
      %low1 = readf %self[@low1] : !llzk.struct<@AddrDecomposeBits>, !llzk.struct<@NondetBitReg>
      function.call @NondetBitReg::@constrain(%low1, %t03) : (!llzk.struct<@NondetBitReg>, !felt.felt) -> ()
      // emit low2 = low1.synthetic_return * 2 + low0.synthetic_return;
      %t05 = readf %self[@low2] : !llzk.struct<@AddrDecomposeBits>, !felt.felt
      %t06 = readf %low1[@synthetic_return] : !llzk.struct<@NondetBitReg>, !felt.felt
      %const_2 = felt.const 2
      %t07 = felt.mul %t06, %const_2         // low1.synthetic_return * 2
      %t08 = readf %low0[@synthetic_return] : !llzk.struct<@NondetBitReg>, !felt.felt
      %t04 = felt.add %t07, %t08             // low1.synthetic_return * 2 + low0.synthetic_return
      emit_eq %t05, %t04 : !felt.felt
      // upperDiff.constrain(mode * 0xffff + (1 - mode) * 0xbfff - x.high);
      %const_0xffff = felt.const 0xffff
      %t09 = felt.mul %mode, %const_0xffff   // mode * 0xffff
      %const_1 = felt.const 1
      %t10 = felt.sub %const_1, %mode        // (1 - mode)
      %const_0xbfff = felt.const 0xbfff
      %t11 = felt.mul %t10, %const_0xbfff    // (1 - mode) * 0xbfff
      %t12 = felt.add %t11, %t09             // mode * 0xffff + (1 - mode) * 0xbfff
      %t13 = readf %x[@high] : !llzk.struct<@std::@risc0::@ValU32>, !felt.felt
      %t14 = felt.sub %t12, %t13             // mode * 0xffff + (1 - mode) * 0xbfff - x.high
      %upperDiff = readf %self[@upperDiff] : !llzk.struct<@AddrDecomposeBits>, !llzk.struct<@U16Reg>
      function.call @U16Reg::@constrain(%upperDiff, %t14) : (!llzk.struct<@U16Reg>, !felt.felt) -> ()
      // med14.constrain((x.low - low2) / 4);
      %t15 = readf %x[@low] : !llzk.struct<@std::@risc0::@ValU32>, !felt.felt
      %t18 = readf %self[@low2] : !llzk.struct<@AddrDecomposeBits>, !felt.felt
      %t16 = felt.sub %t15, %t18             // (x.low - low2)
      %const_4 = felt.const 4
      %t17 = felt.div %t16, %const_4         // (x.low - low2) / 4
      %med14 = readf %self[@med14] : !llzk.struct<@AddrDecomposeBits>, !llzk.struct<@NondetU16Reg>
      function.call @NondetU16Reg::@constrain(%med14, %t17) : (!llzk.struct<@NondetU16Reg>, !felt.felt) -> ()
      // emit med14.synthetic_return * 4 + low2 = x.low;
      %t19 = readf %med14[@synthetic_return] : !llzk.struct<@NondetU16Reg>, !felt.felt
      %t20 = felt.mul %t19, %const_4         // med14.synthetic_return * 4
      %t21 = readf %self[@low2] : !llzk.struct<@AddrDecomposeBits>, !felt.felt
      %t22 = felt.add %t20, %t21             // med14.synthetic_return * 4 + low2
      %t23 = readf %x[@low] : !llzk.struct<@std::@risc0::@ValU32>, !felt.felt
      emit_eq %t22, %t23 : !felt.felt
      // emit addr = 0x4000 * x.high + med14.synthetic_return;
      %t24 = readf %self[@addr] : !llzk.struct<@AddrDecomposeBits>, !felt.felt
      %const_0x4000 = felt.const 0x4000
      %t25 = readf %x[@high] : !llzk.struct<@std::@risc0::@ValU32>, !felt.felt
      %t26 = felt.mul %const_0x4000, %t25    // 0x4000 * x.high
      %t27 = readf %med14[@synthetic_return] : !llzk.struct<@NondetU16Reg>, !felt.felt
      %t28 = felt.add %t26, %t27             // 0x4000 * x.high + med14.synthetic_return
      emit_eq %t24, %t28 : !felt.felt
      // Must always constrain the synthetic function.return value in case
      // it's used in a constraint by an outer component.
      // emit synthetic_return = addr;
      %t30 = readf %self[@synthetic_return] : !llzk.struct<@AddrDecomposeBits>, !felt.felt
      %t31 = readf %self[@addr] : !llzk.struct<@AddrDecomposeBits>, !felt.felt
      emit_eq %t30, %t31 : !felt.felt
      function.return
    }
  }
}

//CHECK-LABEL:   function.def private @LookupDelta(!felt.felt, !felt.felt, !felt.felt)
//CHECK-LABEL:   llzk.struct @AssertBit {
//CHECK-NEXT:      function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !llzk.struct<@AssertBit> attributes {function.allow_witness} {
//CHECK-NEXT:        %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@AssertBit>
//CHECK-NEXT:        function.return %[[SELF]] : !llzk.struct<@AssertBit>
//CHECK-NEXT:      }
//CHECK-NEXT:      function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@AssertBit>, %[[A1:[0-9a-zA-Z_\.]+]]: !felt.felt) attributes {function.allow_constraint} {
//CHECK-NEXT:        %[[C1:[0-9a-zA-Z_\.]+]] = felt.const 1
//CHECK-NEXT:        %[[T00:[0-9a-zA-Z_\.]+]] = felt.sub %[[C1]], %[[A1]]
//CHECK-NEXT:        %[[T01:[0-9a-zA-Z_\.]+]] = felt.mul %[[T00]], %[[A1]]
//CHECK-NEXT:        %[[C0:[0-9a-zA-Z_\.]+]] = felt.const 0
//CHECK-NEXT:        emit_eq %[[T01]], %[[C0]] : !felt.felt, !felt.felt
//CHECK-NEXT:        function.return
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-LABEL:   llzk.struct @NondetBitReg {
//CHECK-NEXT:      field @ab : !llzk.struct<@AssertBit>
//CHECK-NEXT:      field @reg : !felt.felt
//CHECK-NEXT:      field @synthetic_return : !felt.felt {llzk.pub}
//CHECK-NEXT:      function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !llzk.struct<@NondetBitReg> attributes {function.allow_witness} {
//CHECK-NEXT:        %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@NondetBitReg>
//CHECK-NEXT:        writef %[[SELF]][@reg] = %[[A0]] : <@NondetBitReg>, !felt.felt
//CHECK-NEXT:        %[[T00:[0-9a-zA-Z_\.]+]] = function.call @AssertBit::@compute(%[[A0:[0-9a-zA-Z_\.]+]]) : (!felt.felt) -> !llzk.struct<@AssertBit>
//CHECK-NEXT:        writef %[[SELF]][@ab] = %[[T00]] : <@NondetBitReg>, !llzk.struct<@AssertBit>
//CHECK-NEXT:        writef %[[SELF]][@synthetic_return] = %[[A0]] : <@NondetBitReg>, !felt.felt
//CHECK-NEXT:        function.return %[[SELF]] : !llzk.struct<@NondetBitReg>
//CHECK-NEXT:      }
//CHECK-NEXT:      function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@NondetBitReg>, %[[A1:[0-9a-zA-Z_\.]+]]: !felt.felt) attributes {function.allow_constraint} {
//CHECK-NEXT:        %[[T00:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@ab] : <@NondetBitReg>, !llzk.struct<@AssertBit>
//CHECK-NEXT:        %[[T01:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@reg] : <@NondetBitReg>, !felt.felt
//CHECK-NEXT:        function.call @AssertBit::@constrain(%[[T00]], %[[T01]]) : (!llzk.struct<@AssertBit>, !felt.felt) -> ()
//CHECK-NEXT:        %[[T02:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@synthetic_return] : <@NondetBitReg>, !felt.felt
//CHECK-NEXT:        emit_eq %[[T02]], %[[T01]] : !felt.felt, !felt.felt
//CHECK-NEXT:        function.return
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-LABEL:   llzk.struct @ArgU16 {
//CHECK-NEXT:      field @count : !felt.felt
//CHECK-NEXT:      field @val : !felt.felt
//CHECK-NEXT:      function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[A1:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !llzk.struct<@ArgU16> attributes {function.allow_witness} {
//CHECK-NEXT:        %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ArgU16>
//CHECK-NEXT:        writef %[[SELF]][@count] = %[[A0]] : <@ArgU16>, !felt.felt
//CHECK-NEXT:        writef %[[SELF]][@val] = %[[A1]] : <@ArgU16>, !felt.felt
//CHECK-NEXT:        %[[C16:[0-9a-zA-Z_\.]+]] = felt.const 16
//CHECK-NEXT:        function.call @LookupDelta(%[[C16]], %[[A1]], %[[A0]]) : (!felt.felt, !felt.felt, !felt.felt) -> ()
//CHECK-NEXT:        function.return %[[SELF]] : !llzk.struct<@ArgU16>
//CHECK-NEXT:      }
//CHECK-NEXT:      function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ArgU16>,
//CHECK-SAME:      %[[A1:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[A2:[0-9a-zA-Z_\.]+]]: !felt.felt) attributes {function.allow_constraint} {
//CHECK-NEXT:        function.return
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-LABEL:   llzk.struct @NondetU16Reg {
//CHECK-NEXT:      field @arg : !llzk.struct<@ArgU16>
//CHECK-NEXT:      field @synthetic_return : !felt.felt {llzk.pub}
//CHECK-NEXT:      function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !llzk.struct<@NondetU16Reg> attributes {function.allow_witness} {
//CHECK-NEXT:        %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@NondetU16Reg>
//CHECK-NEXT:        %[[C1:[0-9a-zA-Z_\.]+]] = felt.const 1
//CHECK-NEXT:        %[[T00:[0-9a-zA-Z_\.]+]] = function.call @ArgU16::@compute(%[[C1]], %[[A0]]) : (!felt.felt, !felt.felt) -> !llzk.struct<@ArgU16>
//CHECK-NEXT:        writef %[[SELF]][@arg] = %[[T00]] : <@NondetU16Reg>, !llzk.struct<@ArgU16>
//CHECK-NEXT:        %[[T01:[0-9a-zA-Z_\.]+]] = readf %[[T00]][@val] : <@ArgU16>, !felt.felt
//CHECK-NEXT:        writef %[[SELF]][@synthetic_return] = %[[T01]] : <@NondetU16Reg>, !felt.felt
//CHECK-NEXT:        function.return %[[SELF]] : !llzk.struct<@NondetU16Reg>
//CHECK-NEXT:      }
//CHECK-NEXT:      function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@NondetU16Reg>, %[[A1:[0-9a-zA-Z_\.]+]]: !felt.felt) attributes {function.allow_constraint} {
//CHECK-NEXT:        %[[C1:[0-9a-zA-Z_\.]+]] = felt.const 1
//CHECK-NEXT:        %[[T00:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@arg] : <@NondetU16Reg>, !llzk.struct<@ArgU16>
//CHECK-NEXT:        function.call @ArgU16::@constrain(%[[T00]], %[[C1]], %[[A1]]) : (!llzk.struct<@ArgU16>, !felt.felt, !felt.felt) -> ()
//CHECK-NEXT:        %[[T01:[0-9a-zA-Z_\.]+]] = readf %[[T00]][@count] : <@ArgU16>, !felt.felt
//CHECK-NEXT:        emit_eq %[[C1]], %[[T01]] : !felt.felt, !felt.felt
//CHECK-NEXT:        %[[T02:[0-9a-zA-Z_\.]+]] = readf %[[T00]][@val] : <@ArgU16>, !felt.felt
//CHECK-NEXT:        %[[T03:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@synthetic_return] : <@NondetU16Reg>, !felt.felt
//CHECK-NEXT:        emit_eq %[[T03]], %[[T02]] : !felt.felt, !felt.felt
//CHECK-NEXT:        function.return
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-LABEL:   llzk.struct @U16Reg {
//CHECK-NEXT:      field @ret : !llzk.struct<@NondetU16Reg>
//CHECK-NEXT:      field @synthetic_return : !felt.felt {llzk.pub}
//CHECK-NEXT:      function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !llzk.struct<@U16Reg> attributes {function.allow_witness} {
//CHECK-NEXT:        %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@U16Reg>
//CHECK-NEXT:        %[[T00:[0-9a-zA-Z_\.]+]] = function.call @NondetU16Reg::@compute(%[[A0:[0-9a-zA-Z_\.]+]]) : (!felt.felt) -> !llzk.struct<@NondetU16Reg>
//CHECK-NEXT:        writef %[[SELF]][@ret] = %[[T00]] : <@U16Reg>, !llzk.struct<@NondetU16Reg>
//CHECK-NEXT:        writef %[[SELF]][@synthetic_return] = %[[A0]] : <@U16Reg>, !felt.felt
//CHECK-NEXT:        function.return %[[SELF]] : !llzk.struct<@U16Reg>
//CHECK-NEXT:      }
//CHECK-NEXT:      function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@U16Reg>, %[[A1:[0-9a-zA-Z_\.]+]]: !felt.felt) attributes {function.allow_constraint} {
//CHECK-NEXT:        %[[T00:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@ret] : <@U16Reg>, !llzk.struct<@NondetU16Reg>
//CHECK-NEXT:        function.call @NondetU16Reg::@constrain(%[[T00]], %[[A1]]) : (!llzk.struct<@NondetU16Reg>, !felt.felt) -> ()
//CHECK-NEXT:        %[[T01:[0-9a-zA-Z_\.]+]] = readf %[[T00]][@synthetic_return] : <@NondetU16Reg>, !felt.felt
//CHECK-NEXT:        emit_eq %[[T01]], %[[A1]] : !felt.felt, !felt.felt
//CHECK-NEXT:        %[[T02:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@synthetic_return] : <@U16Reg>, !felt.felt
//CHECK-NEXT:        emit_eq %[[T02]], %[[A1]] : !felt.felt, !felt.felt
//CHECK-NEXT:        function.return
//CHECK-NEXT:      }
//CHECK-NEXT:    }
//CHECK-LABEL:   llzk.struct @AddrDecomposeBits {
//CHECK-NEXT:      field @low0 : !llzk.struct<@NondetBitReg>
//CHECK-NEXT:      field @low1 : !llzk.struct<@NondetBitReg>
//CHECK-NEXT:      field @low2 : !felt.felt
//CHECK-NEXT:      field @upperDiff : !llzk.struct<@U16Reg>
//CHECK-NEXT:      field @med14 : !llzk.struct<@NondetU16Reg>
//CHECK-NEXT:      field @addr : !felt.felt
//CHECK-NEXT:      field @synthetic_return : !felt.felt {llzk.pub}
//CHECK-NEXT:      function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@std::@risc0::@ValU32>,
//CHECK-SAME:      %[[A1:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !llzk.struct<@AddrDecomposeBits>  attributes {function.allow_witness} {
//CHECK-NEXT:        %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@AddrDecomposeBits>
//CHECK-NEXT:        %[[T00:[0-9a-zA-Z_\.]+]] = readf %[[A0]][@low] : <@std::@risc0::@ValU32>, !felt.felt
//CHECK-NEXT:        %[[C1:[0-9a-zA-Z_\.]+]] = felt.const 1
//CHECK-NEXT:        %[[T01:[0-9a-zA-Z_\.]+]] = felt.bit_and %[[T00]], %[[C1]]
//CHECK-NEXT:        %[[T02:[0-9a-zA-Z_\.]+]] = function.call @NondetBitReg::@compute(%[[T01]]) : (!felt.felt) -> !llzk.struct<@NondetBitReg>
//CHECK-NEXT:        writef %[[SELF]][@low0] = %[[T02]] : <@AddrDecomposeBits>, !llzk.struct<@NondetBitReg>
//CHECK-NEXT:        %[[T03:[0-9a-zA-Z_\.]+]] = readf %[[A0]][@low] : <@std::@risc0::@ValU32>, !felt.felt
//CHECK-NEXT:        %[[C2:[0-9a-zA-Z_\.]+]] = felt.const 2
//CHECK-NEXT:        %[[T04:[0-9a-zA-Z_\.]+]] = felt.bit_and %[[T03]], %[[C2]]
//CHECK-NEXT:        %[[C2_0:[0-9a-zA-Z_\.]+]] = felt.const 2
//CHECK-NEXT:        %[[T05:[0-9a-zA-Z_\.]+]] = felt.div %[[T04]], %[[C2_0]]
//CHECK-NEXT:        %[[T06:[0-9a-zA-Z_\.]+]] = function.call @NondetBitReg::@compute(%[[T05]]) : (!felt.felt) -> !llzk.struct<@NondetBitReg>
//CHECK-NEXT:        writef %[[SELF]][@low1] = %[[T06]] : <@AddrDecomposeBits>, !llzk.struct<@NondetBitReg>
//CHECK-NEXT:        %[[T07:[0-9a-zA-Z_\.]+]] = readf %[[T06]][@synthetic_return] : <@NondetBitReg>, !felt.felt
//CHECK-NEXT:        %[[T08:[0-9a-zA-Z_\.]+]] = felt.mul %[[T07]], %[[C2_0]]
//CHECK-NEXT:        %[[T09:[0-9a-zA-Z_\.]+]] = readf %[[T02]][@synthetic_return] : <@NondetBitReg>, !felt.felt
//CHECK-NEXT:        %[[T10:[0-9a-zA-Z_\.]+]] = felt.add %[[T08]], %[[T09]]
//CHECK-NEXT:        writef %[[SELF]][@low2] = %[[T10]] : <@AddrDecomposeBits>, !felt.felt
//CHECK-NEXT:        %[[C65535:[0-9a-zA-Z_\.]+]] = felt.const 65535
//CHECK-NEXT:        %[[T11:[0-9a-zA-Z_\.]+]] = felt.mul %[[A1]], %[[C65535]]
//CHECK-NEXT:        %[[C1_1:[0-9a-zA-Z_\.]+]] = felt.const 1
//CHECK-NEXT:        %[[T12:[0-9a-zA-Z_\.]+]] = felt.sub %[[C1_1]], %[[A1]]
//CHECK-NEXT:        %[[C49151:[0-9a-zA-Z_\.]+]] = felt.const 49151
//CHECK-NEXT:        %[[T13:[0-9a-zA-Z_\.]+]] = felt.mul %[[T12]], %[[C49151]]
//CHECK-NEXT:        %[[T14:[0-9a-zA-Z_\.]+]] = felt.add %[[T13]], %[[T11]]
//CHECK-NEXT:        %[[T15:[0-9a-zA-Z_\.]+]] = readf %[[A0]][@high] : <@std::@risc0::@ValU32>, !felt.felt
//CHECK-NEXT:        %[[T16:[0-9a-zA-Z_\.]+]] = felt.sub %[[T14]], %[[T15]]
//CHECK-NEXT:        %[[T17:[0-9a-zA-Z_\.]+]] = function.call @U16Reg::@compute(%[[T16]]) : (!felt.felt) -> !llzk.struct<@U16Reg>
//CHECK-NEXT:        writef %[[SELF]][@upperDiff] = %[[T17]] : <@AddrDecomposeBits>, !llzk.struct<@U16Reg>
//CHECK-NEXT:        %[[T18:[0-9a-zA-Z_\.]+]] = readf %[[A0]][@low] : <@std::@risc0::@ValU32>, !felt.felt
//CHECK-NEXT:        %[[T19:[0-9a-zA-Z_\.]+]] = felt.sub %[[T18]], %[[T10]]
//CHECK-NEXT:        %[[C4:[0-9a-zA-Z_\.]+]] = felt.const 4
//CHECK-NEXT:        %[[T20:[0-9a-zA-Z_\.]+]] = felt.div %[[T19]], %[[C4]]
//CHECK-NEXT:        %[[T21:[0-9a-zA-Z_\.]+]] = function.call @NondetU16Reg::@compute(%[[T20]]) : (!felt.felt) -> !llzk.struct<@NondetU16Reg>
//CHECK-NEXT:        writef %[[SELF]][@med14] = %[[T21]] : <@AddrDecomposeBits>, !llzk.struct<@NondetU16Reg>
//CHECK-NEXT:        %[[C16384:[0-9a-zA-Z_\.]+]] = felt.const 16384
//CHECK-NEXT:        %[[T22:[0-9a-zA-Z_\.]+]] = readf %[[A0]][@high] : <@std::@risc0::@ValU32>, !felt.felt
//CHECK-NEXT:        %[[T23:[0-9a-zA-Z_\.]+]] = felt.mul %[[C16384]], %[[T22]]
//CHECK-NEXT:        %[[T24:[0-9a-zA-Z_\.]+]] = readf %[[T21]][@synthetic_return] : <@NondetU16Reg>, !felt.felt
//CHECK-NEXT:        %[[T25:[0-9a-zA-Z_\.]+]] = felt.add %[[T23]], %[[T24]]
//CHECK-NEXT:        writef %[[SELF]][@addr] = %[[T25]] : <@AddrDecomposeBits>, !felt.felt
//CHECK-NEXT:        writef %[[SELF]][@synthetic_return] = %[[T25]] : <@AddrDecomposeBits>, !felt.felt
//CHECK-NEXT:        function.return %[[SELF]] : !llzk.struct<@AddrDecomposeBits>
//CHECK-NEXT:      }
//CHECK-NEXT:      function.def @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@AddrDecomposeBits>,
//CHECK-SAME:      %[[A1:[0-9a-zA-Z_\.]+]]: !llzk.struct<@std::@risc0::@ValU32>, %[[A2:[0-9a-zA-Z_\.]+]]: !felt.felt) attributes {function.allow_constraint} {
//CHECK-NEXT:        %[[TN0:[0-9a-zA-Z_\.]+]] = felt.nondet
//CHECK-NEXT:        %[[T00:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@low0] : <@AddrDecomposeBits>, !llzk.struct<@NondetBitReg>
//CHECK-NEXT:        function.call @NondetBitReg::@constrain(%[[T00]], %[[TN0]]) : (!llzk.struct<@NondetBitReg>, !felt.felt) -> ()
//CHECK-NEXT:        %[[TN1:[0-9a-zA-Z_\.]+]] = felt.nondet
//CHECK-NEXT:        %[[T01:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@low1] : <@AddrDecomposeBits>, !llzk.struct<@NondetBitReg>
//CHECK-NEXT:        function.call @NondetBitReg::@constrain(%[[T01]], %[[TN1]]) : (!llzk.struct<@NondetBitReg>, !felt.felt) -> ()
//CHECK-NEXT:        %[[T02:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@low2] : <@AddrDecomposeBits>, !felt.felt
//CHECK-NEXT:        %[[T03:[0-9a-zA-Z_\.]+]] = readf %[[T01]][@synthetic_return] : <@NondetBitReg>, !felt.felt
//CHECK-NEXT:        %[[C2:[0-9a-zA-Z_\.]+]] = felt.const 2
//CHECK-NEXT:        %[[T04:[0-9a-zA-Z_\.]+]] = felt.mul %[[T03]], %[[C2]]
//CHECK-NEXT:        %[[T05:[0-9a-zA-Z_\.]+]] = readf %[[T00]][@synthetic_return] : <@NondetBitReg>, !felt.felt
//CHECK-NEXT:        %[[T06:[0-9a-zA-Z_\.]+]] = felt.add %[[T04]], %[[T05]]
//CHECK-NEXT:        emit_eq %[[T02]], %[[T06]] : !felt.felt, !felt.felt
//CHECK-NEXT:        %[[C65535:[0-9a-zA-Z_\.]+]] = felt.const 65535
//CHECK-NEXT:        %[[T07:[0-9a-zA-Z_\.]+]] = felt.mul %[[A2]], %[[C65535]]
//CHECK-NEXT:        %[[C1:[0-9a-zA-Z_\.]+]] = felt.const 1
//CHECK-NEXT:        %[[T08:[0-9a-zA-Z_\.]+]] = felt.sub %[[C1]], %[[A2]]
//CHECK-NEXT:        %[[C49151:[0-9a-zA-Z_\.]+]] = felt.const 49151
//CHECK-NEXT:        %[[T09:[0-9a-zA-Z_\.]+]] = felt.mul %[[T08]], %[[C49151]]
//CHECK-NEXT:        %[[T10:[0-9a-zA-Z_\.]+]] = felt.add %[[T09]], %[[T07]]
//CHECK-NEXT:        %[[T11:[0-9a-zA-Z_\.]+]] = readf %[[A1]][@high] : <@std::@risc0::@ValU32>, !felt.felt
//CHECK-NEXT:        %[[T12:[0-9a-zA-Z_\.]+]] = felt.sub %[[T10]], %[[T11]]
//CHECK-NEXT:        %[[T13:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@upperDiff] : <@AddrDecomposeBits>, !llzk.struct<@U16Reg>
//CHECK-NEXT:        function.call @U16Reg::@constrain(%[[T13]], %[[T12]]) : (!llzk.struct<@U16Reg>, !felt.felt) -> ()
//CHECK-NEXT:        %[[T14:[0-9a-zA-Z_\.]+]] = readf %[[A1]][@low] : <@std::@risc0::@ValU32>, !felt.felt
//CHECK-NEXT:        %[[T15:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@low2] : <@AddrDecomposeBits>, !felt.felt
//CHECK-NEXT:        %[[T16:[0-9a-zA-Z_\.]+]] = felt.sub %[[T14]], %[[T15]]
//CHECK-NEXT:        %[[C4:[0-9a-zA-Z_\.]+]] = felt.const 4
//CHECK-NEXT:        %[[T17:[0-9a-zA-Z_\.]+]] = felt.div %[[T16]], %[[C4]]
//CHECK-NEXT:        %[[T18:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@med14] : <@AddrDecomposeBits>, !llzk.struct<@NondetU16Reg>
//CHECK-NEXT:        function.call @NondetU16Reg::@constrain(%[[T18]], %[[T17]]) : (!llzk.struct<@NondetU16Reg>, !felt.felt) -> ()
//CHECK-NEXT:        %[[T19:[0-9a-zA-Z_\.]+]] = readf %[[T18]][@synthetic_return] : <@NondetU16Reg>, !felt.felt
//CHECK-NEXT:        %[[T20:[0-9a-zA-Z_\.]+]] = felt.mul %[[T19]], %[[C4]]
//CHECK-NEXT:        %[[T21:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@low2] : <@AddrDecomposeBits>, !felt.felt
//CHECK-NEXT:        %[[T22:[0-9a-zA-Z_\.]+]] = felt.add %[[T20]], %[[T21]]
//CHECK-NEXT:        %[[T23:[0-9a-zA-Z_\.]+]] = readf %[[A1]][@low] : <@std::@risc0::@ValU32>, !felt.felt
//CHECK-NEXT:        emit_eq %[[T22]], %[[T23]] : !felt.felt, !felt.felt
//CHECK-NEXT:        %[[T24:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@addr] : <@AddrDecomposeBits>, !felt.felt
//CHECK-NEXT:        %[[C16384:[0-9a-zA-Z_\.]+]] = felt.const 16384
//CHECK-NEXT:        %[[T25:[0-9a-zA-Z_\.]+]] = readf %[[A1]][@high] : <@std::@risc0::@ValU32>, !felt.felt
//CHECK-NEXT:        %[[T26:[0-9a-zA-Z_\.]+]] = felt.mul %[[C16384]], %[[T25]]
//CHECK-NEXT:        %[[T27:[0-9a-zA-Z_\.]+]] = readf %[[T18]][@synthetic_return] : <@NondetU16Reg>, !felt.felt
//CHECK-NEXT:        %[[T28:[0-9a-zA-Z_\.]+]] = felt.add %[[T26]], %[[T27]]
//CHECK-NEXT:        emit_eq %[[T24]], %[[T28]] : !felt.felt, !felt.felt
//CHECK-NEXT:        %[[T29:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@synthetic_return] : <@AddrDecomposeBits>, !felt.felt
//CHECK-NEXT:        %[[T30:[0-9a-zA-Z_\.]+]] = readf %[[SELF]][@addr] : <@AddrDecomposeBits>, !felt.felt
//CHECK-NEXT:        emit_eq %[[T29]], %[[T30]] : !felt.felt, !felt.felt
//CHECK-NEXT:        function.return
//CHECK-NEXT:      }
//CHECK-NEXT:    }
