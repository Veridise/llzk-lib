// RUN: llzk-opt -split-input-file %s -llzk-flatten 2>&1 | FileCheck --enable-var-scope %s

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentA1<[@T]> {
    llzk.field @f1 : !llzk.tvar<@T> {column}

    func @constrain(%self: !llzk.struct<@ComponentA1<[@T]>>) { return }
    func @compute() -> !llzk.struct<@ComponentA1<[@T]>> {
      %self = new_struct : !llzk.struct<@ComponentA1<[@T]>>
      return %self : !llzk.struct<@ComponentA1<[@T]>>
    }
  }

  llzk.struct @ComponentA2 {
    func @compute(%p: !llzk.struct<@ComponentA1<[!llzk.felt]>>) -> !llzk.struct<@ComponentA2> {
      %self = new_struct : !llzk.struct<@ComponentA2>
      %r = readf %p[@f1] offset by -1 : !llzk.struct<@ComponentA1<[!llzk.felt]>>, !llzk.felt
      return %self : !llzk.struct<@ComponentA2>
    }

    func @constrain(%self: !llzk.struct<@ComponentA2>, %p: !llzk.struct<@ComponentA1<[!llzk.felt]>>) {
      return
    }
  }
}
//CHECK-LABEL: llzk.struct @ComponentA1_f {
//CHECK-NEXT:    field @f1 : !llzk.felt {column}
//CHECK-NEXT:    func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA1_f>) {
//CHECK-NEXT:      return
//CHECK-NEXT:    }
//CHECK-NEXT:    func @compute() -> !llzk.struct<@ComponentA1_f> {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentA1_f>
//CHECK-NEXT:      return %[[SELF]] : !llzk.struct<@ComponentA1_f>
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-LABEL: llzk.struct @ComponentA2 {
//CHECK-NEXT:    func @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA1_f>) -> !llzk.struct<@ComponentA2> {
//CHECK-NEXT:      %[[SELF:[0-9a-zA-Z_\.]+]] = new_struct : <@ComponentA2>
//CHECK-NEXT:      %[[T0:[0-9a-zA-Z_\.]+]] = readf %[[A0]][@f1] offset by -1 : <@ComponentA1_f>, !llzk.felt
//CHECK-NEXT:      return %[[SELF]] : !llzk.struct<@ComponentA2>
//CHECK-NEXT:    }
//CHECK-NEXT:    func @constrain(%[[SELF:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA2>, %[[A0:[0-9a-zA-Z_\.]+]]: !llzk.struct<@ComponentA1_f>) {
//CHECK-NEXT:      return
//CHECK-NEXT:    }
//CHECK-NEXT:  }

