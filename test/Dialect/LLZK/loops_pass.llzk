// RUN: llzk-opt -split-input-file %s 2>&1 | FileCheck --enable-var-scope %s

module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentA {
    function.def @compute(%a: !felt.type) -> !struct.type<@ComponentA> {
      %self = struct.new : !struct.type<@ComponentA>
      %res = scf.while (%arg1 = %a) : (!felt.type) -> !felt.type {
        %condition = arith.constant true
        scf.condition(%condition) %arg1 : !felt.type
      } do {
        ^bb0(%arg2: !felt.type):
          %next = felt.add %arg2, %arg2
          scf.yield %next : !felt.type
      } attributes {}
      function.return %self : !struct.type<@ComponentA>
    }

    function.def @constrain(%self: !struct.type<@ComponentA>, %a: !felt.type) {
      function.return
    }
  }
}
//CHECK-LABEL:  struct.def @ComponentA {
//CHECK-NEXT:     function.def @compute(%[[A0:[0-9a-zA-Z_.]+]]: !felt.type) -> !struct.type<@ComponentA> attributes {function.allow_witness} {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_.]+]] = struct.new : <@ComponentA>
//CHECK-NEXT:       %[[T0:[0-9a-zA-Z_.]+]] = scf.while (%[[A1:[0-9a-zA-Z_.]+]] = %[[A0]]) : (!felt.type) -> !felt.type {
//CHECK-NEXT:         %[[T1:[0-9a-zA-Z_.]+]] = arith.constant true
//CHECK-NEXT:         scf.condition(%[[T1]]) %[[A1]] : !felt.type
//CHECK-NEXT:       } do {
//CHECK-NEXT:       ^bb0(%[[A2:[0-9a-zA-Z_.]+]]: !felt.type):
//CHECK-NEXT:         %[[T2:[0-9a-zA-Z_.]+]] = felt.add %[[A2]], %[[A2]]
//CHECK-NEXT:         scf.yield %[[T2]] : !felt.type
//CHECK-NEXT:       }
//CHECK-NEXT:       function.return %[[SELF]] : !struct.type<@ComponentA>
//CHECK-NEXT:     }
//CHECK-NEXT:     function.def @constrain(%[[SELF:[0-9a-zA-Z_.]+]]: !struct.type<@ComponentA>, %[[A0:[0-9a-zA-Z_.]+]]: !felt.type) attributes {function.allow_constraint} {
//CHECK-NEXT:       function.return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentA {
    function.def @compute(%a: !felt.type) -> !struct.type<@ComponentA> {
      %self = struct.new : !struct.type<@ComponentA>
      %res = scf.while (%arg1 = %a) : (!felt.type) -> !felt.type {
        %condition = arith.constant true
        scf.condition(%condition) %arg1 : !felt.type
      } do {
        ^bb0(%arg2: !felt.type):
          %next = felt.add %arg2, %arg2
          scf.yield %next : !felt.type
      } attributes { llzk.loopbounds = #llzk.loopbounds<0 to 10 step 1> }
      function.return %self : !struct.type<@ComponentA>
    }

    function.def @constrain(%self: !struct.type<@ComponentA>, %a: !felt.type) {
      function.return
    }
  }
}
//CHECK-LABEL:  struct.def @ComponentA {
//CHECK-NEXT:     function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !felt.type) -> !struct.type<@ComponentA> attributes {function.allow_witness} {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_.]+]] = struct.new : <@ComponentA>
//CHECK-NEXT:       %[[T0:[0-9a-zA-Z_\.]+]] = scf.while (%[[A1:[0-9a-zA-Z_\.]+]] = %[[A0]]) : (!felt.type) -> !felt.type {
//CHECK-NEXT:         %[[T1:[0-9a-zA-Z_\.]+]] = arith.constant true
//CHECK-NEXT:         scf.condition(%[[T1]]) %[[A1]] : !felt.type
//CHECK-NEXT:       } do {
//CHECK-NEXT:       ^bb0(%[[A2:[0-9a-zA-Z_\.]+]]: !felt.type):
//CHECK-NEXT:         %[[T2:[0-9a-zA-Z_\.]+]] = felt.add %[[A2]], %[[A2]]
//CHECK-NEXT:         scf.yield %[[T2]] : !felt.type
//CHECK-NEXT:       } attributes {llzk.loopbounds = #llzk.loopbounds<0 to 10 step 1>}
//CHECK-NEXT:       function.return %[[SELF]] : !struct.type<@ComponentA>
//CHECK-NEXT:     }
//CHECK-NEXT:     function.def @constrain(%[[SELF:[0-9a-zA-Z_.]+]]: !struct.type<@ComponentA>, %[[A0:[0-9a-zA-Z_\.]+]]: !felt.type) attributes {function.allow_constraint} {
//CHECK-NEXT:       function.return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
// -----

module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentA {
    function.def @compute(%a: !felt.type, %d: !felt.type) -> !struct.type<@ComponentA> {
      %self = struct.new : !struct.type<@ComponentA>
      %lb = arith.constant 0 : index
      %up = arith.constant 4 : index
      %step = arith.constant 1 : index
      %res = scf.for %iv = %lb to %up step %step
          iter_args(%sum = %d) -> !felt.type {
        %1 = felt.add %a, %sum
        scf.yield %1 : !felt.type
      }
      function.return %self : !struct.type<@ComponentA>
    }

    function.def @constrain(%self: !struct.type<@ComponentA>, %a: !felt.type, %d: !felt.type) {
      function.return
    }
  }
}
//CHECK-LABEL:  struct.def @ComponentA {
//CHECK-NEXT:     function.def @compute(%[[A0:[0-9a-zA-Z_\.]+]]: !felt.type,
//CHECK-SAME:         %[[A1:[0-9a-zA-Z_\.]+]]: !felt.type) -> !struct.type<@ComponentA>  attributes {function.allow_witness} {
//CHECK-NEXT:       %[[SELF:[0-9a-zA-Z_.]+]] = struct.new : <@ComponentA>
//CHECK-NEXT:       %[[LB:[0-9a-zA-Z_\.]+]] = arith.constant 0 : index
//CHECK-NEXT:       %[[UB:[0-9a-zA-Z_\.]+]] = arith.constant 4 : index
//CHECK-NEXT:       %[[ST:[0-9a-zA-Z_\.]+]] = arith.constant 1 : index
//CHECK-NEXT:       %[[T0:[0-9a-zA-Z_\.]+]] = scf.for %[[IV:[0-9a-zA-Z_\.]+]] = %[[LB]] to %[[UB]] step %[[ST]]
//CHECK-SAME:         iter_args(%[[T1:[0-9a-zA-Z_\.]+]] = %[[A1]]) -> (!felt.type) {
//CHECK-NEXT:         %[[T2:[0-9a-zA-Z_\.]+]] = felt.add %[[A0]], %[[T1]]
//CHECK-NEXT:         scf.yield %[[T2]] : !felt.type
//CHECK-NEXT:       }
//CHECK-NEXT:       function.return %[[SELF]] : !struct.type<@ComponentA>
//CHECK-NEXT:     }
//CHECK-NEXT:     function.def @constrain(%[[SELF:[0-9a-zA-Z_.]+]]: !struct.type<@ComponentA>,
//CHECK-SAME:         %[[A0:[0-9a-zA-Z_\.]+]]: !felt.type, %[[A1:[0-9a-zA-Z_\.]+]]: !felt.type) attributes {function.allow_constraint} {
//CHECK-NEXT:       function.return
//CHECK-NEXT:     }
//CHECK-NEXT:   }
