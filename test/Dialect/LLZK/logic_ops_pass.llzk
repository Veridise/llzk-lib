// RUN: llzk-opt -split-input-file %s 2>&1 | FileCheck --enable-var-scope %s

function.def @f_and(%a: i1, %b: i1) -> i1 attributes {function.allow_witness} {
  %c = llzk.and %a, %b
  function.return %c: i1
}
//CHECK-LABEL:  function.def @f_and
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: i1, %[[A1:[0-9a-zA-Z_\.]+]]: i1) -> i1 attributes {function.allow_witness} {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = llzk.and %[[A0]], %[[A1]]
//CHECK-NEXT:     function.return %[[T1]] : i1
//CHECK-NEXT:   }
// -----

function.def @f_or(%a: i1, %b: i1) -> i1 attributes {function.allow_witness} {
  %c = llzk.or %a, %b
  function.return %c: i1
}
//CHECK-LABEL:  function.def @f_or
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: i1, %[[A1:[0-9a-zA-Z_\.]+]]: i1) -> i1 attributes {function.allow_witness} {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = llzk.or %[[A0]], %[[A1]]
//CHECK-NEXT:     function.return %[[T1]] : i1
//CHECK-NEXT:   }
// -----

function.def @f_xor(%a: i1, %b: i1) -> i1 attributes {function.allow_witness} {
  %c = llzk.xor %a, %b
  function.return %c: i1
}
//CHECK-LABEL:  function.def @f_xor
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: i1, %[[A1:[0-9a-zA-Z_\.]+]]: i1) -> i1 attributes {function.allow_witness} {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = llzk.xor %[[A0]], %[[A1]]
//CHECK-NEXT:     function.return %[[T1]] : i1
//CHECK-NEXT:   }
// -----

function.def @f_not(%a: i1) -> i1 attributes {function.allow_witness} {
  %c = llzk.not %a
  function.return %c: i1
}
//CHECK-LABEL:  function.def @f_not
//CHECK-SAME:   (%[[A0:[0-9a-zA-Z_\.]+]]: i1) -> i1 attributes {function.allow_witness} {
//CHECK-NEXT:     %[[T1:[0-9a-zA-Z_\.]+]] = llzk.not %[[A0]]
//CHECK-NEXT:     function.return %[[T1]] : i1
//CHECK-NEXT:   }
// -----

!F = !felt.felt
module attributes {veridise.lang = "llzk"} {
  struct.def @ComponentA {
    function.def @compute(%a: !F, %b: !F, %c: !F, %d: !F, %e: !F, %f: !F) -> !struct.struct<@ComponentA> {
      %self = struct.new : !struct.struct<@ComponentA>
      function.return %self : !struct.struct<@ComponentA>
    }

    function.def @constrain(%self: !struct.struct<@ComponentA>, %a: !F, %b: !F, %c: !F, %d: !F, %e: !F, %f: !F) {
      %0 = arith.constant 1 : i1
      %1 = llzk.cmp eq(%e, %f)
      %2 = llzk.cmp lt(%c, %d)
      %3 = arith.andi %1, %2 : i1
      %4 = llzk.cmp eq(%a, %b)
      %5 = arith.ori %3, %4 : i1
      llzk.emit_eq %5, %0 : i1
      function.return
    }
  }
}
// CHECK-LABEL: module attributes {veridise.lang = "llzk"} {
// CHECK-NEXT:    struct.def @ComponentA {
// CHECK-NEXT:      function.def @compute(%[[V0:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V1:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V2:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:      %[[V3:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V4:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V5:[0-9a-zA-Z_\.]+]]: !felt.felt) -> !struct.struct<@ComponentA>  attributes {function.allow_witness} {
// CHECK-NEXT:        %[[V6:[0-9a-zA-Z_\.]+]] = struct.new : <@ComponentA>
// CHECK-NEXT:        function.return %[[V6]] : !struct.struct<@ComponentA>
// CHECK-NEXT:      }
// CHECK-NEXT:      function.def @constrain(%[[V7:[0-9a-zA-Z_\.]+]]: !struct.struct<@ComponentA>, %[[V8:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V9:[0-9a-zA-Z_\.]+]]: !felt.felt,
// CHECK-SAME:      %[[V10:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V11:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V12:[0-9a-zA-Z_\.]+]]: !felt.felt, %[[V13:[0-9a-zA-Z_\.]+]]: !felt.felt) attributes {function.allow_constraint} {
// CHECK-NEXT:        %[[V14:[0-9a-zA-Z_\.]+]] = arith.constant true
// CHECK-NEXT:        %[[V15:[0-9a-zA-Z_\.]+]] = llzk.cmp eq(%[[V12]], %[[V13]])
// CHECK-NEXT:        %[[V16:[0-9a-zA-Z_\.]+]] = llzk.cmp lt(%[[V10]], %[[V11]])
// CHECK-NEXT:        %[[V17:[0-9a-zA-Z_\.]+]] = arith.andi %[[V15]], %[[V16]] : i1
// CHECK-NEXT:        %[[V18:[0-9a-zA-Z_\.]+]] = llzk.cmp eq(%[[V8]], %[[V9]])
// CHECK-NEXT:        %[[V19:[0-9a-zA-Z_\.]+]] = arith.ori %[[V17]], %[[V18]] : i1
// CHECK-NEXT:        llzk.emit_eq %[[V19]], %[[V14]] : i1, i1
// CHECK-NEXT:        function.return
// CHECK-NEXT:      }
// CHECK-NEXT:    }
// CHECK-NEXT:  }
