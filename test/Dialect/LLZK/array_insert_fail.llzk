// RUN: llzk-opt %s -split-input-file -verify-diagnostics

llzk.func @more_indices_than_source(%z: !llzk.array<2,2,2 x !llzk.string>) {
  %r = array.new : !llzk.array<44,2 x !llzk.string>
  %0 = arith.constant 0 : index
  // expected-error@+1 {{'array.insert' op cannot select more dimensions than exist in the source array}}
  array.insert %r[%0,%0,%0] = %z : !llzk.array<44,2 x !llzk.string>, !llzk.array<2,2,2 x !llzk.string>
  return
}

// -----
llzk.func @should_use_array.write(%elem: !llzk.string) {
  %r = array.new : !llzk.array<44,2 x !llzk.string>
  %0 = arith.constant 0 : index
  array.write %r[%0,%0] = %elem : !llzk.array<44,2 x !llzk.string>, !llzk.string
  // expected-error@+1 {{custom op 'array.insert' invalid kind of Type specified}}
  array.insert %r[%0,%0] = %elem : !llzk.array<44,2 x !llzk.string>, !llzk.string
  return
}
// -----
llzk.func @insufficient_indices_none(%0: !llzk.felt, %1: !llzk.felt, %z: !llzk.array<2 x !llzk.felt>) {
  %r = array.new : !llzk.array<4,2 x !llzk.felt>
  // expected-error@+1 {{'array.insert' op has insufficient indexed dimensions: expected 1 but found 0}}
  array.insert %r[] = %z : !llzk.array<4,2 x !llzk.felt>, !llzk.array<2 x !llzk.felt>
  return
}
// -----
llzk.func @insufficient_indices(%a: i1, %b: i1, %c: i1, %d: i1, %e: i1, %f: i1) {
  %a0 = array.new : !llzk.array<2,3,2,3 x i1>

  %0 = arith.constant 0 : index

  %a1 = array.new %a, %b, %c, %d, %e, %f : !llzk.array<2,3 x i1>
  // expected-error@+1 {{'array.insert' op has insufficient indexed dimensions: expected 2 but found 1}}
  array.insert %a0[%0] = %a1 : !llzk.array<2,3,2,3 x i1>, !llzk.array<2,3 x i1>
  return
}
// -----
llzk.func @excess_indices(%a: i1, %b: i1, %c: i1, %d: i1, %e: i1, %f: i1) {
  %a0 = array.new : !llzk.array<2,3,2,3 x i1>

  %0 = arith.constant 0 : index

  %a1 = array.new %a, %b, %c, %d, %e, %f : !llzk.array<2,3 x i1>
  // expected-error@+1 {{'array.insert' op has too many indexed dimensions: expected 2 but found 3}}
  array.insert %a0[%0, %0, %0] = %a1 : !llzk.array<2,3,2,3 x i1>, !llzk.array<2,3 x i1>
  return
}
// -----
llzk.func @incorrect_elem_type(%z: !llzk.array<2 x index>) {
  %r = array.new : !llzk.array<44,2 x !llzk.felt>
  %0 = arith.constant 0 : index
  // expected-error@+1 {{'array.insert' op incorrect array element type; expected: '!llzk.felt', found: 'index'}}
  array.insert %r[%0] = %z : !llzk.array<44,2 x !llzk.felt>, !llzk.array<2 x index>
  return
}
// -----
llzk.func @dimensions_not_unify(%z: !llzk.array<5 x !llzk.felt>) {
  %r = array.new : !llzk.array<44,2 x !llzk.felt>
  %0 = arith.constant 0 : index
  // expected-error@+1 {{'array.insert' op cannot unify array dimensions [2] with [5]}}
  array.insert %r[%0] = %z : !llzk.array<44,2 x !llzk.felt>, !llzk.array<5 x !llzk.felt>
  return
}
