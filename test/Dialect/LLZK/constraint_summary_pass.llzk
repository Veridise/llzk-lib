// RUN: llzk-opt -split-input-file -llzk-inline-includes -llzk-print-constraint-summaries %s 2>&1 | FileCheck %s

module attributes {veridise.lang = "llzk"} {
  llzk.struct @NoConstraints {
    func @compute(%a: !llzk.felt) -> !llzk.struct<@NoConstraints> {
      %self = new_struct : !llzk.struct<@NoConstraints>
      return %self : !llzk.struct<@NoConstraints>
    }

    func @constrain(%self: !llzk.struct<@NoConstraints>, %a: !llzk.felt) {
      return
    }
  }
}

// CHECK-LABEL: NoConstraints ConstraintSummary { }

// -----

module attributes {veridise.lang = "llzk"} {

  llzk.func @global_add(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.felt {
    %c = add %a, %b
    return %c : !llzk.felt
  }

  llzk.struct @Adder {
    field @sum : !llzk.felt {llzk.pub}

    func @compute(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.struct<@Adder> {
      %self = new_struct : !llzk.struct<@Adder>
      %sum = call @global_add(%a, %b) : (!llzk.felt, !llzk.felt) -> (!llzk.felt)
      writef %self[@sum] = %sum : !llzk.struct<@Adder>, !llzk.felt
      return %self : !llzk.struct<@Adder>
    }

    func @constrain(%self: !llzk.struct<@Adder>, %a: !llzk.felt, %b: !llzk.felt) {
      %sum = readf %self[@sum] : !llzk.struct<@Adder>, !llzk.felt
      %c = call @global_add(%a, %b) : (!llzk.felt, !llzk.felt) -> (!llzk.felt)
      emit_eq %sum, %c : !llzk.felt
      return
    }
  }
}

// CHECK-LABEL: Adder ConstraintSummary {
// CHECK-NEXT:     { %arg0[@sum], %arg1, %arg2 }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {

  llzk.func @global_add(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.felt {
    %c = add %a, %b
    return %c : !llzk.felt
  }

  llzk.struct @Adder2 {
    field @sum : !llzk.felt {llzk.pub}

    func @compute(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.struct<@Adder2> {
      %self = new_struct : !llzk.struct<@Adder2>
      %sum = call @global_add(%a, %b) : (!llzk.felt, !llzk.felt) -> (!llzk.felt)
      writef %self[@sum] = %sum : !llzk.struct<@Adder2>, !llzk.felt
      return %self : !llzk.struct<@Adder2>
    }

    func @constrain(%self: !llzk.struct<@Adder2>, %a: !llzk.felt, %b: !llzk.felt) {
      %sum = readf %self[@sum] : !llzk.struct<@Adder2>, !llzk.felt
      %c = call @global_add(%a, %b) : (!llzk.felt, !llzk.felt) -> (!llzk.felt)
      %d = add %c, %c
      emit_eq %sum, %d : !llzk.felt
      return
    }
  }
}

// -----

// NOTE: using inline includes pass here to remove test file redundancy
// and to avoid polluting the original ZIR example file with the expected
// outputs of this pass.
module attributes {veridise.lang = "llzk"} {
  llzk.include "zir_example_1.llzk" as @zir
}

// CHECK-LABEL: ValU32 ConstraintSummary {
// CHECK-NEXT:     { %arg0[@low] }
// CHECK-NEXT:     { %arg0[@high] }
// CHECK-NEXT:     { %arg1 }
// CHECK-NEXT:     { %arg2 }
// CHECK-NEXT: }
// CHECK-NEXT: Reg ConstraintSummary {
// CHECK-NEXT:     { %arg1, %arg0[@reg] }
// CHECK-NEXT: }
// CHECK-NEXT: C1 ConstraintSummary {
// CHECK-NEXT:     { %arg1, %arg2, %arg0[@z][@reg] }
// CHECK-NEXT: }
// CHECK-NEXT: C2 ConstraintSummary {
// CHECK-NEXT:     { %arg1[@low], %arg1[@high], %arg0[@fc1][@z][@reg], <constfelt: 0> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ComponentB {
    func @constrain(%self: !llzk.struct<@ComponentB>, %a: !llzk.felt, %b: !llzk.array<5 x !llzk.felt>) {
      llzk.emit_in %a, %b : !llzk.array<5 x !llzk.felt>
      return
    }

    func @compute() -> !llzk.struct<@ComponentB> {
      %self = new_struct : !llzk.struct<@ComponentB>
      return %self : !llzk.struct<@ComponentB>
    }
  }
}

// CHECK: ComponentB ConstraintSummary {
// CHECK-NEXT:     { %arg1, %arg2 }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {

  llzk.struct @EnsureZero {
    func @compute(%a: !llzk.felt) -> !llzk.struct<@EnsureZero> {
      %self = new_struct : !llzk.struct<@EnsureZero>
      return %self : !llzk.struct<@EnsureZero>
    }

    func @constrain(%self: !llzk.struct<@EnsureZero>, %a: !llzk.felt) {
      %zero = llzk.constfelt 0
      emit_eq %a, %zero : !llzk.felt
      return
    }
  }

  llzk.struct @EnsureBothZero {
    func @compute(%a: !llzk.felt, %b: !llzk.felt) -> !llzk.struct<@EnsureBothZero> {
      %self = new_struct : !llzk.struct<@EnsureBothZero>
      return %self : !llzk.struct<@EnsureBothZero>
    }

    // NOTE: This test case demonstrates where this analysis is currently overly conservative,
    // as it does not determine that %a and %b must be precisely equal to 0.
    func @constrain(%self: !llzk.struct<@EnsureBothZero>, %a: !llzk.felt, %b: !llzk.felt) {
      %zero = llzk.constfelt 0
      emit_eq %a, %b : !llzk.felt
      emit_eq %a, %zero : !llzk.felt
      return
    }
  }
}

// CHECK-LABEL: EnsureZero ConstraintSummary {
// CHECK-NEXT:     { %arg1, <constfelt: 0> }
// CHECK-NEXT: }
// CHECK-NEXT: EnsureBothZero ConstraintSummary {
// CHECK-NEXT:     { %arg1, %arg2, <constfelt: 0> }
// CHECK-NEXT: }

// -----

module attributes {veridise.lang = "llzk"} {

  llzk.struct @Passthrough {
    field @out : !llzk.felt {llzk.pub}

    func @compute(%in: !llzk.felt) -> !llzk.struct<@Passthrough> {
      %self = new_struct : !llzk.struct<@Passthrough>
      writef %self[@out] = %in : !llzk.struct<@Passthrough>, !llzk.felt
      return %self : !llzk.struct<@Passthrough>
    }

    func @constrain(%self: !llzk.struct<@Passthrough>, %in: !llzk.felt) {
      %out = readf %self[@out] : !llzk.struct<@Passthrough>, !llzk.felt
      emit_eq %in, %out : !llzk.felt
      return
    }
  }

  llzk.struct @EnsureIsZero {
    field @p : !llzk.struct<@Passthrough>

    func @compute(%in: !llzk.felt) -> !llzk.struct<@EnsureIsZero> {
      %self = new_struct : !llzk.struct<@EnsureIsZero>
      %p_0 = call @Passthrough::@compute(%in) : (!llzk.felt) -> (!llzk.struct<@Passthrough>)
      writef %self[@p] = %p_0 : !llzk.struct<@EnsureIsZero>, !llzk.struct<@Passthrough>
      return %self : !llzk.struct<@EnsureIsZero>
    }

    func @constrain(%self: !llzk.struct<@EnsureIsZero>, %in: !llzk.felt) {
      %zero = llzk.constfelt 0
      %p_0 = readf %self[@p] : !llzk.struct<@EnsureIsZero>, !llzk.struct<@Passthrough>
      call @Passthrough::@constrain(%p_0, %zero) : (!llzk.struct<@Passthrough>, !llzk.felt) -> ()
      %out = readf %p_0[@out] : !llzk.struct<@Passthrough>, !llzk.felt
      emit_eq %in, %out : !llzk.felt
      return
    }
  }
}

// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ArrayCheck {
    func @constrain(%self: !llzk.struct<@ArrayCheck>, %in: !llzk.array<5 x !llzk.felt>) {
      %fval = llzk.constfelt 7
      %idx = index.constant 3
      %elem = llzk.readarr %in[%idx] : !llzk.array<5 x !llzk.felt>, !llzk.felt
      llzk.emit_eq %elem, %fval : !llzk.felt
      return
    }

    func @compute() -> !llzk.struct<@ArrayCheck> {
      %self = new_struct : !llzk.struct<@ArrayCheck>
      return %self : !llzk.struct<@ArrayCheck>
    }
  }
}

// -----

module attributes {veridise.lang = "llzk"} {
  llzk.struct @ArrayForCheck {
    func @constrain(%self: !llzk.struct<@ArrayForCheck>, %in: !llzk.array<5 x !llzk.felt>) {
      %lb = index.constant 0
      %up = index.constant 5
      %step = index.constant 1
      %fval = llzk.constfelt 7
      scf.for %iv = %lb to %up step %step {
        %elem = llzk.readarr %in[%iv] : !llzk.array<5 x !llzk.felt>, !llzk.felt
        llzk.emit_eq %elem, %fval : !llzk.felt
      }
      return
    }

    func @compute() -> !llzk.struct<@ArrayForCheck> {
      %self = new_struct : !llzk.struct<@ArrayForCheck>
      return %self : !llzk.struct<@ArrayForCheck>
    }
  }
}